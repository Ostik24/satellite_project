
temperature_test4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08011690  08011690  00012690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fe0  08011fe0  000131f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011fe0  08011fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fe8  08011fe8  000131f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fe8  08011fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011fec  08011fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08011ff0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  200001f4  080121e4  000131f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d80  080121e4  00013d80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ecbc  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054d6  00000000  00000000  00031ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  000373b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d2  00000000  00000000  00038c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5b2  00000000  00000000  00039f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ec5  00000000  00000000  000564ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a52  00000000  00000000  0007a3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ee03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007728  00000000  00000000  0010ee48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00116570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011674 	.word	0x08011674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08011674 	.word	0x08011674

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BlockTillConversionComplete>:
static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt);
//static bool IsAllZeros(const uint8_t * const scratchPad, const size_t length);

// Continue to check if the IC has responded with a temperature
static void BlockTillConversionComplete(DallasTemperature_HandleTypeDef* dt, uint8_t bitResolution)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
	int delms = DT_MillisToWaitForConversion(bitResolution);
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fbac 	bl	8001614 <DT_MillisToWaitForConversion>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60fb      	str	r3, [r7, #12]

	if (dt->checkForConversion && !dt->parasite)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a9b      	ldrb	r3, [r3, #10]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01d      	beq.n	8000f04 <BlockTillConversionComplete+0x5c>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	799b      	ldrb	r3, [r3, #6]
 8000ecc:	f083 0301 	eor.w	r3, r3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d016      	beq.n	8000f04 <BlockTillConversionComplete+0x5c>
	{
		unsigned long now = HAL_GetTick();
 8000ed6:	f002 fc69 	bl	80037ac <HAL_GetTick>
 8000eda:	60b8      	str	r0, [r7, #8]
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8000edc:	e000      	b.n	8000ee0 <BlockTillConversionComplete+0x38>
		{
			__NOP();
 8000ede:	bf00      	nop
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fb59 	bl	8001598 <DT_IsConversionComplete>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d013      	beq.n	8000f1a <BlockTillConversionComplete+0x72>
 8000ef2:	f002 fc5b 	bl	80037ac <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d8ed      	bhi.n	8000ede <BlockTillConversionComplete+0x36>
	{
 8000f02:	e00a      	b.n	8000f1a <BlockTillConversionComplete+0x72>
		}
	}
	else
	{
		ActivateExternalPullup(dt);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f80d 	bl	8000f24 <ActivateExternalPullup>
		HAL_Delay(delms);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fc59 	bl	80037c4 <HAL_Delay>
		DeactivateExternalPullup(dt);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f81a 	bl	8000f4c <DeactivateExternalPullup>
	}
}
 8000f18:	e000      	b.n	8000f1c <BlockTillConversionComplete+0x74>
	{
 8000f1a:	bf00      	nop
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <ActivateExternalPullup>:

static void ActivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	79db      	ldrb	r3, [r3, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <ActivateExternalPullup+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f3a:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <ActivateExternalPullup+0x24>)
 8000f3c:	f003 fdda 	bl	8004af4 <HAL_GPIO_WritePin>
	}
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020800 	.word	0x40020800

08000f4c <DeactivateExternalPullup>:

static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	79db      	ldrb	r3, [r3, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <DeactivateExternalPullup+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f62:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <DeactivateExternalPullup+0x24>)
 8000f64:	f003 fdc6 	bl	8004af4 <HAL_GPIO_WritePin>
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40020800 	.word	0x40020800

08000f74 <DT_SetOneWire>:

	DeactivateExternalPullup(dt);
}

void DT_SetOneWire(DallasTemperature_HandleTypeDef* dt, OneWire_HandleTypeDef* ow)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	dt->ow 					= ow;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	601a      	str	r2, [r3, #0]
	dt->devices 			= 0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	711a      	strb	r2, [r3, #4]
	dt->ds18Count 			= 0;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	715a      	strb	r2, [r3, #5]
	dt->parasite 			= false;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	719a      	strb	r2, [r3, #6]
	dt->bitResolution 		= 9;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2209      	movs	r2, #9
 8000f9a:	721a      	strb	r2, [r3, #8]
	dt->waitForConversion 	= true;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	725a      	strb	r2, [r3, #9]
	dt->checkForConversion 	= true;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
	dt->autoSaveScratchPad 	= true;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	72da      	strb	r2, [r3, #11]
	dt->useExternalPullup 	= false;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	71da      	strb	r2, [r3, #7]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DT_Begin>:

void DT_Begin(DallasTemperature_HandleTypeDef* dt)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b08f      	sub	sp, #60	@ 0x3c
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	AllDeviceAddress deviceAddress;

	OW_ResetSearch(dt->ow);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fd96 	bl	8001afe <OW_ResetSearch>
	dt->devices = 0; 	// Reset the number of devices when we enumerate wire devices
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	711a      	strb	r2, [r3, #4]
	dt->ds18Count = 0; 	// Reset number of DS18xxx Family devices
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	715a      	strb	r2, [r3, #5]

	dt->devices = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f107 010c 	add.w	r1, r7, #12
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fdab 	bl	8001b44 <OW_Search>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 0; i < dt->devices; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000ffc:	e059      	b.n	80010b2 <DT_Begin+0xf2>
	{
		if (DT_ValidAddress(&deviceAddress[i * 8]))
 8000ffe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	f107 020c 	add.w	r2, r7, #12
 8001008:	4413      	add	r3, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f868 	bl	80010e0 <DT_ValidAddress>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d048      	beq.n	80010a8 <DT_Begin+0xe8>
		{

			if (!dt->parasite && DT_ReadPowerSupply(dt, &deviceAddress[i * 8]))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	799b      	ldrb	r3, [r3, #6]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00f      	beq.n	8001044 <DT_Begin+0x84>
 8001024:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	4413      	add	r3, r2
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f98c 	bl	8001350 <DT_ReadPowerSupply>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <DT_Begin+0x84>
				dt->parasite = true;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	719a      	strb	r2, [r3, #6]

			dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, &deviceAddress[i * 8]));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7a1c      	ldrb	r4, [r3, #8]
 8001048:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	f107 020c 	add.w	r2, r7, #12
 8001052:	4413      	add	r3, r2
 8001054:	4619      	mov	r1, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fa6e 	bl	8001538 <DT_GetResolution>
 800105c:	4603      	mov	r3, r0
 800105e:	429c      	cmp	r4, r3
 8001060:	d902      	bls.n	8001068 <DT_Begin+0xa8>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7a1a      	ldrb	r2, [r3, #8]
 8001066:	e00b      	b.n	8001080 <DT_Begin+0xc0>
 8001068:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	f107 020c 	add.w	r2, r7, #12
 8001072:	4413      	add	r3, r2
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 fa5e 	bl	8001538 <DT_GetResolution>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	721a      	strb	r2, [r3, #8]

			if (DT_ValidFamily(&deviceAddress[i * 8]))
 8001084:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	4413      	add	r3, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f83b 	bl	800110c <DT_ValidFamily>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <DT_Begin+0xe8>
			{
				dt->ds18Count++;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	795b      	ldrb	r3, [r3, #5]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0; i < dt->devices; i++)
 80010a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010ac:	3301      	adds	r3, #1
 80010ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	791b      	ldrb	r3, [r3, #4]
 80010b6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d39f      	bcc.n	8000ffe <DT_Begin+0x3e>
			}
		}
	}
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	373c      	adds	r7, #60	@ 0x3c
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}

080010c8 <DT_GetDeviceCount>:

// returns the number of devices found on the bus
uint8_t DT_GetDeviceCount(DallasTemperature_HandleTypeDef* dt)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	return dt->devices;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	791b      	ldrb	r3, [r3, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DT_ValidAddress>:
	return dt->ds18Count;
}

// returns true if address is valid
bool DT_ValidAddress(const uint8_t* deviceAddress)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	return (OW_Crc8(deviceAddress, 7) == deviceAddress[7]);
 80010e8:	2107      	movs	r1, #7
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 fe06 	bl	8001cfc <OW_Crc8>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3307      	adds	r3, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	bf0c      	ite	eq
 80010fe:	2301      	moveq	r3, #1
 8001100:	2300      	movne	r3, #0
 8001102:	b2db      	uxtb	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <DT_ValidFamily>:

bool DT_ValidFamily(const uint8_t* deviceAddress)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	switch (deviceAddress[DSROM_FAMILY])
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b42      	cmp	r3, #66	@ 0x42
 800111a:	dc15      	bgt.n	8001148 <DT_ValidFamily+0x3c>
 800111c:	2b28      	cmp	r3, #40	@ 0x28
 800111e:	da04      	bge.n	800112a <DT_ValidFamily+0x1e>
 8001120:	2b10      	cmp	r3, #16
 8001122:	d00f      	beq.n	8001144 <DT_ValidFamily+0x38>
 8001124:	2b22      	cmp	r3, #34	@ 0x22
 8001126:	d00d      	beq.n	8001144 <DT_ValidFamily+0x38>
 8001128:	e00e      	b.n	8001148 <DT_ValidFamily+0x3c>
 800112a:	3b28      	subs	r3, #40	@ 0x28
 800112c:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <DT_ValidFamily+0x4c>)
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf14      	ite	ne
 800113a:	2301      	movne	r3, #1
 800113c:	2300      	moveq	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <DT_ValidFamily+0x3c>
	case DS18S20MODEL:
	case DS18B20MODEL:
	case DS1822MODEL:
	case DS1825MODEL:
	case DS28EA00MODEL:
		return true;
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <DT_ValidFamily+0x3e>
	default:
		return false;
 8001148:	2300      	movs	r3, #0
	}
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	04080001 	.word	0x04080001

0800115c <DT_GetAddress>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DT_GetAddress(DallasTemperature_HandleTypeDef* dt, uint8_t* currentDeviceAddress, uint8_t index)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b090      	sub	sp, #64	@ 0x40
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	4613      	mov	r3, r2
 8001168:	71fb      	strb	r3, [r7, #7]
	AllDeviceAddress deviceAddress;

	uint8_t depth = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	depth = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f107 0114 	add.w	r1, r7, #20
 8001178:	2205      	movs	r2, #5
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fce2 	bl	8001b44 <OW_Search>
 8001180:	4603      	mov	r3, r0
 8001182:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if(index < depth && DT_ValidAddress(&deviceAddress[index * 8]))
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800118c:	429a      	cmp	r2, r3
 800118e:	d216      	bcs.n	80011be <DT_GetAddress+0x62>
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	f107 0214 	add.w	r2, r7, #20
 8001198:	4413      	add	r3, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ffa0 	bl	80010e0 <DT_ValidAddress>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <DT_GetAddress+0x62>
	{
		memcpy(currentDeviceAddress, &deviceAddress[index * 8], 8);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	f107 0214 	add.w	r2, r7, #20
 80011ae:	4413      	add	r3, r2
 80011b0:	2208      	movs	r2, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f00e fb6c 	bl	800f892 <memcpy>
		return true;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <DT_GetAddress+0x64>
	}

	return false;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3740      	adds	r7, #64	@ 0x40
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <DT_IsConnected_ScratchPad>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DT_IsConnected_ScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	bool b = DT_ReadScratchPad(dt, deviceAddress, scratchPad);
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f81b 	bl	8001214 <DT_ReadScratchPad>
 80011de:	4603      	mov	r3, r0
 80011e0:	75fb      	strb	r3, [r7, #23]
	return (b /*&& IsAllZeros(scratchPad, 8)*/ && (OW_Crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]));
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00c      	beq.n	8001202 <DT_IsConnected_ScratchPad+0x3a>
 80011e8:	2108      	movs	r1, #8
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fd86 	bl	8001cfc <OW_Crc8>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3308      	adds	r3, #8
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d101      	bne.n	8001202 <DT_IsConnected_ScratchPad+0x3a>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <DT_IsConnected_ScratchPad+0x3c>
 8001202:	2300      	movs	r3, #0
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <DT_ReadScratchPad>:

bool DT_ReadScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b08c      	sub	sp, #48	@ 0x30
 8001218:	af02      	add	r7, sp, #8
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	// send the reset command and fail fast
	int b = OW_Reset(dt->ow);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fbb3 	bl	8001990 <OW_Reset>
 800122a:	4603      	mov	r3, r0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (b == 0)
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <DT_ReadScratchPad+0x24>
		return false;
 8001234:	2300      	movs	r3, #0
 8001236:	e027      	b.n	8001288 <DT_ReadScratchPad+0x74>

	uint8_t query[19]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READSCRATCH, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <DT_ReadScratchPad+0x7c>)
 800123a:	f107 0410 	add.w	r4, r7, #16
 800123e:	461d      	mov	r5, r3
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	8022      	strh	r2, [r4, #0]
 800124a:	3402      	adds	r4, #2
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	7023      	strb	r3, [r4, #0]
	memcpy(&query[1], deviceAddress, 8);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	3301      	adds	r3, #1
 8001256:	2208      	movs	r2, #8
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	4618      	mov	r0, r3
 800125c:	f00e fb19 	bl	800f892 <memcpy>
	//         DS18B20 & DS1822: store for crc
	// byte 7: DS18S20: COUNT_PER_C
	//         DS18B20 & DS1822: store for crc
	// byte 8: SCRATCHPAD_CRC

	b = OW_Send(dt->ow, query, 19, scratchPad, 9, 10);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	f107 0110 	add.w	r1, r7, #16
 8001268:	230a      	movs	r3, #10
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	2309      	movs	r3, #9
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2213      	movs	r2, #19
 8001274:	f000 fbc0 	bl	80019f8 <OW_Send>
 8001278:	4603      	mov	r3, r0
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24

	return (b == OW_OK);
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	2b01      	cmp	r3, #1
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2db      	uxtb	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bdb0      	pop	{r4, r5, r7, pc}
 8001290:	08011690 	.word	0x08011690

08001294 <DT_WriteScratchPad>:

void DT_WriteScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, const uint8_t* scratchPad)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af02      	add	r7, sp, #8
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	uint8_t query[13]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, WRITESCRATCH, scratchPad[HIGH_ALARM_TEMP], scratchPad[LOW_ALARM_TEMP], scratchPad[CONFIGURATION]};
 80012a0:	2355      	movs	r3, #85	@ 0x55
 80012a2:	743b      	strb	r3, [r7, #16]
 80012a4:	2300      	movs	r3, #0
 80012a6:	747b      	strb	r3, [r7, #17]
 80012a8:	2300      	movs	r3, #0
 80012aa:	74bb      	strb	r3, [r7, #18]
 80012ac:	2300      	movs	r3, #0
 80012ae:	74fb      	strb	r3, [r7, #19]
 80012b0:	2300      	movs	r3, #0
 80012b2:	753b      	strb	r3, [r7, #20]
 80012b4:	2300      	movs	r3, #0
 80012b6:	757b      	strb	r3, [r7, #21]
 80012b8:	2300      	movs	r3, #0
 80012ba:	75bb      	strb	r3, [r7, #22]
 80012bc:	2300      	movs	r3, #0
 80012be:	75fb      	strb	r3, [r7, #23]
 80012c0:	2300      	movs	r3, #0
 80012c2:	763b      	strb	r3, [r7, #24]
 80012c4:	234e      	movs	r3, #78	@ 0x4e
 80012c6:	767b      	strb	r3, [r7, #25]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3302      	adds	r3, #2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	76bb      	strb	r3, [r7, #26]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3303      	adds	r3, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	76fb      	strb	r3, [r7, #27]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3304      	adds	r3, #4
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	773b      	strb	r3, [r7, #28]
	memcpy(&query[1], deviceAddress, 8);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	3301      	adds	r3, #1
 80012e6:	2208      	movs	r2, #8
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00e fad1 	bl	800f892 <memcpy>

	// DS1820 and DS18S20 have no configuration register
	if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d00c      	beq.n	8001312 <DT_WriteScratchPad+0x7e>
	{
		OW_Send(dt->ow, query, 13, NULL, 0, OW_NO_READ);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	f107 0110 	add.w	r1, r7, #16
 8001300:	23ff      	movs	r3, #255	@ 0xff
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	220d      	movs	r2, #13
 800130c:	f000 fb74 	bl	80019f8 <OW_Send>
 8001310:	e00b      	b.n	800132a <DT_WriteScratchPad+0x96>
	}
	else
	{
		OW_Send(dt->ow, query, 12, NULL, 0, OW_NO_READ);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f107 0110 	add.w	r1, r7, #16
 800131a:	23ff      	movs	r3, #255	@ 0xff
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	2300      	movs	r3, #0
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2300      	movs	r3, #0
 8001324:	220c      	movs	r2, #12
 8001326:	f000 fb67 	bl	80019f8 <OW_Send>
	}

	if (dt->autoSaveScratchPad)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7adb      	ldrb	r3, [r3, #11]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d004      	beq.n	800133c <DT_WriteScratchPad+0xa8>
	{
		DT_SaveScratchPad(dt, deviceAddress);
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f98b 	bl	8001650 <DT_SaveScratchPad>
	}
	else
	{
		OW_Reset(dt->ow);
	}
}
 800133a:	e004      	b.n	8001346 <DT_WriteScratchPad+0xb2>
		OW_Reset(dt->ow);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fb25 	bl	8001990 <OW_Reset>
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <DT_ReadPowerSupply>:
// returns true if parasite mode is used (2 wire)
// returns false if normal mode is used (3 wire)
// if no address is given (or nullptr) it checks if any device on the bus
// uses parasite mode.
bool DT_ReadPowerSupply(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af02      	add	r7, sp, #8
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	uint8_t parasiteMode = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]

	OW_Reset(dt->ow);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fb14 	bl	8001990 <OW_Reset>

	uint8_t query[11]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READPOWERSUPPLY, 0xFF};
 8001368:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <DT_ReadPowerSupply+0xa0>)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001370:	c303      	stmia	r3!, {r0, r1}
 8001372:	801a      	strh	r2, [r3, #0]
 8001374:	3302      	adds	r3, #2
 8001376:	0c12      	lsrs	r2, r2, #16
 8001378:	701a      	strb	r2, [r3, #0]

	if (deviceAddress == NULL)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d111      	bne.n	80013a4 <DT_ReadPowerSupply+0x54>
	{
	  query[0] = 0xCC;
 8001380:	23cc      	movs	r3, #204	@ 0xcc
 8001382:	733b      	strb	r3, [r7, #12]
	  query[1] = READPOWERSUPPLY;
 8001384:	23b4      	movs	r3, #180	@ 0xb4
 8001386:	737b      	strb	r3, [r7, #13]
	  OW_Send(dt->ow, query, 3, &parasiteMode, 1, 2);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	f107 0317 	add.w	r3, r7, #23
 8001390:	f107 010c 	add.w	r1, r7, #12
 8001394:	2202      	movs	r2, #2
 8001396:	9201      	str	r2, [sp, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	9200      	str	r2, [sp, #0]
 800139c:	2203      	movs	r2, #3
 800139e:	f000 fb2b 	bl	80019f8 <OW_Send>
 80013a2:	e016      	b.n	80013d2 <DT_ReadPowerSupply+0x82>
	}
	else
	{
	  query[0] = 0x55;
 80013a4:	2355      	movs	r3, #85	@ 0x55
 80013a6:	733b      	strb	r3, [r7, #12]
	  memcpy(&query[1], deviceAddress, 8);
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	3301      	adds	r3, #1
 80013ae:	2208      	movs	r2, #8
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00e fa6d 	bl	800f892 <memcpy>
	  OW_Send(dt->ow, query, 10, &parasiteMode, 1, 10);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	f107 0317 	add.w	r3, r7, #23
 80013c0:	f107 010c 	add.w	r1, r7, #12
 80013c4:	220a      	movs	r2, #10
 80013c6:	9201      	str	r2, [sp, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	220a      	movs	r2, #10
 80013ce:	f000 fb13 	bl	80019f8 <OW_Send>
	}

	OW_Reset(dt->ow);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fada 	bl	8001990 <OW_Reset>

	if (parasiteMode == 0)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <DT_ReadPowerSupply+0x96>
	{
		return true;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <DT_ReadPowerSupply+0x98>
	}
	else
	{
		return false;
 80013e6:	2300      	movs	r3, #0
	}
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	080116a4 	.word	0x080116a4

080013f4 <DT_SetResolution>:
}

// set resolution of a device to 9, 10, 11, or 12 bits
// if new resolution is out of range, 9 bits is used.
bool DT_SetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t newResolution, bool skipGlobalBitResolutionCalculation)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	@ 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	4611      	mov	r1, r2
 8001400:	461a      	mov	r2, r3
 8001402:	460b      	mov	r3, r1
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	4613      	mov	r3, r2
 8001408:	71bb      	strb	r3, [r7, #6]
	// ensure same behavior as setResolution(uint8_t newResolution)
	newResolution = constrain(newResolution, 9, 12);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b08      	cmp	r3, #8
 800140e:	d905      	bls.n	800141c <DT_SetResolution+0x28>
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b0c      	cmp	r3, #12
 8001414:	bf28      	it	cs
 8001416:	230c      	movcs	r3, #12
 8001418:	b2db      	uxtb	r3, r3
 800141a:	e000      	b.n	800141e <DT_SetResolution+0x2a>
 800141c:	2309      	movs	r3, #9
 800141e:	71fb      	strb	r3, [r7, #7]

	// return when stored value == new value
	if (DT_GetResolution(dt, deviceAddress) == newResolution)
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f888 	bl	8001538 <DT_GetResolution>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <DT_SetResolution+0x42>
		return true;
 8001432:	2301      	movs	r3, #1
 8001434:	e070      	b.n	8001518 <DT_SetResolution+0x124>

	ScratchPad scratchPad;

	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	461a      	mov	r2, r3
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff fec2 	bl	80011c8 <DT_IsConnected_ScratchPad>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d065      	beq.n	8001516 <DT_SetResolution+0x122>
	{
		// DS1820 and DS18S20 have no resolution configuration register
		if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b10      	cmp	r3, #16
 8001450:	d05f      	beq.n	8001512 <DT_SetResolution+0x11e>
		{
			switch (newResolution)
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d006      	beq.n	8001466 <DT_SetResolution+0x72>
 8001458:	2b0c      	cmp	r3, #12
 800145a:	dc0d      	bgt.n	8001478 <DT_SetResolution+0x84>
 800145c:	2b0a      	cmp	r3, #10
 800145e:	d008      	beq.n	8001472 <DT_SetResolution+0x7e>
 8001460:	2b0b      	cmp	r3, #11
 8001462:	d003      	beq.n	800146c <DT_SetResolution+0x78>
 8001464:	e008      	b.n	8001478 <DT_SetResolution+0x84>
			{
			case 12:
				scratchPad[CONFIGURATION] = TEMP_12_BIT;
 8001466:	237f      	movs	r3, #127	@ 0x7f
 8001468:	773b      	strb	r3, [r7, #28]
				break;
 800146a:	e008      	b.n	800147e <DT_SetResolution+0x8a>
			case 11:
				scratchPad[CONFIGURATION] = TEMP_11_BIT;
 800146c:	235f      	movs	r3, #95	@ 0x5f
 800146e:	773b      	strb	r3, [r7, #28]
				break;
 8001470:	e005      	b.n	800147e <DT_SetResolution+0x8a>
			case 10:
				scratchPad[CONFIGURATION] = TEMP_10_BIT;
 8001472:	233f      	movs	r3, #63	@ 0x3f
 8001474:	773b      	strb	r3, [r7, #28]
				break;
 8001476:	e002      	b.n	800147e <DT_SetResolution+0x8a>
			case 9:
			default:
				scratchPad[CONFIGURATION] = TEMP_9_BIT;
 8001478:	231f      	movs	r3, #31
 800147a:	773b      	strb	r3, [r7, #28]
				break;
 800147c:	bf00      	nop
			}

			DT_WriteScratchPad(dt, deviceAddress, scratchPad);
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	461a      	mov	r2, r3
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff ff04 	bl	8001294 <DT_WriteScratchPad>

			// without calculation we can always set it to max
			dt->bitResolution = max(dt->bitResolution, newResolution);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	7a1b      	ldrb	r3, [r3, #8]
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	4293      	cmp	r3, r2
 8001494:	bf38      	it	cc
 8001496:	4613      	movcc	r3, r2
 8001498:	b2da      	uxtb	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	721a      	strb	r2, [r3, #8]

			if (!skipGlobalBitResolutionCalculation && (dt->bitResolution > newResolution))
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	f083 0301 	eor.w	r3, r3, #1
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d033      	beq.n	8001512 <DT_SetResolution+0x11e>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	7a1b      	ldrb	r3, [r3, #8]
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d22e      	bcs.n	8001512 <DT_SetResolution+0x11e>
			{
				dt->bitResolution = newResolution;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	721a      	strb	r2, [r3, #8]

				CurrentDeviceAddress deviceAddr;

				for (int i = 0; i < dt->devices; i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014be:	e022      	b.n	8001506 <DT_SetResolution+0x112>
				{
					DT_GetAddress(dt, deviceAddr, i);
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4619      	mov	r1, r3
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7ff fe46 	bl	800115c <DT_GetAddress>
					dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, deviceAddr));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	7a1c      	ldrb	r4, [r3, #8]
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f82c 	bl	8001538 <DT_GetResolution>
 80014e0:	4603      	mov	r3, r0
 80014e2:	429c      	cmp	r4, r3
 80014e4:	d902      	bls.n	80014ec <DT_SetResolution+0xf8>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	7a1a      	ldrb	r2, [r3, #8]
 80014ea:	e007      	b.n	80014fc <DT_SetResolution+0x108>
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 f820 	bl	8001538 <DT_GetResolution>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	721a      	strb	r2, [r3, #8]
				for (int i = 0; i < dt->devices; i++)
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	3301      	adds	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	461a      	mov	r2, r3
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	4293      	cmp	r3, r2
 8001510:	dbd6      	blt.n	80014c0 <DT_SetResolution+0xcc>
				}
			}
		}
		return true;  // new value set
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <DT_SetResolution+0x124>
	}
	return false;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	372c      	adds	r7, #44	@ 0x2c
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}

08001520 <DT_GetAllResolution>:

// returns the global resolution
uint8_t DT_GetAllResolution(DallasTemperature_HandleTypeDef* dt)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	return dt->bitResolution;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7a1b      	ldrb	r3, [r3, #8]
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DT_GetResolution>:

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DT_GetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	// DS1820 and DS18S20 have no resolution configuration register
	if (deviceAddress[0] == DS18S20MODEL)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b10      	cmp	r3, #16
 8001548:	d101      	bne.n	800154e <DT_GetResolution+0x16>
		return 12;
 800154a:	230c      	movs	r3, #12
 800154c:	e020      	b.n	8001590 <DT_GetResolution+0x58>

	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	461a      	mov	r2, r3
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fe36 	bl	80011c8 <DT_IsConnected_ScratchPad>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d015      	beq.n	800158e <DT_GetResolution+0x56>
	{
		switch (scratchPad[CONFIGURATION])
 8001562:	7c3b      	ldrb	r3, [r7, #16]
 8001564:	2b7f      	cmp	r3, #127	@ 0x7f
 8001566:	d00a      	beq.n	800157e <DT_GetResolution+0x46>
 8001568:	2b7f      	cmp	r3, #127	@ 0x7f
 800156a:	dc10      	bgt.n	800158e <DT_GetResolution+0x56>
 800156c:	2b5f      	cmp	r3, #95	@ 0x5f
 800156e:	d008      	beq.n	8001582 <DT_GetResolution+0x4a>
 8001570:	2b5f      	cmp	r3, #95	@ 0x5f
 8001572:	dc0c      	bgt.n	800158e <DT_GetResolution+0x56>
 8001574:	2b1f      	cmp	r3, #31
 8001576:	d008      	beq.n	800158a <DT_GetResolution+0x52>
 8001578:	2b3f      	cmp	r3, #63	@ 0x3f
 800157a:	d004      	beq.n	8001586 <DT_GetResolution+0x4e>
 800157c:	e007      	b.n	800158e <DT_GetResolution+0x56>
		{
		case TEMP_12_BIT:
			return 12;
 800157e:	230c      	movs	r3, #12
 8001580:	e006      	b.n	8001590 <DT_GetResolution+0x58>

		case TEMP_11_BIT:
			return 11;
 8001582:	230b      	movs	r3, #11
 8001584:	e004      	b.n	8001590 <DT_GetResolution+0x58>

		case TEMP_10_BIT:
			return 10;
 8001586:	230a      	movs	r3, #10
 8001588:	e002      	b.n	8001590 <DT_GetResolution+0x58>

		case TEMP_9_BIT:
			return 9;
 800158a:	2309      	movs	r3, #9
 800158c:	e000      	b.n	8001590 <DT_GetResolution+0x58>
		}
	}
	return 0;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <DT_IsConversionComplete>:
{
	return dt->checkForConversion;
}

bool DT_IsConversionComplete(DallasTemperature_HandleTypeDef* dt)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af02      	add	r7, sp, #8
 800159e:	6078      	str	r0, [r7, #4]
	uint8_t b;
	OW_Send(dt->ow, (uint8_t *) OW_READ_SLOT, 0, &b, 1, 0);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	f107 030f 	add.w	r3, r7, #15
 80015a8:	2200      	movs	r2, #0
 80015aa:	9201      	str	r2, [sp, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	9200      	str	r2, [sp, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	21ff      	movs	r1, #255	@ 0xff
 80015b4:	f000 fa20 	bl	80019f8 <OW_Send>

	return (b == 1);
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <DT_RequestTemperatures>:

// sends command for all devices on the bus to perform a temperature conversion
void DT_RequestTemperatures(DallasTemperature_HandleTypeDef* dt)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	6078      	str	r0, [r7, #4]
	OW_Send(dt->ow, (uint8_t *) "\xcc\x44", 2, (uint8_t *) NULL, 0, OW_NO_READ);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	23ff      	movs	r3, #255	@ 0xff
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2300      	movs	r3, #0
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	2202      	movs	r2, #2
 80015e4:	490a      	ldr	r1, [pc, #40]	@ (8001610 <DT_RequestTemperatures+0x44>)
 80015e6:	f000 fa07 	bl	80019f8 <OW_Send>

	// ASYNC mode?
	if (!dt->waitForConversion)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7a5b      	ldrb	r3, [r3, #9]
 80015ee:	f083 0301 	eor.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d106      	bne.n	8001606 <DT_RequestTemperatures+0x3a>
		return;

	BlockTillConversionComplete(dt, dt->bitResolution);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7a1b      	ldrb	r3, [r3, #8]
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fc52 	bl	8000ea8 <BlockTillConversionComplete>
 8001604:	e000      	b.n	8001608 <DT_RequestTemperatures+0x3c>
		return;
 8001606:	bf00      	nop
}
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	080116b0 	.word	0x080116b0

08001614 <DT_MillisToWaitForConversion>:
	return DT_RequestTemperaturesByAddress(dt, deviceAddress);
}

// returns number of milliseconds to wait till conversion is complete (based on IC datasheet)
int16_t DT_MillisToWaitForConversion(uint8_t bitResolution)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	switch (bitResolution)
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b0b      	cmp	r3, #11
 8001622:	d00a      	beq.n	800163a <DT_MillisToWaitForConversion+0x26>
 8001624:	2b0b      	cmp	r3, #11
 8001626:	dc0b      	bgt.n	8001640 <DT_MillisToWaitForConversion+0x2c>
 8001628:	2b09      	cmp	r3, #9
 800162a:	d002      	beq.n	8001632 <DT_MillisToWaitForConversion+0x1e>
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d002      	beq.n	8001636 <DT_MillisToWaitForConversion+0x22>
 8001630:	e006      	b.n	8001640 <DT_MillisToWaitForConversion+0x2c>
	{
	case 9:
		return 94;
 8001632:	235e      	movs	r3, #94	@ 0x5e
 8001634:	e006      	b.n	8001644 <DT_MillisToWaitForConversion+0x30>
	case 10:
		return 188;
 8001636:	23bc      	movs	r3, #188	@ 0xbc
 8001638:	e004      	b.n	8001644 <DT_MillisToWaitForConversion+0x30>
	case 11:
		return 375;
 800163a:	f240 1377 	movw	r3, #375	@ 0x177
 800163e:	e001      	b.n	8001644 <DT_MillisToWaitForConversion+0x30>
	default:
		return 750;
 8001640:	f240 23ee 	movw	r3, #750	@ 0x2ee
	}
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DT_SaveScratchPad>:

// Sends command to one or more devices to save values from scratchpad to EEPROM
// If optional argument deviceAddress is omitted the command is send to all devices
// Returns true if no errors were encountered, false indicates failure
bool DT_SaveScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	uint8_t query[10]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800165a:	4a2f      	ldr	r2, [pc, #188]	@ (8001718 <DT_SaveScratchPad+0xc8>)
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	ca07      	ldmia	r2, {r0, r1, r2}
 8001662:	c303      	stmia	r3!, {r0, r1}
 8001664:	801a      	strh	r2, [r3, #0]

	if (OW_Reset(dt->ow) == 0)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f990 	bl	8001990 <OW_Reset>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <DT_SaveScratchPad+0x2a>
		return false;
 8001676:	2300      	movs	r3, #0
 8001678:	e04a      	b.n	8001710 <DT_SaveScratchPad+0xc0>

  if (deviceAddress == NULL)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d110      	bne.n	80016a2 <DT_SaveScratchPad+0x52>
  {
	  query[0] = 0xCC;
 8001680:	23cc      	movs	r3, #204	@ 0xcc
 8001682:	733b      	strb	r3, [r7, #12]
	  query[1] = COPYSCRATCH;
 8001684:	2348      	movs	r3, #72	@ 0x48
 8001686:	737b      	strb	r3, [r7, #13]
	  OW_Send(dt->ow, query, 2, NULL, 0, OW_NO_READ);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	f107 010c 	add.w	r1, r7, #12
 8001690:	23ff      	movs	r3, #255	@ 0xff
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2300      	movs	r3, #0
 800169a:	2202      	movs	r2, #2
 800169c:	f000 f9ac 	bl	80019f8 <OW_Send>
 80016a0:	e017      	b.n	80016d2 <DT_SaveScratchPad+0x82>
  }
  else
  {
	  query[0] = 0x55;
 80016a2:	2355      	movs	r3, #85	@ 0x55
 80016a4:	733b      	strb	r3, [r7, #12]
	  memcpy(&query[1], deviceAddress, 8);
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	3301      	adds	r3, #1
 80016ac:	2208      	movs	r2, #8
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00e f8ee 	bl	800f892 <memcpy>
	  query[9] = COPYSCRATCH;
 80016b6:	2348      	movs	r3, #72	@ 0x48
 80016b8:	757b      	strb	r3, [r7, #21]
	  OW_Send(dt->ow, query, 10, NULL, 0, OW_NO_READ);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f107 010c 	add.w	r1, r7, #12
 80016c2:	23ff      	movs	r3, #255	@ 0xff
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	220a      	movs	r2, #10
 80016ce:	f000 f993 	bl	80019f8 <OW_Send>
  }

  // Specification: NV Write Cycle Time is typically 2ms, max 10ms
  // Waiting 20ms to allow for sensors that take longer in practice
  if (!dt->parasite)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	799b      	ldrb	r3, [r3, #6]
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <DT_SaveScratchPad+0x98>
  {
    HAL_Delay(20);
 80016e0:	2014      	movs	r0, #20
 80016e2:	f002 f86f 	bl	80037c4 <HAL_Delay>
 80016e6:	e008      	b.n	80016fa <DT_SaveScratchPad+0xaa>
  }
  else
  {

	ActivateExternalPullup(dt);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fc1b 	bl	8000f24 <ActivateExternalPullup>
    HAL_Delay(20);
 80016ee:	2014      	movs	r0, #20
 80016f0:	f002 f868 	bl	80037c4 <HAL_Delay>
    DeactivateExternalPullup(dt);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fc29 	bl	8000f4c <DeactivateExternalPullup>
  }

  return OW_Reset(dt->ow) == 1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f946 	bl	8001990 <OW_Reset>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	bf0c      	ite	eq
 800170a:	2301      	moveq	r3, #1
 800170c:	2300      	movne	r3, #0
 800170e:	b2db      	uxtb	r3, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	080116c0 	.word	0x080116c0

0800171c <DT_GetTempCByIndex>:
  return dt->autoSaveScratchPad;
}

// Fetch temperature for device index
float DT_GetTempCByIndex(DallasTemperature_HandleTypeDef* dt, uint8_t deviceIndex)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
	CurrentDeviceAddress deviceAddress;

	if (!DT_GetAddress(dt, deviceAddress, deviceIndex))
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4619      	mov	r1, r3
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fd13 	bl	800115c <DT_GetAddress>
 8001736:	4603      	mov	r3, r0
 8001738:	f083 0301 	eor.w	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <DT_GetTempCByIndex+0x2c>
	{
		return DEVICE_DISCONNECTED_C;
 8001742:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8001764 <DT_GetTempCByIndex+0x48>
 8001746:	e007      	b.n	8001758 <DT_GetTempCByIndex+0x3c>
	}

	return DT_GetTempC(dt, (uint8_t*) deviceAddress);
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f860 	bl	8001814 <DT_GetTempC>
 8001754:	eef0 7a40 	vmov.f32	s15, s0
}
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	c2fe0000 	.word	0xc2fe0000

08001768 <DT_CalculateTemperature>:
	return DT_GetTempF(dt, (uint8_t*) deviceAddress);
}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DT_CalculateTemperature(const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11) | (((int16_t) scratchPad[TEMP_LSB]) << 3);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	02db      	lsls	r3, r3, #11
 800177a:	b21a      	sxth	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	81fb      	strh	r3, [r7, #14]
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b10      	cmp	r3, #16
 800178e:	d11a      	bne.n	80017c6 <DT_CalculateTemperature+0x5e>
	{
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 + (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7) / scratchPad[COUNT_PER_C]);
 8001790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	b29b      	uxth	r3, r3
 8001798:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800179c:	b29a      	uxth	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	3307      	adds	r3, #7
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3306      	adds	r3, #6
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	1acb      	subs	r3, r1, r3
 80017ae:	01db      	lsls	r3, r3, #7
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	3107      	adds	r1, #7
 80017b4:	7809      	ldrb	r1, [r1, #0]
 80017b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4413      	add	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b10      	subs	r3, #16
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	81fb      	strh	r3, [r7, #14]
	}

	return fpTemperature;
 80017c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <DT_GetTemp>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DT_GetTemp(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	461a      	mov	r2, r3
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fcec 	bl	80011c8 <DT_IsConnected_ScratchPad>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <DT_GetTemp+0x2e>
		return DT_CalculateTemperature(deviceAddress, scratchPad);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	6838      	ldr	r0, [r7, #0]
 80017fe:	f7ff ffb3 	bl	8001768 <DT_CalculateTemperature>
 8001802:	4603      	mov	r3, r0
 8001804:	e000      	b.n	8001808 <DT_GetTemp+0x30>
	return DEVICE_DISCONNECTED_RAW;
 8001806:	4b02      	ldr	r3, [pc, #8]	@ (8001810 <DT_GetTemp+0x38>)
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	ffffe480 	.word	0xffffe480

08001814 <DT_GetTempC>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DT_GetTempC(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	return DT_RawToCelsius(DT_GetTemp(dt, deviceAddress));
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffd9 	bl	80017d8 <DT_GetTemp>
 8001826:	4603      	mov	r3, r0
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f807 	bl	800183c <DT_RawToCelsius>
 800182e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001832:	eeb0 0a67 	vmov.f32	s0, s15
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <DT_RawToCelsius>:
	return (fahrenheit - 32) * 0.555555556;
}

// convert from raw to Celsius
float DT_RawToCelsius(int16_t raw)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
	if (raw <= DEVICE_DISCONNECTED_RAW)
 8001846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184a:	f513 5fdc 	cmn.w	r3, #7040	@ 0x1b80
 800184e:	dc02      	bgt.n	8001856 <DT_RawToCelsius+0x1a>
		return DEVICE_DISCONNECTED_C;
 8001850:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8001878 <DT_RawToCelsius+0x3c>
 8001854:	e009      	b.n	800186a <DT_RawToCelsius+0x2e>
	// C = RAW/128
	return (float) raw * 0.0078125;
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001862:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800187c <DT_RawToCelsius+0x40>
 8001866:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	c2fe0000 	.word	0xc2fe0000
 800187c:	3c000000 	.word	0x3c000000

08001880 <OW_UART_Init>:
#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t num_bits);
#endif

static HAL_StatusTypeDef OW_UART_Init(OneWire_HandleTypeDef* ow, uint32_t baudRate)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	UART_HandleTypeDef* HUARTx = ow->huart;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
//	GPIO_InitStruct.Pin = GPIO_PIN_10;
//	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
//	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HUARTx->Init.BaudRate = baudRate;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	605a      	str	r2, [r3, #4]
    HUARTx->Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
    HUARTx->Init.StopBits = UART_STOPBITS_1;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
    HUARTx->Init.Parity = UART_PARITY_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
    HUARTx->Init.Mode = UART_MODE_TX_RX;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
    HUARTx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
    HUARTx->Init.OverSampling = UART_OVERSAMPLING_16;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
	return HAL_HalfDuplex_Init(HUARTx);
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f008 f862 	bl	8009984 <HAL_HalfDuplex_Init>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <OW_ToBits>:

static void OW_ToBits(uint8_t owByte, uint8_t *owBits)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	6039      	str	r1, [r7, #0]
 80018d4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	e014      	b.n	8001906 <OW_ToBits+0x3c>
	{
		if (owByte & 0x01)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <OW_ToBits+0x24>
		{
			*owBits = OW_1;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	22ff      	movs	r2, #255	@ 0xff
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e002      	b.n	80018f4 <OW_ToBits+0x2a>
		}
		else
		{
			*owBits = OW_0;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
		}
		owBits++;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	603b      	str	r3, [r7, #0]
		owByte = owByte >> 1;
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	3301      	adds	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	2b07      	cmp	r3, #7
 800190a:	d9e7      	bls.n	80018dc <OW_ToBits+0x12>
	}
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <OW_ToByte>:

static uint8_t OW_ToByte(uint8_t *owBits)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	uint8_t owByte, i;
	owByte = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	73bb      	strb	r3, [r7, #14]
 800192a:	e010      	b.n	800194e <OW_ToByte+0x34>
	{
		owByte = owByte >> 1;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
		if (*owBits == OW_R_1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2bff      	cmp	r3, #255	@ 0xff
 8001938:	d103      	bne.n	8001942 <OW_ToByte+0x28>
		{
			owByte |= 0x80;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001940:	73fb      	strb	r3, [r7, #15]
		}
		owBits++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	3301      	adds	r3, #1
 800194c:	73bb      	strb	r3, [r7, #14]
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	2b07      	cmp	r3, #7
 8001952:	d9eb      	bls.n	800192c <OW_ToByte+0x12>
	}

	return owByte;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <OW_Begin>:
{
	return OW_Begin(ow, huart);
}

HAL_StatusTypeDef OW_Begin(OneWire_HandleTypeDef* ow, UART_HandleTypeDef* huart)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
	ow->huart = huart;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef status = OW_UART_Init(ow, 9600);
 8001972:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff82 	bl	8001880 <OW_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
#if ONEWIRE_SEARCH
	OW_ResetSearch(ow);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8bc 	bl	8001afe <OW_ResetSearch>
#endif
	return status;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <OW_Reset>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OW_Reset(OneWire_HandleTypeDef* ow)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	uint8_t owPresence = 0xf0;
 8001998:	23f0      	movs	r3, #240	@ 0xf0
 800199a:	73fb      	strb	r3, [r7, #15]

	OW_UART_Init(ow, 9600);
 800199c:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff6d 	bl	8001880 <OW_UART_Init>

	HAL_UART_Receive_DMA(ow->huart, &owPresence, 1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f107 010f 	add.w	r1, r7, #15
 80019ae:	2201      	movs	r2, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f008 f973 	bl	8009c9c <HAL_UART_Receive_DMA>
	//HAL_UART_Transmit(ow->huart, &owPresence, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(ow->huart, &owPresence, 1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f107 010f 	add.w	r1, r7, #15
 80019be:	2201      	movs	r2, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f008 f8fb 	bl	8009bbc <HAL_UART_Transmit_DMA>

	/*## Wait for the end of the transfer ###################################*/
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 80019c6:	e000      	b.n	80019ca <OW_Reset+0x3a>
	{
		__NOP();
 80019c8:	bf00      	nop
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f008 fc5a 	bl	800a288 <HAL_UART_GetState>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d1f6      	bne.n	80019c8 <OW_Reset+0x38>
	}

	OW_UART_Init(ow, 115200);
 80019da:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff4e 	bl	8001880 <OW_UART_Init>

	if (owPresence != 0xf0)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2bf0      	cmp	r3, #240	@ 0xf0
 80019e8:	d001      	beq.n	80019ee <OW_Reset+0x5e>
	{
		return OW_OK;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <OW_Reset+0x60>
	}

	return OW_NO_DEVICE;
 80019ee:	2303      	movs	r3, #3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <OW_Send>:
// dLen - the length of the read buffer. Read no more than this length
// readStart - which transmission character to start reading from (numbered from 0)
// you can specify OW_NO_READ, then you don't need to specify data and dLen
//-----------------------------------------------------------------------------
uint8_t OW_Send(OneWire_HandleTypeDef* ow, uint8_t *command, uint8_t cLen, uint8_t *data, uint8_t dLen, uint8_t readStart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71fb      	strb	r3, [r7, #7]
	if (OW_Reset(ow) == OW_NO_DEVICE)
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff ffc1 	bl	8001990 <OW_Reset>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d145      	bne.n	8001aa0 <OW_Send+0xa8>
	{
		return OW_NO_DEVICE;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e047      	b.n	8001aa8 <OW_Send+0xb0>
	}

	while (cLen > 0)
	{

		OW_ToBits(*command, ow->ROM_NO);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f7ff ff51 	bl	80018ca <OW_ToBits>
		command++;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
		cLen--;
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f008 f92c 	bl	8009c9c <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f008 f8b4 	bl	8009bbc <HAL_UART_Transmit_DMA>

		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001a54:	e000      	b.n	8001a58 <OW_Send+0x60>
		{
			__NOP();
 8001a56:	bf00      	nop
		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f008 fc13 	bl	800a288 <HAL_UART_GetState>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d1f6      	bne.n	8001a56 <OW_Send+0x5e>
		}

		if (readStart == 0 && dLen > 0)
 8001a68:	7f3b      	ldrb	r3, [r7, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d112      	bne.n	8001a94 <OW_Send+0x9c>
 8001a6e:	7e3b      	ldrb	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00f      	beq.n	8001a94 <OW_Send+0x9c>
		{
			*data = OW_ToByte(ow->ROM_NO);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3304      	adds	r3, #4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff4e 	bl	800191a <OW_ToByte>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	701a      	strb	r2, [r3, #0]
			data++;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	603b      	str	r3, [r7, #0]
			dLen--;
 8001a8c:	7e3b      	ldrb	r3, [r7, #24]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	763b      	strb	r3, [r7, #24]
 8001a92:	e005      	b.n	8001aa0 <OW_Send+0xa8>
		}
		else
		{
			if (readStart != OW_NO_READ)
 8001a94:	7f3b      	ldrb	r3, [r7, #28]
 8001a96:	2bff      	cmp	r3, #255	@ 0xff
 8001a98:	d002      	beq.n	8001aa0 <OW_Send+0xa8>
			{
				readStart--;
 8001a9a:	7f3b      	ldrb	r3, [r7, #28]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	773b      	strb	r3, [r7, #28]
	while (cLen > 0)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1b8      	bne.n	8001a18 <OW_Send+0x20>
			}
		}
	}

	return OW_OK;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <OW_SendBits>:

#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t numBits)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, numBits);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	b292      	uxth	r2, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f008 f8e7 	bl	8009c9c <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, numBits);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f008 f86e 	bl	8009bbc <HAL_UART_Transmit_DMA>

	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001ae0:	e000      	b.n	8001ae4 <OW_SendBits+0x34>
	{
		__NOP();
 8001ae2:	bf00      	nop
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f008 fbcd 	bl	800a288 <HAL_UART_GetState>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d1f6      	bne.n	8001ae2 <OW_SendBits+0x32>
	}
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <OW_ResetSearch>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OW_ResetSearch(OneWire_HandleTypeDef* ow)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  // reset the search state
  ow->LastDiscrepancy = 0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	731a      	strb	r2, [r3, #12]
  ow->LastDeviceFlag = false;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	739a      	strb	r2, [r3, #14]
  ow->LastFamilyDiscrepancy = 0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	735a      	strb	r2, [r3, #13]
  for(int i = 7; ; i--)
 8001b18:	2307      	movs	r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
  {
    ow->ROM_NO[i] = 0;
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    if ( i == 0) break;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <OW_ResetSearch+0x38>
  for(int i = 7; ; i--)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
    ow->ROM_NO[i] = 0;
 8001b34:	e7f2      	b.n	8001b1c <OW_ResetSearch+0x1e>
    if ( i == 0) break;
 8001b36:	bf00      	nop
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <OW_Search>:
   ow->LastFamilyDiscrepancy = 0;
   ow->LastDeviceFlag = false;
}

uint8_t OW_Search(OneWire_HandleTypeDef* ow, uint8_t *buf, uint8_t num)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	71fb      	strb	r3, [r7, #7]

	uint8_t found = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	77fb      	strb	r3, [r7, #31]
	uint8_t *lastDevice = NULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
	uint8_t *curDevice = buf;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	617b      	str	r3, [r7, #20]
	uint8_t numBit, lastCollision, currentCollision, currentSelection;

	lastCollision = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	74bb      	strb	r3, [r7, #18]

	while (found < num)
 8001b62:	e0bf      	b.n	8001ce4 <OW_Search+0x1a0>
	{
		numBit = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	74fb      	strb	r3, [r7, #19]
		currentCollision = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	747b      	strb	r3, [r7, #17]

		OW_Send(ow, (uint8_t*)"\xf0", 1, NULL, 0, OW_NO_READ);
 8001b6c:	23ff      	movs	r3, #255	@ 0xff
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2300      	movs	r3, #0
 8001b76:	2201      	movs	r2, #1
 8001b78:	495f      	ldr	r1, [pc, #380]	@ (8001cf8 <OW_Search+0x1b4>)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f7ff ff3c 	bl	80019f8 <OW_Send>

		for (numBit = 1; numBit <= 64; numBit++)
 8001b80:	2301      	movs	r3, #1
 8001b82:	74fb      	strb	r3, [r7, #19]
 8001b84:	e09b      	b.n	8001cbe <OW_Search+0x17a>
		{
			OW_ToBits(OW_READ_SLOT, ow->ROM_NO);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	20ff      	movs	r0, #255	@ 0xff
 8001b8e:	f7ff fe9c 	bl	80018ca <OW_ToBits>
			OW_SendBits(ow, 2);
 8001b92:	2102      	movs	r1, #2
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7ff ff8b 	bl	8001ab0 <OW_SendBits>

			if (ow->ROM_NO[0] == OW_R_1)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	791b      	ldrb	r3, [r3, #4]
 8001b9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ba0:	d108      	bne.n	8001bb4 <OW_Search+0x70>
			{
				if (ow->ROM_NO[1] == OW_R_1)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	795b      	ldrb	r3, [r3, #5]
 8001ba6:	2bff      	cmp	r3, #255	@ 0xff
 8001ba8:	d101      	bne.n	8001bae <OW_Search+0x6a>
				{
					return found;
 8001baa:	7ffb      	ldrb	r3, [r7, #31]
 8001bac:	e0a0      	b.n	8001cf0 <OW_Search+0x1ac>
				}
				else
				{
					currentSelection = 1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	743b      	strb	r3, [r7, #16]
 8001bb2:	e037      	b.n	8001c24 <OW_Search+0xe0>
				}
			}
			else
			{
				if (ow->ROM_NO[1] == OW_R_1)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	795b      	ldrb	r3, [r3, #5]
 8001bb8:	2bff      	cmp	r3, #255	@ 0xff
 8001bba:	d102      	bne.n	8001bc2 <OW_Search+0x7e>
				{
					currentSelection = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	743b      	strb	r3, [r7, #16]
 8001bc0:	e030      	b.n	8001c24 <OW_Search+0xe0>
				}
				else
				{
					if (numBit < lastCollision)
 8001bc2:	7cfa      	ldrb	r2, [r7, #19]
 8001bc4:	7cbb      	ldrb	r3, [r7, #18]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d21d      	bcs.n	8001c06 <OW_Search+0xc2>
					{
							if (lastDevice[(numBit - 1) >> 3] & 1 << ((numBit - 1) & 0x07))
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	10db      	asrs	r3, r3, #3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	7cfb      	ldrb	r3, [r7, #19]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	fa42 f303 	asr.w	r3, r2, r3
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <OW_Search+0xbc>
							{
							currentSelection = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	743b      	strb	r3, [r7, #16]

								if (currentCollision < numBit)
 8001bf2:	7c7a      	ldrb	r2, [r7, #17]
 8001bf4:	7cfb      	ldrb	r3, [r7, #19]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d214      	bcs.n	8001c24 <OW_Search+0xe0>
								{
										currentCollision = numBit;
 8001bfa:	7cfb      	ldrb	r3, [r7, #19]
 8001bfc:	747b      	strb	r3, [r7, #17]
 8001bfe:	e011      	b.n	8001c24 <OW_Search+0xe0>
								}
							}
							else
							{
								currentSelection = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	743b      	strb	r3, [r7, #16]
 8001c04:	e00e      	b.n	8001c24 <OW_Search+0xe0>
							}
					}
					else
					{
						if (numBit == lastCollision)
 8001c06:	7cfa      	ldrb	r2, [r7, #19]
 8001c08:	7cbb      	ldrb	r3, [r7, #18]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d102      	bne.n	8001c14 <OW_Search+0xd0>
						{
								currentSelection = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	743b      	strb	r3, [r7, #16]
 8001c12:	e007      	b.n	8001c24 <OW_Search+0xe0>
						}
						else
						{
							currentSelection = 1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	743b      	strb	r3, [r7, #16]

							if (currentCollision < numBit)
 8001c18:	7c7a      	ldrb	r2, [r7, #17]
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d201      	bcs.n	8001c24 <OW_Search+0xe0>
							{
									currentCollision = numBit;
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	747b      	strb	r3, [r7, #17]
						}
					}
				}
			}

			if (currentSelection == 1)
 8001c24:	7c3b      	ldrb	r3, [r7, #16]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d120      	bne.n	8001c6c <OW_Search+0x128>
			{
				curDevice[(numBit - 1) >> 3] |= 1 << ((numBit - 1) & 0x07);
 8001c2a:	7cfb      	ldrb	r3, [r7, #19]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	10db      	asrs	r3, r3, #3
 8001c30:	461a      	mov	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b25a      	sxtb	r2, r3
 8001c3a:	7cfb      	ldrb	r3, [r7, #19]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b25a      	sxtb	r2, r3
 8001c4e:	7cfb      	ldrb	r3, [r7, #19]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	10db      	asrs	r3, r3, #3
 8001c54:	4619      	mov	r1, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	440b      	add	r3, r1
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x01, ow->ROM_NO);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3304      	adds	r3, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff fe30 	bl	80018ca <OW_ToBits>
 8001c6a:	e021      	b.n	8001cb0 <OW_Search+0x16c>
			}
			else
			{
				curDevice[(numBit - 1) >> 3] &= ~(1 << ((numBit - 1) & 0x07));
 8001c6c:	7cfb      	ldrb	r3, [r7, #19]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	10db      	asrs	r3, r3, #3
 8001c72:	461a      	mov	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b25a      	sxtb	r2, r3
 8001c7c:	7cfb      	ldrb	r3, [r7, #19]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	4013      	ands	r3, r2
 8001c92:	b25a      	sxtb	r2, r3
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	10db      	asrs	r3, r3, #3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x00, ow->ROM_NO);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fe0d 	bl	80018ca <OW_ToBits>
			}

			OW_SendBits(ow, 1);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff fefc 	bl	8001ab0 <OW_SendBits>
		for (numBit = 1; numBit <= 64; numBit++)
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	74fb      	strb	r3, [r7, #19]
 8001cbe:	7cfb      	ldrb	r3, [r7, #19]
 8001cc0:	2b40      	cmp	r3, #64	@ 0x40
 8001cc2:	f67f af60 	bls.w	8001b86 <OW_Search+0x42>
		}

		found++;
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	77fb      	strb	r3, [r7, #31]
		lastDevice = curDevice;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	61bb      	str	r3, [r7, #24]
		curDevice += 8;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	617b      	str	r3, [r7, #20]
		if (currentCollision == 0)
 8001cd6:	7c7b      	ldrb	r3, [r7, #17]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <OW_Search+0x19c>
		{
			return found;
 8001cdc:	7ffb      	ldrb	r3, [r7, #31]
 8001cde:	e007      	b.n	8001cf0 <OW_Search+0x1ac>
		}

		lastCollision = currentCollision;
 8001ce0:	7c7b      	ldrb	r3, [r7, #17]
 8001ce2:	74bb      	strb	r3, [r7, #18]
	while (found < num)
 8001ce4:	7ffa      	ldrb	r2, [r7, #31]
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f4ff af3b 	bcc.w	8001b64 <OW_Search+0x20>
	}

        return found;
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	080116cc 	.word	0x080116cc

08001cfc <OW_Crc8>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OW_Crc8(const uint8_t *addr, uint8_t len)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]

	while (len--)
 8001d0c:	e015      	b.n	8001d3a <OW_Crc8+0x3e>
	{
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	4053      	eors	r3, r2
 8001d1a:	73fb      	strb	r3, [r7, #15]
		crc = dscrc2x16_table[crc & 0x0f] ^ dscrc2x16_table[16 + ((crc >> 4) & 0x0f)];
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	4a0c      	ldr	r2, [pc, #48]	@ (8001d54 <OW_Crc8+0x58>)
 8001d24:	5cd2      	ldrb	r2, [r2, r3]
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	3310      	adds	r3, #16
 8001d32:	4908      	ldr	r1, [pc, #32]	@ (8001d54 <OW_Crc8+0x58>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	4053      	eors	r3, r2
 8001d38:	73fb      	strb	r3, [r7, #15]
	while (len--)
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	70fa      	strb	r2, [r7, #3]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e4      	bne.n	8001d0e <OW_Crc8+0x12>
	}

	return crc;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	08011c0c 	.word	0x08011c0c

08001d58 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fbd0 	bl	8002512 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fbeb 	bl	8002552 <SX1278_hw_SPIReadByte>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fb88 	bl	800249c <SX1278_hw_SetNSS>
	return tmp;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
 8001da2:	4613      	mov	r3, r2
 8001da4:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fb75 	bl	800249c <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f000 fba6 	bl	8002512 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	78ba      	ldrb	r2, [r7, #2]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fb9f 	bl	8002512 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fb5e 	bl	800249c <SX1278_hw_SetNSS>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	461a      	mov	r2, r3
 8001df4:	460b      	mov	r3, r1
 8001df6:	72fb      	strb	r3, [r7, #11]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8001dfc:	7abb      	ldrb	r3, [r7, #10]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d927      	bls.n	8001e52 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fb47 	bl	800249c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	7afa      	ldrb	r2, [r7, #11]
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fb7b 	bl	8002512 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	75fb      	strb	r3, [r7, #23]
 8001e20:	e00c      	b.n	8001e3c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6819      	ldr	r1, [r3, #0]
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	18d4      	adds	r4, r2, r3
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	f000 fb90 	bl	8002552 <SX1278_hw_SPIReadByte>
 8001e32:	4603      	mov	r3, r0
 8001e34:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	7dfa      	ldrb	r2, [r7, #23]
 8001e3e:	7abb      	ldrb	r3, [r7, #10]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3ee      	bcc.n	8001e22 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fb26 	bl	800249c <SX1278_hw_SetNSS>
 8001e50:	e000      	b.n	8001e54 <SX1278_SPIBurstRead+0x6c>
		return;
 8001e52:	bf00      	nop
	}
}
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}

08001e5a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	460b      	mov	r3, r1
 8001e68:	72fb      	strb	r3, [r7, #11]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001e6e:	7abb      	ldrb	r3, [r7, #10]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d929      	bls.n	8001ec8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fb0e 	bl	800249c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f000 fb3f 	bl	8002512 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001e94:	2300      	movs	r3, #0
 8001e96:	75fb      	strb	r3, [r7, #23]
 8001e98:	e00b      	b.n	8001eb2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f000 fb33 	bl	8002512 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
 8001eb2:	7dfa      	ldrb	r2, [r7, #23]
 8001eb4:	7abb      	ldrb	r3, [r7, #10]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d3ef      	bcc.n	8001e9a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 faeb 	bl	800249c <SX1278_hw_SetNSS>
 8001ec6:	e000      	b.n	8001eca <SX1278_SPIBurstWrite+0x70>
		return;
 8001ec8:	bf00      	nop
	}
}
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f90d 	bl	80020f8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001ede:	200f      	movs	r0, #15
 8001ee0:	f000 fb5d 	bl	800259e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f917 	bl	8002118 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ef0:	f04f 0000 	mov.w	r0, #0
 8001ef4:	f04f 0100 	mov.w	r1, #0
 8001ef8:	04d9      	lsls	r1, r3, #19
 8001efa:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001efe:	04d0      	lsls	r0, r2, #19
 8001f00:	4a6f      	ldr	r2, [pc, #444]	@ (80020c0 <SX1278_config+0x1f0>)
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f7fe fe57 	bl	8000bb8 <__aeabi_uldivmod>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8001f12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	0c02      	lsrs	r2, r0, #16
 8001f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f24:	0c0b      	lsrs	r3, r1, #16
 8001f26:	b2d3      	uxtb	r3, r2
 8001f28:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8001f2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	0a02      	lsrs	r2, r0, #8
 8001f38:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f3c:	0a0b      	lsrs	r3, r1, #8
 8001f3e:	b2d3      	uxtb	r3, r2
 8001f40:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8001f42:	7c3b      	ldrb	r3, [r7, #16]
 8001f44:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8001f46:	f107 020c 	add.w	r2, r7, #12
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	2106      	movs	r1, #6
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff83 	bl	8001e5a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8001f54:	2234      	movs	r2, #52	@ 0x34
 8001f56:	2139      	movs	r1, #57	@ 0x39
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff1c 	bl	8001d96 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7c1b      	ldrb	r3, [r3, #16]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b57      	ldr	r3, [pc, #348]	@ (80020c4 <SX1278_config+0x1f4>)
 8001f66:	5c9b      	ldrb	r3, [r3, r2]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2109      	movs	r1, #9
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff12 	bl	8001d96 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001f72:	220b      	movs	r2, #11
 8001f74:	210b      	movs	r1, #11
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ff0d 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001f7c:	2223      	movs	r2, #35	@ 0x23
 8001f7e:	210c      	movs	r1, #12
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff08 	bl	8001d96 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7c5b      	ldrb	r3, [r3, #17]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <SX1278_config+0x1f8>)
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d147      	bne.n	8002024 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7c9b      	ldrb	r3, [r3, #18]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80020cc <SX1278_config+0x1fc>)
 8001f9c:	5c9b      	ldrb	r3, [r3, r2]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7cdb      	ldrb	r3, [r3, #19]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4b49      	ldr	r3, [pc, #292]	@ (80020d0 <SX1278_config+0x200>)
 8001faa:	5c5b      	ldrb	r3, [r3, r1]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	211d      	movs	r1, #29
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff feea 	bl	8001d96 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7c5b      	ldrb	r3, [r3, #17]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <SX1278_config+0x1f8>)
 8001fca:	5c9b      	ldrb	r3, [r3, r2]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7d1b      	ldrb	r3, [r3, #20]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80020d4 <SX1278_config+0x204>)
 8001fd8:	5c5b      	ldrb	r3, [r3, r1]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001fe2:	3303      	adds	r3, #3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	211e      	movs	r1, #30
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fed3 	bl	8001d96 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8001ff0:	2131      	movs	r1, #49	@ 0x31
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff feb0 	bl	8001d58 <SX1278_SPIRead>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	f023 0307 	bic.w	r3, r3, #7
 8002002:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	f043 0305 	orr.w	r3, r3, #5
 800200a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	461a      	mov	r2, r3
 8002010:	2131      	movs	r1, #49	@ 0x31
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff febf 	bl	8001d96 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8002018:	220c      	movs	r2, #12
 800201a:	2137      	movs	r1, #55	@ 0x37
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff feba 	bl	8001d96 <SX1278_SPIWrite>
 8002022:	e029      	b.n	8002078 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7c9b      	ldrb	r3, [r3, #18]
 8002028:	461a      	mov	r2, r3
 800202a:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <SX1278_config+0x1fc>)
 800202c:	5c9b      	ldrb	r3, [r3, r2]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7cdb      	ldrb	r3, [r3, #19]
 8002036:	4619      	mov	r1, r3
 8002038:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <SX1278_config+0x200>)
 800203a:	5c5b      	ldrb	r3, [r3, r1]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002040:	4413      	add	r3, r2
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	211d      	movs	r1, #29
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fea4 	bl	8001d96 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7c5b      	ldrb	r3, [r3, #17]
 8002052:	461a      	mov	r2, r3
 8002054:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <SX1278_config+0x1f8>)
 8002056:	5c9b      	ldrb	r3, [r3, r2]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7d1b      	ldrb	r3, [r3, #20]
 8002060:	4619      	mov	r1, r3
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <SX1278_config+0x204>)
 8002064:	5c5b      	ldrb	r3, [r3, r1]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800206a:	4413      	add	r3, r2
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	211e      	movs	r1, #30
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fe8f 	bl	8001d96 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8002078:	2204      	movs	r2, #4
 800207a:	2126      	movs	r1, #38	@ 0x26
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fe8a 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8002082:	2208      	movs	r2, #8
 8002084:	211f      	movs	r1, #31
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fe85 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800208c:	2200      	movs	r2, #0
 800208e:	2120      	movs	r1, #32
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fe80 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8002096:	2208      	movs	r2, #8
 8002098:	2121      	movs	r1, #33	@ 0x21
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fe7b 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80020a0:	2201      	movs	r2, #1
 80020a2:	2141      	movs	r1, #65	@ 0x41
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fe76 	bl	8001d96 <SX1278_SPIWrite>
	module->readBytes = 0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f810 	bl	80020d8 <SX1278_standby>
}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	01e84800 	.word	0x01e84800
 80020c4:	08011c2c 	.word	0x08011c2c
 80020c8:	08011c30 	.word	0x08011c30
 80020cc:	08011c38 	.word	0x08011c38
 80020d0:	08011c44 	.word	0x08011c44
 80020d4:	08011c48 	.word	0x08011c48

080020d8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80020e0:	2209      	movs	r2, #9
 80020e2:	2101      	movs	r1, #1
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fe56 	bl	8001d96 <SX1278_SPIWrite>
	module->status = STANDBY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	759a      	strb	r2, [r3, #22]
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002100:	2208      	movs	r2, #8
 8002102:	2101      	movs	r1, #1
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fe46 	bl	8001d96 <SX1278_SPIWrite>
	module->status = SLEEP;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	759a      	strb	r2, [r3, #22]
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8002120:	2288      	movs	r2, #136	@ 0x88
 8002122:	2101      	movs	r1, #1
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fe36 	bl	8001d96 <SX1278_SPIWrite>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800213a:	22ff      	movs	r2, #255	@ 0xff
 800213c:	2112      	movs	r1, #18
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fe29 	bl	8001d96 <SX1278_SPIWrite>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	460b      	mov	r3, r1
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	7afa      	ldrb	r2, [r7, #11]
 800215e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff feb5 	bl	8001ed0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8002166:	2284      	movs	r2, #132	@ 0x84
 8002168:	214d      	movs	r1, #77	@ 0x4d
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fe13 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8002170:	22ff      	movs	r2, #255	@ 0xff
 8002172:	2124      	movs	r1, #36	@ 0x24
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff fe0e 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800217a:	2201      	movs	r2, #1
 800217c:	2140      	movs	r1, #64	@ 0x40
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fe09 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8002184:	223f      	movs	r2, #63	@ 0x3f
 8002186:	2111      	movs	r1, #17
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff fe04 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7ff ffcf 	bl	8002132 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	461a      	mov	r2, r3
 8002198:	2122      	movs	r1, #34	@ 0x22
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff fdfb 	bl	8001d96 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80021a0:	210f      	movs	r1, #15
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff fdd8 	bl	8001d58 <SX1278_SPIRead>
 80021a8:	4603      	mov	r3, r0
 80021aa:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	461a      	mov	r2, r3
 80021b0:	210d      	movs	r1, #13
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7ff fdef 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80021b8:	228d      	movs	r2, #141	@ 0x8d
 80021ba:	2101      	movs	r1, #1
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f7ff fdea 	bl	8001d96 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80021ca:	2118      	movs	r1, #24
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fdc3 	bl	8001d58 <SX1278_SPIRead>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d104      	bne.n	80021e6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2203      	movs	r2, #3
 80021e0:	759a      	strb	r2, [r3, #22]
			return 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e013      	b.n	800220e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f967 	bl	80024ca <SX1278_hw_Reset>
			SX1278_config(module);
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f7ff fe67 	bl	8001ed0 <SX1278_config>
			return 0;
 8002202:	2300      	movs	r3, #0
 8002204:	e003      	b.n	800220e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 f9c9 	bl	800259e <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800220c:	e7dd      	b.n	80021ca <SX1278_LoRaEntryRx+0x7e>
	}
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f9c6 	bl	80025b4 <SX1278_hw_GetDIO0>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d030      	beq.n	8002290 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3317      	adds	r3, #23
 8002232:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f00d fa9b 	bl	800f774 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800223e:	2110      	movs	r1, #16
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff fd89 	bl	8001d58 <SX1278_SPIRead>
 8002246:	4603      	mov	r3, r0
 8002248:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	461a      	mov	r2, r3
 800224e:	210d      	movs	r1, #13
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fda0 	bl	8001d96 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7c5b      	ldrb	r3, [r3, #17]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7d5b      	ldrb	r3, [r3, #21]
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e005      	b.n	8002272 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8002266:	2113      	movs	r1, #19
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fd75 	bl	8001d58 <SX1278_SPIRead>
 800226e:	4603      	mov	r3, r0
 8002270:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f103 0217 	add.w	r2, r3, #23
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	2100      	movs	r1, #0
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fdb3 	bl	8001de8 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff51 	bl	8002132 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	460b      	mov	r3, r1
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	7afa      	ldrb	r2, [r7, #11]
 80022b0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff fe0c 	bl	8001ed0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80022b8:	2287      	movs	r2, #135	@ 0x87
 80022ba:	214d      	movs	r1, #77	@ 0x4d
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff fd6a 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80022c2:	2200      	movs	r2, #0
 80022c4:	2124      	movs	r1, #36	@ 0x24
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff fd65 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80022cc:	2241      	movs	r2, #65	@ 0x41
 80022ce:	2140      	movs	r1, #64	@ 0x40
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff fd60 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7ff ff2b 	bl	8002132 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80022dc:	22f7      	movs	r2, #247	@ 0xf7
 80022de:	2111      	movs	r1, #17
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff fd58 	bl	8001d96 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80022e6:	7afb      	ldrb	r3, [r7, #11]
 80022e8:	461a      	mov	r2, r3
 80022ea:	2122      	movs	r1, #34	@ 0x22
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fd52 	bl	8001d96 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80022f2:	210e      	movs	r1, #14
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff fd2f 	bl	8001d58 <SX1278_SPIRead>
 80022fa:	4603      	mov	r3, r0
 80022fc:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	461a      	mov	r2, r3
 8002302:	210d      	movs	r1, #13
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fd46 	bl	8001d96 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800230a:	2122      	movs	r1, #34	@ 0x22
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fd23 	bl	8001d58 <SX1278_SPIRead>
 8002312:	4603      	mov	r3, r0
 8002314:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8002316:	7dba      	ldrb	r2, [r7, #22]
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	429a      	cmp	r2, r3
 800231c:	d104      	bne.n	8002328 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2202      	movs	r2, #2
 8002322:	759a      	strb	r2, [r3, #22]
			return 1;
 8002324:	2301      	movs	r3, #1
 8002326:	e00e      	b.n	8002346 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ea      	bne.n	800230a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f8c6 	bl	80024ca <SX1278_hw_Reset>
			SX1278_config(module);
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff fdc6 	bl	8001ed0 <SX1278_config>
			return 0;
 8002344:	2300      	movs	r3, #0
		}
	}
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	2100      	movs	r1, #0
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff fd78 	bl	8001e5a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800236a:	228b      	movs	r2, #139	@ 0x8b
 800236c:	2101      	movs	r1, #1
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff fd11 	bl	8001d96 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f91b 	bl	80025b4 <SX1278_hw_GetDIO0>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8002384:	2112      	movs	r1, #18
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff fce6 	bl	8001d58 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fed0 	bl	8002132 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff fea0 	bl	80020d8 <SX1278_standby>
			return 1;
 8002398:	2301      	movs	r3, #1
 800239a:	e013      	b.n	80023c4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	3b01      	subs	r3, #1
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f88c 	bl	80024ca <SX1278_hw_Reset>
			SX1278_config(module);
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff fd8c 	bl	8001ed0 <SX1278_config>
			return 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e003      	b.n	80023c4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80023bc:	2001      	movs	r0, #1
 80023be:	f000 f8ee 	bl	800259e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80023c2:	e7d7      	b.n	8002374 <SX1278_LoRaTxPacket+0x26>
	}
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f848 	bl	8002472 <SX1278_hw_init>
	module->frequency = frequency;
 80023e2:	68f9      	ldr	r1, [r7, #12]
 80023e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	7e3a      	ldrb	r2, [r7, #24]
 80023f0:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	7f3a      	ldrb	r2, [r7, #28]
 80023f6:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023fe:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002406:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800240e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002416:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7ff fd59 	bl	8001ed0 <SX1278_config>
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	4613      	mov	r3, r2
 8002432:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	429a      	cmp	r2, r3
 800243e:	d003      	beq.n	8002448 <SX1278_read+0x22>
		length = module->readBytes;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8002446:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3317      	adds	r3, #23
 800244c:	79fa      	ldrb	r2, [r7, #7]
 800244e:	4619      	mov	r1, r3
 8002450:	68b8      	ldr	r0, [r7, #8]
 8002452:	f00d fa1e 	bl	800f892 <memcpy>
	rxBuf[length] = '\0';
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	4413      	add	r3, r2
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8002468:	79fb      	ldrb	r3, [r7, #7]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800247a:	2101      	movs	r1, #1
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f80d 	bl	800249c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6858      	ldr	r0, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	2201      	movs	r2, #1
 800248e:	4619      	mov	r1, r3
 8002490:	f002 fb30 	bl	8004af4 <HAL_GPIO_WritePin>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6958      	ldr	r0, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	b299      	uxth	r1, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	f002 fb19 	bl	8004af4 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80024d2:	2101      	movs	r1, #1
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffe1 	bl	800249c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6858      	ldr	r0, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	4619      	mov	r1, r3
 80024e8:	f002 fb04 	bl	8004af4 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 f856 	bl	800259e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6858      	ldr	r0, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2201      	movs	r2, #1
 80024fe:	4619      	mov	r1, r3
 8002500:	f002 faf8 	bl	8004af4 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8002504:	2064      	movs	r0, #100	@ 0x64
 8002506:	f000 f84a 	bl	800259e <SX1278_hw_DelayMs>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800251e:	2100      	movs	r1, #0
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ffbb 	bl	800249c <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6998      	ldr	r0, [r3, #24]
 800252a:	1cf9      	adds	r1, r7, #3
 800252c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002530:	2201      	movs	r2, #1
 8002532:	f006 fd79 	bl	8009028 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002536:	bf00      	nop
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4618      	mov	r0, r3
 800253e:	f007 f87d 	bl	800963c <HAL_SPI_GetState>
 8002542:	4603      	mov	r3, r0
 8002544:	2b01      	cmp	r3, #1
 8002546:	d1f7      	bne.n	8002538 <SX1278_hw_SPICommand+0x26>
		;
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af02      	add	r7, sp, #8
 8002558:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800255e:	2300      	movs	r3, #0
 8002560:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8002562:	2100      	movs	r1, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff99 	bl	800249c <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6998      	ldr	r0, [r3, #24]
 800256e:	f107 020e 	add.w	r2, r7, #14
 8002572:	f107 010f 	add.w	r1, r7, #15
 8002576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2301      	movs	r3, #1
 800257e:	f006 fea7 	bl	80092d0 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002582:	bf00      	nop
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4618      	mov	r0, r3
 800258a:	f007 f857 	bl	800963c <HAL_SPI_GetState>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d1f7      	bne.n	8002584 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8002594:	7bbb      	ldrb	r3, [r7, #14]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f001 f90c 	bl	80037c4 <HAL_Delay>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f002 fa73 	bl	8004ab4 <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <MX_DMA_Init+0x4c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002630 <MX_DMA_Init+0x4c>)
 80025f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <MX_DMA_Init+0x4c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2011      	movs	r0, #17
 800260c:	f001 f9ee 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002610:	2011      	movs	r0, #17
 8002612:	f001 fa17 	bl	8003a44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	202f      	movs	r0, #47	@ 0x2f
 800261c:	f001 f9e6 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002620:	202f      	movs	r0, #47	@ 0x2f
 8002622:	f001 fa0f 	bl	8003a44 <HAL_NVIC_EnableIRQ>

}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	@ 0x30
 8002638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	4b81      	ldr	r3, [pc, #516]	@ (8002854 <MX_GPIO_Init+0x220>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a80      	ldr	r2, [pc, #512]	@ (8002854 <MX_GPIO_Init+0x220>)
 8002654:	f043 0310 	orr.w	r3, r3, #16
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b7e      	ldr	r3, [pc, #504]	@ (8002854 <MX_GPIO_Init+0x220>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	4b7a      	ldr	r3, [pc, #488]	@ (8002854 <MX_GPIO_Init+0x220>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a79      	ldr	r2, [pc, #484]	@ (8002854 <MX_GPIO_Init+0x220>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b77      	ldr	r3, [pc, #476]	@ (8002854 <MX_GPIO_Init+0x220>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b73      	ldr	r3, [pc, #460]	@ (8002854 <MX_GPIO_Init+0x220>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	4a72      	ldr	r2, [pc, #456]	@ (8002854 <MX_GPIO_Init+0x220>)
 800268c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002690:	6313      	str	r3, [r2, #48]	@ 0x30
 8002692:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <MX_GPIO_Init+0x220>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a6b      	ldr	r2, [pc, #428]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b69      	ldr	r3, [pc, #420]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b65      	ldr	r3, [pc, #404]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a64      	ldr	r2, [pc, #400]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b5e      	ldr	r3, [pc, #376]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a5d      	ldr	r2, [pc, #372]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002854 <MX_GPIO_Init+0x220>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2108      	movs	r1, #8
 80026f6:	4858      	ldr	r0, [pc, #352]	@ (8002858 <MX_GPIO_Init+0x224>)
 80026f8:	f002 f9fc 	bl	8004af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80026fc:	2201      	movs	r2, #1
 80026fe:	2101      	movs	r1, #1
 8002700:	4856      	ldr	r0, [pc, #344]	@ (800285c <MX_GPIO_Init+0x228>)
 8002702:	f002 f9f7 	bl	8004af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8002706:	2200      	movs	r2, #0
 8002708:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800270c:	4854      	ldr	r0, [pc, #336]	@ (8002860 <MX_GPIO_Init+0x22c>)
 800270e:	f002 f9f1 	bl	8004af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002712:	2200      	movs	r2, #0
 8002714:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002718:	4852      	ldr	r0, [pc, #328]	@ (8002864 <MX_GPIO_Init+0x230>)
 800271a:	f002 f9eb 	bl	8004af4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800271e:	2304      	movs	r3, #4
 8002720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800272a:	f107 031c 	add.w	r3, r7, #28
 800272e:	4619      	mov	r1, r3
 8002730:	4849      	ldr	r0, [pc, #292]	@ (8002858 <MX_GPIO_Init+0x224>)
 8002732:	f001 ff27 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002736:	2308      	movs	r3, #8
 8002738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273a:	2301      	movs	r3, #1
 800273c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4619      	mov	r1, r3
 800274c:	4842      	ldr	r0, [pc, #264]	@ (8002858 <MX_GPIO_Init+0x224>)
 800274e:	f001 ff19 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8002752:	2330      	movs	r3, #48	@ 0x30
 8002754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002756:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800275a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	4619      	mov	r1, r3
 8002766:	483c      	ldr	r0, [pc, #240]	@ (8002858 <MX_GPIO_Init+0x224>)
 8002768:	f001 ff0c 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 800276c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	4836      	ldr	r0, [pc, #216]	@ (800285c <MX_GPIO_Init+0x228>)
 8002782:	f001 feff 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002786:	2301      	movs	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	4619      	mov	r1, r3
 800279c:	482f      	ldr	r0, [pc, #188]	@ (800285c <MX_GPIO_Init+0x228>)
 800279e:	f001 fef1 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80027aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	482c      	ldr	r0, [pc, #176]	@ (8002868 <MX_GPIO_Init+0x234>)
 80027b8:	f001 fee4 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80027bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c2:	2301      	movs	r3, #1
 80027c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	4822      	ldr	r0, [pc, #136]	@ (8002860 <MX_GPIO_Init+0x22c>)
 80027d6:	f001 fed5 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80027da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	481c      	ldr	r0, [pc, #112]	@ (8002860 <MX_GPIO_Init+0x22c>)
 80027f0:	f001 fec8 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80027f4:	2301      	movs	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	4619      	mov	r1, r3
 8002806:	4818      	ldr	r0, [pc, #96]	@ (8002868 <MX_GPIO_Init+0x234>)
 8002808:	f001 febc 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800280c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002810:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002812:	2301      	movs	r3, #1
 8002814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	480f      	ldr	r0, [pc, #60]	@ (8002864 <MX_GPIO_Init+0x230>)
 8002826:	f001 fead 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800282a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800282e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800283c:	2306      	movs	r3, #6
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	4805      	ldr	r0, [pc, #20]	@ (800285c <MX_GPIO_Init+0x228>)
 8002848:	f001 fe9c 	bl	8004584 <HAL_GPIO_Init>

}
 800284c:	bf00      	nop
 800284e:	3730      	adds	r7, #48	@ 0x30
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	40021000 	.word	0x40021000
 800285c:	40020800 	.word	0x40020800
 8002860:	40020400 	.word	0x40020400
 8002864:	40020c00 	.word	0x40020c00
 8002868:	40020000 	.word	0x40020000

0800286c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002870:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <MX_I2C1_Init+0x50>)
 8002872:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <MX_I2C1_Init+0x54>)
 8002874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002876:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <MX_I2C1_Init+0x50>)
 8002878:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <MX_I2C1_Init+0x58>)
 800287a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800287c:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <MX_I2C1_Init+0x50>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <MX_I2C1_Init+0x50>)
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <MX_I2C1_Init+0x50>)
 800288a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800288e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002890:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <MX_I2C1_Init+0x50>)
 8002892:	2200      	movs	r2, #0
 8002894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <MX_I2C1_Init+0x50>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800289c:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <MX_I2C1_Init+0x50>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <MX_I2C1_Init+0x50>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028a8:	4804      	ldr	r0, [pc, #16]	@ (80028bc <MX_I2C1_Init+0x50>)
 80028aa:	f004 fa8f 	bl	8006dcc <HAL_I2C_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028b4:	f000 fbd0 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000210 	.word	0x20000210
 80028c0:	40005400 	.word	0x40005400
 80028c4:	000186a0 	.word	0x000186a0

080028c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_I2C_MspInit+0x84>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d12c      	bne.n	8002944 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002906:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290c:	2312      	movs	r3, #18
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002910:	2301      	movs	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002918:	2304      	movs	r3, #4
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	480c      	ldr	r0, [pc, #48]	@ (8002954 <HAL_I2C_MspInit+0x8c>)
 8002924:	f001 fe2e 	bl	8004584 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a07      	ldr	r2, [pc, #28]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 8002932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
 8002938:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002944:	bf00      	nop
 8002946:	3728      	adds	r7, #40	@ 0x28
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40005400 	.word	0x40005400
 8002950:	40023800 	.word	0x40023800
 8002954:	40020400 	.word	0x40020400

08002958 <MX_I2S2_Init>:

I2S_HandleTypeDef hi2s2;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800295c:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <MX_I2S2_Init+0x50>)
 800295e:	4a13      	ldr	r2, [pc, #76]	@ (80029ac <MX_I2S2_Init+0x54>)
 8002960:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <MX_I2S2_Init+0x50>)
 8002964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002968:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <MX_I2S2_Init+0x50>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002970:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <MX_I2S2_Init+0x50>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002976:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <MX_I2S2_Init+0x50>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800297c:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <MX_I2S2_Init+0x50>)
 800297e:	4a0c      	ldr	r2, [pc, #48]	@ (80029b0 <MX_I2S2_Init+0x58>)
 8002980:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002982:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <MX_I2S2_Init+0x50>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002988:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <MX_I2S2_Init+0x50>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <MX_I2S2_Init+0x50>)
 8002990:	2201      	movs	r2, #1
 8002992:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002994:	4804      	ldr	r0, [pc, #16]	@ (80029a8 <MX_I2S2_Init+0x50>)
 8002996:	f004 fbe1 	bl	800715c <HAL_I2S_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80029a0:	f000 fb5a 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000264 	.word	0x20000264
 80029ac:	40003800 	.word	0x40003800
 80029b0:	00017700 	.word	0x00017700

080029b4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b090      	sub	sp, #64	@ 0x40
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a3a      	ldr	r2, [pc, #232]	@ (8002acc <HAL_I2S_MspInit+0x118>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d16c      	bne.n	8002ac2 <HAL_I2S_MspInit+0x10e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80029e8:	2301      	movs	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80029ec:	23c8      	movs	r3, #200	@ 0xc8
 80029ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80029f0:	2305      	movs	r3, #5
 80029f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4618      	mov	r0, r3
 80029fe:	f005 feff 	bl	8008800 <HAL_RCCEx_PeriphCLKConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8002a08:	f000 fb26 	bl	8003058 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	4a2e      	ldr	r2, [pc, #184]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a38:	4b25      	ldr	r3, [pc, #148]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	4a20      	ldr	r2, [pc, #128]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <HAL_I2S_MspInit+0x11c>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a60:	2304      	movs	r3, #4
 8002a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8002a70:	2306      	movs	r3, #6
 8002a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4816      	ldr	r0, [pc, #88]	@ (8002ad4 <HAL_I2S_MspInit+0x120>)
 8002a7c:	f001 fd82 	bl	8004584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002a80:	2308      	movs	r3, #8
 8002a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a90:	2305      	movs	r3, #5
 8002a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	480e      	ldr	r0, [pc, #56]	@ (8002ad4 <HAL_I2S_MspInit+0x120>)
 8002a9c:	f001 fd72 	bl	8004584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8002aa0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ab2:	2305      	movs	r3, #5
 8002ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aba:	4619      	mov	r1, r3
 8002abc:	4806      	ldr	r0, [pc, #24]	@ (8002ad8 <HAL_I2S_MspInit+0x124>)
 8002abe:	f001 fd61 	bl	8004584 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3740      	adds	r7, #64	@ 0x40
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40003800 	.word	0x40003800
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020800 	.word	0x40020800
 8002ad8:	40020400 	.word	0x40020400

08002adc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	4804      	ldr	r0, [pc, #16]	@ (8002b04 <_write+0x28>)
 8002af4:	f006 ffd6 	bl	8009aa4 <HAL_UART_Transmit>
	return len;
 8002af8:	687b      	ldr	r3, [r7, #4]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000324 	.word	0x20000324

08002b08 <printAddress>:
void printAddress(CurrentDeviceAddress deviceAddress)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  for (uint8_t i = 0; i < 8; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e00a      	b.n	8002b2c <printAddress+0x24>
  {
	  printf("0x%02X ", deviceAddress[i]);
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4806      	ldr	r0, [pc, #24]	@ (8002b3c <printAddress+0x34>)
 8002b22:	f00c fcbf 	bl	800f4a4 <iprintf>
  for (uint8_t i = 0; i < 8; i++)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b07      	cmp	r3, #7
 8002b30:	d9f1      	bls.n	8002b16 <printAddress+0xe>
  }
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	080116d0 	.word	0x080116d0

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	f5ad 7d61 	sub.w	sp, sp, #900	@ 0x384
 8002b46:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b48:	f000 fdca 	bl	80036e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b4c:	f000 fa1a 	bl	8002f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b50:	f7ff fd70 	bl	8002634 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b54:	f7ff fd46 	bl	80025e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b58:	f7ff fe88 	bl	800286c <MX_I2C1_Init>
  MX_I2S2_Init();
 8002b5c:	f7ff fefc 	bl	8002958 <MX_I2S2_Init>
  MX_SPI1_Init();
 8002b60:	f000 fa8c 	bl	800307c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8002b64:	f00b fbca 	bl	800e2fc <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8002b68:	f000 fc50 	bl	800340c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b6c:	f000 fc78 	bl	8003460 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t uartbuf[] = {"hellow world"};
 8002b70:	4bc5      	ldr	r3, [pc, #788]	@ (8002e88 <main+0x348>)
 8002b72:	f507 744f 	add.w	r4, r7, #828	@ 0x33c
 8002b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b78:	c407      	stmia	r4!, {r0, r1, r2}
 8002b7a:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1,uartbuf,sizeof(uartbuf),0xFFFF);
 8002b7c:	f507 714f 	add.w	r1, r7, #828	@ 0x33c
 8002b80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b84:	220d      	movs	r2, #13
 8002b86:	48c1      	ldr	r0, [pc, #772]	@ (8002e8c <main+0x34c>)
 8002b88:	f006 ff8c 	bl	8009aa4 <HAL_UART_Transmit>
  OW_Begin(&ow1, &huart2);
 8002b8c:	49c0      	ldr	r1, [pc, #768]	@ (8002e90 <main+0x350>)
 8002b8e:	48c1      	ldr	r0, [pc, #772]	@ (8002e94 <main+0x354>)
 8002b90:	f7fe fee7 	bl	8001962 <OW_Begin>
  if(OW_Reset(&ow1) == OW_OK)
 8002b94:	48bf      	ldr	r0, [pc, #764]	@ (8002e94 <main+0x354>)
 8002b96:	f7fe fefb 	bl	8001990 <OW_Reset>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <main+0x70>
  {
    printf("[%8lu] OneWire 1 line devices are present :)\r\n", HAL_GetTick());
 8002ba0:	f000 fe04 	bl	80037ac <HAL_GetTick>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	48bb      	ldr	r0, [pc, #748]	@ (8002e98 <main+0x358>)
 8002baa:	f00c fc7b 	bl	800f4a4 <iprintf>
 8002bae:	e006      	b.n	8002bbe <main+0x7e>
  }
  else
  {
    printf("[%8lu] OneWire 1 line no devices :(\r\n", HAL_GetTick());
 8002bb0:	f000 fdfc 	bl	80037ac <HAL_GetTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	48b8      	ldr	r0, [pc, #736]	@ (8002e9c <main+0x35c>)
 8002bba:	f00c fc73 	bl	800f4a4 <iprintf>
  }
  DT_SetOneWire(&dt1, &ow1);
 8002bbe:	49b5      	ldr	r1, [pc, #724]	@ (8002e94 <main+0x354>)
 8002bc0:	48b7      	ldr	r0, [pc, #732]	@ (8002ea0 <main+0x360>)
 8002bc2:	f7fe f9d7 	bl	8000f74 <DT_SetOneWire>
  // arrays to hold device address
  CurrentDeviceAddress insideThermometer;
  // locate devices on the bus
  printf("[%8lu] 1-line Locating devices...\r\n", HAL_GetTick());
 8002bc6:	f000 fdf1 	bl	80037ac <HAL_GetTick>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4619      	mov	r1, r3
 8002bce:	48b5      	ldr	r0, [pc, #724]	@ (8002ea4 <main+0x364>)
 8002bd0:	f00c fc68 	bl	800f4a4 <iprintf>
  DT_Begin(&dt1);
 8002bd4:	48b2      	ldr	r0, [pc, #712]	@ (8002ea0 <main+0x360>)
 8002bd6:	f7fe f9f3 	bl	8000fc0 <DT_Begin>
  uint8_t numDevOneLine = DT_GetDeviceCount(&dt1);
 8002bda:	48b1      	ldr	r0, [pc, #708]	@ (8002ea0 <main+0x360>)
 8002bdc:	f7fe fa74 	bl	80010c8 <DT_GetDeviceCount>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 335b 	strb.w	r3, [r7, #859]	@ 0x35b
  printf("[%8lu] 1-line Found %d devices.\r\n", HAL_GetTick(), numDevOneLine);
 8002be6:	f000 fde1 	bl	80037ac <HAL_GetTick>
 8002bea:	4601      	mov	r1, r0
 8002bec:	f897 335b 	ldrb.w	r3, [r7, #859]	@ 0x35b
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	48ad      	ldr	r0, [pc, #692]	@ (8002ea8 <main+0x368>)
 8002bf4:	f00c fc56 	bl	800f4a4 <iprintf>

  for (int i = 0; i < numDevOneLine; ++i)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8002bfe:	e044      	b.n	8002c8a <main+0x14a>
  {
  	if (!DT_GetAddress(&dt1, insideThermometer, i))
 8002c00:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	48a4      	ldr	r0, [pc, #656]	@ (8002ea0 <main+0x360>)
 8002c0e:	f7fe faa5 	bl	800115c <DT_GetAddress>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <main+0xf0>
  		  printf("[%8lu] 1-line: Unable to find address for Device %d\r\n", HAL_GetTick(), i);
 8002c1e:	f000 fdc5 	bl	80037ac <HAL_GetTick>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8002c28:	4619      	mov	r1, r3
 8002c2a:	48a0      	ldr	r0, [pc, #640]	@ (8002eac <main+0x36c>)
 8002c2c:	f00c fc3a 	bl	800f4a4 <iprintf>
  	printf("[%8lu] 1-line: Device %d Address: ", HAL_GetTick(), i);
 8002c30:	f000 fdbc 	bl	80037ac <HAL_GetTick>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	489c      	ldr	r0, [pc, #624]	@ (8002eb0 <main+0x370>)
 8002c3e:	f00c fc31 	bl	800f4a4 <iprintf>
  	printAddress(insideThermometer);
 8002c42:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff5e 	bl	8002b08 <printAddress>
  	printf("\r\n");
 8002c4c:	4899      	ldr	r0, [pc, #612]	@ (8002eb4 <main+0x374>)
 8002c4e:	f00c fc91 	bl	800f574 <puts>
  	// set the resolution to 12 bit (Each Dallas/Maxim device is capable of several different resolutions)
  	DT_SetResolution(&dt1, insideThermometer, 12, true);
 8002c52:	f507 714d 	add.w	r1, r7, #820	@ 0x334
 8002c56:	2301      	movs	r3, #1
 8002c58:	220c      	movs	r2, #12
 8002c5a:	4891      	ldr	r0, [pc, #580]	@ (8002ea0 <main+0x360>)
 8002c5c:	f7fe fbca 	bl	80013f4 <DT_SetResolution>
  	printf("[%8lu] 1-line: Device %d Resolution: %d\r\n", HAL_GetTick(), i, DT_GetResolution(&dt1, insideThermometer));
 8002c60:	f000 fda4 	bl	80037ac <HAL_GetTick>
 8002c64:	4604      	mov	r4, r0
 8002c66:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	488c      	ldr	r0, [pc, #560]	@ (8002ea0 <main+0x360>)
 8002c6e:	f7fe fc63 	bl	8001538 <DT_GetResolution>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8002c78:	4621      	mov	r1, r4
 8002c7a:	488f      	ldr	r0, [pc, #572]	@ (8002eb8 <main+0x378>)
 8002c7c:	f00c fc12 	bl	800f4a4 <iprintf>
  for (int i = 0; i < numDevOneLine; ++i)
 8002c80:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002c84:	3301      	adds	r3, #1
 8002c86:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8002c8a:	f897 335b 	ldrb.w	r3, [r7, #859]	@ 0x35b
 8002c8e:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dbb4      	blt.n	8002c00 <main+0xc0>
  int message;
  int message_length;

	/* USER CODE BEGIN 2 */
//    master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin); //pin switch to mode salve or master
  	master = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
	if (master == 1) {
 8002c9c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d109      	bne.n	8002cb8 <main+0x178>
		printf("Mode: Master\r\n");
 8002ca4:	4885      	ldr	r0, [pc, #532]	@ (8002ebc <main+0x37c>)
 8002ca6:	f00c fc65 	bl	800f574 <puts>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET); //set
 8002caa:	2200      	movs	r2, #0
 8002cac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002cb0:	4883      	ldr	r0, [pc, #524]	@ (8002ec0 <main+0x380>)
 8002cb2:	f001 ff1f 	bl	8004af4 <HAL_GPIO_WritePin>
 8002cb6:	e008      	b.n	8002cca <main+0x18a>
	} else {
		printf("Mode: Slave\r\n");
 8002cb8:	4882      	ldr	r0, [pc, #520]	@ (8002ec4 <main+0x384>)
 8002cba:	f00c fc5b 	bl	800f574 <puts>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET); //set
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002cc4:	487e      	ldr	r0, [pc, #504]	@ (8002ec0 <main+0x380>)
 8002cc6:	f001 ff15 	bl	8004af4 <HAL_GPIO_WritePin>
	}

	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8002cca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec8 <main+0x388>)
 8002ccc:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
	SX1278_hw.dio0.pin = DIO0_Pin;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8002cd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002ecc <main+0x38c>)
 8002cd8:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
	SX1278_hw.nss.pin = NSS_Pin;
 8002cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ce0:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8002ce4:	4b79      	ldr	r3, [pc, #484]	@ (8002ecc <main+0x38c>)
 8002ce6:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	SX1278_hw.reset.pin = RESET_Pin;
 8002cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cee:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
	SX1278_hw.spi = &hspi1;
 8002cf2:	4b77      	ldr	r3, [pc, #476]	@ (8002ed0 <main+0x390>)
 8002cf4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

	SX1278.hw = &SX1278_hw;
 8002cf8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002cfc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d00:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002d04:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 8002d06:	4873      	ldr	r0, [pc, #460]	@ (8002ed4 <main+0x394>)
 8002d08:	f00c fc34 	bl	800f574 <puts>
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8002d0c:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8002d10:	230a      	movs	r3, #10
 8002d12:	9305      	str	r3, [sp, #20]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9304      	str	r3, [sp, #16]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9303      	str	r3, [sp, #12]
 8002d1c:	2307      	movs	r3, #7
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	2301      	movs	r3, #1
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	2301      	movs	r3, #1
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	a355      	add	r3, pc, #340	@ (adr r3, 8002e80 <main+0x340>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	4608      	mov	r0, r1
 8002d30:	f7ff fb4c 	bl	80023cc <SX1278_init>
	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
	printf("Done configuring LoRaModule\r\n");
 8002d34:	4868      	ldr	r0, [pc, #416]	@ (8002ed8 <main+0x398>)
 8002d36:	f00c fc1d 	bl	800f574 <puts>

	if (master == 1) {
 8002d3a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d10a      	bne.n	8002d58 <main+0x218>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002d4a:	2110      	movs	r1, #16
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff faa6 	bl	800229e <SX1278_LoRaEntryTx>
 8002d52:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350
 8002d56:	e009      	b.n	8002d6c <main+0x22c>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8002d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002d60:	2110      	movs	r1, #16
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f9f2 	bl	800214c <SX1278_LoRaEntryRx>
 8002d68:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (master == 1) {
 8002d6c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d142      	bne.n	8002dfa <main+0x2ba>
			printf("Master ...\r\n");
 8002d74:	4859      	ldr	r0, [pc, #356]	@ (8002edc <main+0x39c>)
 8002d76:	f00c fbfd 	bl	800f574 <puts>
			HAL_Delay(1000);
 8002d7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d7e:	f000 fd21 	bl	80037c4 <HAL_Delay>
			printf("Sending package...\r\n");
 8002d82:	4857      	ldr	r0, [pc, #348]	@ (8002ee0 <main+0x3a0>)
 8002d84:	f00c fbf6 	bl	800f574 <puts>

			message_length = sprintf(buffer, "Hello %d", message);
 8002d88:	463b      	mov	r3, r7
 8002d8a:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8002d8e:	4955      	ldr	r1, [pc, #340]	@ (8002ee4 <main+0x3a4>)
 8002d90:	4618      	mov	r0, r3
 8002d92:	f00c fbf7 	bl	800f584 <siprintf>
 8002d96:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c
			ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8002d9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002d9e:	b2d9      	uxtb	r1, r3
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fa78 	bl	800229e <SX1278_LoRaEntryTx>
 8002dae:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350
			printf("Entry: %d\r\n", ret);
 8002db2:	f8d7 1350 	ldr.w	r1, [r7, #848]	@ 0x350
 8002db6:	484c      	ldr	r0, [pc, #304]	@ (8002ee8 <main+0x3a8>)
 8002db8:	f00c fb74 	bl	800f4a4 <iprintf>

			printf("Sending %s\r\n", buffer);
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	484a      	ldr	r0, [pc, #296]	@ (8002eec <main+0x3ac>)
 8002dc2:	f00c fb6f 	bl	800f4a4 <iprintf>
			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 8002dc6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4639      	mov	r1, r7
 8002dce:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8002dd2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002dd6:	f7ff faba 	bl	800234e <SX1278_LoRaTxPacket>
 8002dda:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350
					message_length, 2000);
			message += 1;
 8002dde:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002de2:	3301      	adds	r3, #1
 8002de4:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360

			printf("Transmission: %d\r\n", ret);
 8002de8:	f8d7 1350 	ldr.w	r1, [r7, #848]	@ 0x350
 8002dec:	4840      	ldr	r0, [pc, #256]	@ (8002ef0 <main+0x3b0>)
 8002dee:	f00c fb59 	bl	800f4a4 <iprintf>
			printf("Package sent...\r\n");
 8002df2:	4840      	ldr	r0, [pc, #256]	@ (8002ef4 <main+0x3b4>)
 8002df4:	f00c fbbe 	bl	800f574 <puts>
 8002df8:	e02d      	b.n	8002e56 <main+0x316>

		} else {
		printf("Slave ...\r\n");
 8002dfa:	483f      	ldr	r0, [pc, #252]	@ (8002ef8 <main+0x3b8>)
 8002dfc:	f00c fbba 	bl	800f574 <puts>
		HAL_Delay(800);
 8002e00:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002e04:	f000 fcde 	bl	80037c4 <HAL_Delay>
		printf("Receiving package...\r\n");
 8002e08:	483c      	ldr	r0, [pc, #240]	@ (8002efc <main+0x3bc>)
 8002e0a:	f00c fbb3 	bl	800f574 <puts>

		ret = SX1278_LoRaRxPacket(&SX1278);
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff f9ff 	bl	8002216 <SX1278_LoRaRxPacket>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
		printf("Received: %d\r\n", ret);
 8002e1e:	f8d7 1350 	ldr.w	r1, [r7, #848]	@ 0x350
 8002e22:	4837      	ldr	r0, [pc, #220]	@ (8002f00 <main+0x3c0>)
 8002e24:	f00c fb3e 	bl	800f4a4 <iprintf>
		if (ret > 0) {
 8002e28:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	dd0f      	ble.n	8002e50 <main+0x310>
			SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8002e30:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4639      	mov	r1, r7
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff faf2 	bl	8002426 <SX1278_read>
			printf("Content (%d): %s\r\n", ret, buffer);
 8002e42:	463b      	mov	r3, r7
 8002e44:	461a      	mov	r2, r3
 8002e46:	f8d7 1350 	ldr.w	r1, [r7, #848]	@ 0x350
 8002e4a:	482e      	ldr	r0, [pc, #184]	@ (8002f04 <main+0x3c4>)
 8002e4c:	f00c fb2a 	bl	800f4a4 <iprintf>
		}
		printf("Package received ...\r\n");
 8002e50:	482d      	ldr	r0, [pc, #180]	@ (8002f08 <main+0x3c8>)
 8002e52:	f00c fb8f 	bl	800f574 <puts>
//		}


	// call sensors.requestTemperatures() to issue a global temperature
	// request to all devices on the bus
	printf("[%8lu] 1-line: Requesting temperatures...", HAL_GetTick());
 8002e56:	f000 fca9 	bl	80037ac <HAL_GetTick>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	482b      	ldr	r0, [pc, #172]	@ (8002f0c <main+0x3cc>)
 8002e60:	f00c fb20 	bl	800f4a4 <iprintf>
	DT_RequestTemperatures(&dt1); // Send the command to get temperatures
 8002e64:	480e      	ldr	r0, [pc, #56]	@ (8002ea0 <main+0x360>)
 8002e66:	f7fe fbb1 	bl	80015cc <DT_RequestTemperatures>
	printf("\r\n[%8lu] 1-line: DONE\r\n", HAL_GetTick());
 8002e6a:	f000 fc9f 	bl	80037ac <HAL_GetTick>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4619      	mov	r1, r3
 8002e72:	4827      	ldr	r0, [pc, #156]	@ (8002f10 <main+0x3d0>)
 8002e74:	f00c fb16 	bl	800f4a4 <iprintf>
	for (int i = 0; i < numDevOneLine; ++i)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8002e7e:	e069      	b.n	8002f54 <main+0x414>
 8002e80:	19de5080 	.word	0x19de5080
 8002e84:	00000000 	.word	0x00000000
 8002e88:	080119b8 	.word	0x080119b8
 8002e8c:	20000324 	.word	0x20000324
 8002e90:	2000036c 	.word	0x2000036c
 8002e94:	200002ac 	.word	0x200002ac
 8002e98:	080116d8 	.word	0x080116d8
 8002e9c:	08011708 	.word	0x08011708
 8002ea0:	200002bc 	.word	0x200002bc
 8002ea4:	08011730 	.word	0x08011730
 8002ea8:	08011754 	.word	0x08011754
 8002eac:	08011778 	.word	0x08011778
 8002eb0:	080117b0 	.word	0x080117b0
 8002eb4:	080117d4 	.word	0x080117d4
 8002eb8:	080117d8 	.word	0x080117d8
 8002ebc:	08011804 	.word	0x08011804
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	08011814 	.word	0x08011814
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	200002c8 	.word	0x200002c8
 8002ed4:	08011824 	.word	0x08011824
 8002ed8:	08011840 	.word	0x08011840
 8002edc:	08011860 	.word	0x08011860
 8002ee0:	0801186c 	.word	0x0801186c
 8002ee4:	08011880 	.word	0x08011880
 8002ee8:	0801188c 	.word	0x0801188c
 8002eec:	08011898 	.word	0x08011898
 8002ef0:	080118a8 	.word	0x080118a8
 8002ef4:	080118bc 	.word	0x080118bc
 8002ef8:	080118d0 	.word	0x080118d0
 8002efc:	080118dc 	.word	0x080118dc
 8002f00:	080118f4 	.word	0x080118f4
 8002f04:	08011904 	.word	0x08011904
 8002f08:	08011918 	.word	0x08011918
 8002f0c:	08011930 	.word	0x08011930
 8002f10:	0801195c 	.word	0x0801195c
	{
		// After we got the temperatures, we can print them here.
		// We use the function ByIndex, and as an example get the temperature from the first sensor only.
		printf("[%8lu] 1-line: Temperature for the device %d (index %d) is: %.2f\r\n", HAL_GetTick(), i, i, DT_GetTempCByIndex(&dt1, i));
 8002f14:	f000 fc4a 	bl	80037ac <HAL_GetTick>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	4816      	ldr	r0, [pc, #88]	@ (8002f7c <main+0x43c>)
 8002f24:	f7fe fbfa 	bl	800171c <DT_GetTempCByIndex>
 8002f28:	ee10 3a10 	vmov	r3, s0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fb13 	bl	8000558 <__aeabi_f2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	e9cd 2300 	strd	r2, r3, [sp]
 8002f3a:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8002f3e:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8002f42:	4621      	mov	r1, r4
 8002f44:	480e      	ldr	r0, [pc, #56]	@ (8002f80 <main+0x440>)
 8002f46:	f00c faad 	bl	800f4a4 <iprintf>
	for (int i = 0; i < numDevOneLine; ++i)
 8002f4a:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8002f54:	f897 335b 	ldrb.w	r3, [r7, #859]	@ 0x35b
 8002f58:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbd9      	blt.n	8002f14 <main+0x3d4>
	}

	HAL_Delay(DT_MillisToWaitForConversion(DT_GetAllResolution(&dt1)));
 8002f60:	4806      	ldr	r0, [pc, #24]	@ (8002f7c <main+0x43c>)
 8002f62:	f7fe fadd 	bl	8001520 <DT_GetAllResolution>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fb53 	bl	8001614 <DT_MillisToWaitForConversion>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fc27 	bl	80037c4 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002f76:	f00b f9e7 	bl	800e348 <MX_USB_HOST_Process>
		if (master == 1) {
 8002f7a:	e6f7      	b.n	8002d6c <main+0x22c>
 8002f7c:	200002bc 	.word	0x200002bc
 8002f80:	08011974 	.word	0x08011974

08002f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b094      	sub	sp, #80	@ 0x50
 8002f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f8a:	f107 0320 	add.w	r3, r7, #32
 8002f8e:	2230      	movs	r2, #48	@ 0x30
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00c fbee 	bl	800f774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	4b28      	ldr	r3, [pc, #160]	@ (8003050 <SystemClock_Config+0xcc>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	4a27      	ldr	r2, [pc, #156]	@ (8003050 <SystemClock_Config+0xcc>)
 8002fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <SystemClock_Config+0xcc>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	4b22      	ldr	r3, [pc, #136]	@ (8003054 <SystemClock_Config+0xd0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a21      	ldr	r2, [pc, #132]	@ (8003054 <SystemClock_Config+0xd0>)
 8002fce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003054 <SystemClock_Config+0xd0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fea:	2302      	movs	r3, #2
 8002fec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002ff8:	2360      	movs	r3, #96	@ 0x60
 8002ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003000:	2304      	movs	r3, #4
 8003002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003004:	f107 0320 	add.w	r3, r7, #32
 8003008:	4618      	mov	r0, r3
 800300a:	f004 fe05 	bl	8007c18 <HAL_RCC_OscConfig>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003014:	f000 f820 	bl	8003058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003018:	230f      	movs	r3, #15
 800301a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800301c:	2302      	movs	r3, #2
 800301e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800302a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800302e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003030:	f107 030c 	add.w	r3, r7, #12
 8003034:	2103      	movs	r1, #3
 8003036:	4618      	mov	r0, r3
 8003038:	f005 f91a 	bl	8008270 <HAL_RCC_ClockConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003042:	f000 f809 	bl	8003058 <Error_Handler>
  }
}
 8003046:	bf00      	nop
 8003048:	3750      	adds	r7, #80	@ 0x50
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000

08003058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800305c:	b672      	cpsid	i
}
 800305e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <Error_Handler+0x8>

08003064 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003080:	4b17      	ldr	r3, [pc, #92]	@ (80030e0 <MX_SPI1_Init+0x64>)
 8003082:	4a18      	ldr	r2, [pc, #96]	@ (80030e4 <MX_SPI1_Init+0x68>)
 8003084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003086:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <MX_SPI1_Init+0x64>)
 8003088:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800308c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800308e:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <MX_SPI1_Init+0x64>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003094:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <MX_SPI1_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800309a:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <MX_SPI1_Init+0x64>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a0:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <MX_SPI1_Init+0x64>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <MX_SPI1_Init+0x64>)
 80030a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ae:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <MX_SPI1_Init+0x64>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <MX_SPI1_Init+0x64>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ba:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <MX_SPI1_Init+0x64>)
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c0:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <MX_SPI1_Init+0x64>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <MX_SPI1_Init+0x64>)
 80030c8:	220a      	movs	r2, #10
 80030ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030cc:	4804      	ldr	r0, [pc, #16]	@ (80030e0 <MX_SPI1_Init+0x64>)
 80030ce:	f005 fe0f 	bl	8008cf0 <HAL_SPI_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030d8:	f7ff ffbe 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200002c8 	.word	0x200002c8
 80030e4:	40013000 	.word	0x40013000

080030e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	@ (800316c <HAL_SPI_MspInit+0x84>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d12b      	bne.n	8003162 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b18      	ldr	r3, [pc, #96]	@ (8003170 <HAL_SPI_MspInit+0x88>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	4a17      	ldr	r2, [pc, #92]	@ (8003170 <HAL_SPI_MspInit+0x88>)
 8003114:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003118:	6453      	str	r3, [r2, #68]	@ 0x44
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_SPI_MspInit+0x88>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <HAL_SPI_MspInit+0x88>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	4a10      	ldr	r2, [pc, #64]	@ (8003170 <HAL_SPI_MspInit+0x88>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6313      	str	r3, [r2, #48]	@ 0x30
 8003136:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <HAL_SPI_MspInit+0x88>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003142:	23e0      	movs	r3, #224	@ 0xe0
 8003144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003152:	2305      	movs	r3, #5
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	4805      	ldr	r0, [pc, #20]	@ (8003174 <HAL_SPI_MspInit+0x8c>)
 800315e:	f001 fa11 	bl	8004584 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003162:	bf00      	nop
 8003164:	3728      	adds	r7, #40	@ 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40013000 	.word	0x40013000
 8003170:	40023800 	.word	0x40023800
 8003174:	40020000 	.word	0x40020000

08003178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <HAL_MspInit+0x5c>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	4a13      	ldr	r2, [pc, #76]	@ (80031d4 <HAL_MspInit+0x5c>)
 8003188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800318c:	6453      	str	r3, [r2, #68]	@ 0x44
 800318e:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <HAL_MspInit+0x5c>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <HAL_MspInit+0x5c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <HAL_MspInit+0x5c>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031aa:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <HAL_MspInit+0x5c>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031b6:	2007      	movs	r0, #7
 80031b8:	f000 fbf8 	bl	80039ac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	2005      	movs	r0, #5
 80031c2:	f000 fc13 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80031c6:	2005      	movs	r0, #5
 80031c8:	f000 fc3c 	bl	8003a44 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800

080031d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <NMI_Handler+0x4>

080031e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <HardFault_Handler+0x4>

080031e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <MemManage_Handler+0x4>

080031f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031f4:	bf00      	nop
 80031f6:	e7fd      	b.n	80031f4 <BusFault_Handler+0x4>

080031f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <UsageFault_Handler+0x4>

08003200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800322e:	f000 faa9 	bl	8003784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}

08003236 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003248:	4802      	ldr	r0, [pc, #8]	@ (8003254 <DMA1_Stream6_IRQHandler+0x10>)
 800324a:	f000 ff31 	bl	80040b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000414 	.word	0x20000414

08003258 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800325c:	4802      	ldr	r0, [pc, #8]	@ (8003268 <USART2_IRQHandler+0x10>)
 800325e:	f006 fd43 	bl	8009ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000036c 	.word	0x2000036c

0800326c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003270:	4802      	ldr	r0, [pc, #8]	@ (800327c <DMA1_Stream7_IRQHandler+0x10>)
 8003272:	f000 ff1d 	bl	80040b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200003b4 	.word	0x200003b4

08003280 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003284:	4802      	ldr	r0, [pc, #8]	@ (8003290 <OTG_FS_IRQHandler+0x10>)
 8003286:	f001 ff4d 	bl	8005124 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000854 	.word	0x20000854

08003294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return 1;
 8003298:	2301      	movs	r3, #1
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_kill>:

int _kill(int pid, int sig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032ae:	f00c fac3 	bl	800f838 <__errno>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2216      	movs	r2, #22
 80032b6:	601a      	str	r2, [r3, #0]
  return -1;
 80032b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_exit>:

void _exit (int status)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ffe7 	bl	80032a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <_exit+0x12>

080032da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e00a      	b.n	8003302 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032ec:	f3af 8000 	nop.w
 80032f0:	4601      	mov	r1, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	60ba      	str	r2, [r7, #8]
 80032f8:	b2ca      	uxtb	r2, r1
 80032fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	dbf0      	blt.n	80032ec <_read+0x12>
  }

  return len;
 800330a:	687b      	ldr	r3, [r7, #4]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800333c:	605a      	str	r2, [r3, #4]
  return 0;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_isatty>:

int _isatty(int file)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003362:	b480      	push	{r7}
 8003364:	b085      	sub	sp, #20
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003384:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <_sbrk+0x5c>)
 8003386:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <_sbrk+0x60>)
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <_sbrk+0x64>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003398:	4b11      	ldr	r3, [pc, #68]	@ (80033e0 <_sbrk+0x64>)
 800339a:	4a12      	ldr	r2, [pc, #72]	@ (80033e4 <_sbrk+0x68>)
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800339e:	4b10      	ldr	r3, [pc, #64]	@ (80033e0 <_sbrk+0x64>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d207      	bcs.n	80033bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033ac:	f00c fa44 	bl	800f838 <__errno>
 80033b0:	4603      	mov	r3, r0
 80033b2:	220c      	movs	r2, #12
 80033b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ba:	e009      	b.n	80033d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033bc:	4b08      	ldr	r3, [pc, #32]	@ (80033e0 <_sbrk+0x64>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033c2:	4b07      	ldr	r3, [pc, #28]	@ (80033e0 <_sbrk+0x64>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	4a05      	ldr	r2, [pc, #20]	@ (80033e0 <_sbrk+0x64>)
 80033cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20020000 	.word	0x20020000
 80033dc:	00000400 	.word	0x00000400
 80033e0:	20000320 	.word	0x20000320
 80033e4:	20000d80 	.word	0x20000d80

080033e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033ec:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <SystemInit+0x20>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	4a05      	ldr	r2, [pc, #20]	@ (8003408 <SystemInit+0x20>)
 80033f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 8003412:	4a12      	ldr	r2, [pc, #72]	@ (800345c <MX_USART1_UART_Init+0x50>)
 8003414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 8003418:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800341c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800342a:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003430:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 8003432:	220c      	movs	r2, #12
 8003434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003436:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 8003438:	2200      	movs	r2, #0
 800343a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800343c:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003442:	4805      	ldr	r0, [pc, #20]	@ (8003458 <MX_USART1_UART_Init+0x4c>)
 8003444:	f006 f9e4 	bl	8009810 <HAL_UART_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800344e:	f7ff fe03 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000324 	.word	0x20000324
 800345c:	40011000 	.word	0x40011000

08003460 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 8003466:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <MX_USART2_UART_Init+0x50>)
 8003468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 800346c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003472:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003478:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 8003480:	2200      	movs	r2, #0
 8003482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 8003486:	220c      	movs	r2, #12
 8003488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003496:	4805      	ldr	r0, [pc, #20]	@ (80034ac <MX_USART2_UART_Init+0x4c>)
 8003498:	f006 fa74 	bl	8009984 <HAL_HalfDuplex_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034a2:	f7ff fdd9 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000036c 	.word	0x2000036c
 80034b0:	40004400 	.word	0x40004400

080034b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	@ 0x30
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a65      	ldr	r2, [pc, #404]	@ (8003668 <HAL_UART_MspInit+0x1b4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d12d      	bne.n	8003532 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	4b64      	ldr	r3, [pc, #400]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	4a63      	ldr	r2, [pc, #396]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 80034e0:	f043 0310 	orr.w	r3, r3, #16
 80034e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e6:	4b61      	ldr	r3, [pc, #388]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	4b5d      	ldr	r3, [pc, #372]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	4a5c      	ldr	r2, [pc, #368]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6313      	str	r3, [r2, #48]	@ 0x30
 8003502:	4b5a      	ldr	r3, [pc, #360]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800350e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003520:	2307      	movs	r3, #7
 8003522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	4619      	mov	r1, r3
 800352a:	4851      	ldr	r0, [pc, #324]	@ (8003670 <HAL_UART_MspInit+0x1bc>)
 800352c:	f001 f82a 	bl	8004584 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003530:	e095      	b.n	800365e <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a4f      	ldr	r2, [pc, #316]	@ (8003674 <HAL_UART_MspInit+0x1c0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	f040 8090 	bne.w	800365e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	4b4a      	ldr	r3, [pc, #296]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	4a49      	ldr	r2, [pc, #292]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 8003548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800354c:	6413      	str	r3, [r2, #64]	@ 0x40
 800354e:	4b47      	ldr	r3, [pc, #284]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b43      	ldr	r3, [pc, #268]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	4a42      	ldr	r2, [pc, #264]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	6313      	str	r3, [r2, #48]	@ 0x30
 800356a:	4b40      	ldr	r3, [pc, #256]	@ (800366c <HAL_UART_MspInit+0x1b8>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003576:	2320      	movs	r3, #32
 8003578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800357a:	2312      	movs	r3, #18
 800357c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003586:	2307      	movs	r3, #7
 8003588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800358a:	f107 031c 	add.w	r3, r7, #28
 800358e:	4619      	mov	r1, r3
 8003590:	4839      	ldr	r0, [pc, #228]	@ (8003678 <HAL_UART_MspInit+0x1c4>)
 8003592:	f000 fff7 	bl	8004584 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8003596:	4b39      	ldr	r3, [pc, #228]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 8003598:	4a39      	ldr	r2, [pc, #228]	@ (8003680 <HAL_UART_MspInit+0x1cc>)
 800359a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 800359c:	4b37      	ldr	r3, [pc, #220]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 800359e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80035a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035a4:	4b35      	ldr	r3, [pc, #212]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035aa:	4b34      	ldr	r3, [pc, #208]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035b0:	4b32      	ldr	r3, [pc, #200]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b8:	4b30      	ldr	r3, [pc, #192]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035be:	4b2f      	ldr	r3, [pc, #188]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035c4:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ca:	4b2c      	ldr	r3, [pc, #176]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035d0:	4b2a      	ldr	r3, [pc, #168]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035d6:	4829      	ldr	r0, [pc, #164]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035d8:	f000 fa58 	bl	8003a8c <HAL_DMA_Init>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80035e2:	f7ff fd39 	bl	8003058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a24      	ldr	r2, [pc, #144]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035ec:	4a23      	ldr	r2, [pc, #140]	@ (800367c <HAL_UART_MspInit+0x1c8>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80035f2:	4b24      	ldr	r3, [pc, #144]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 80035f4:	4a24      	ldr	r2, [pc, #144]	@ (8003688 <HAL_UART_MspInit+0x1d4>)
 80035f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80035f8:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 80035fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80035fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003600:	4b20      	ldr	r3, [pc, #128]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 8003602:	2240      	movs	r2, #64	@ 0x40
 8003604:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003606:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800360c:	4b1d      	ldr	r3, [pc, #116]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 800360e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003612:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003614:	4b1b      	ldr	r3, [pc, #108]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 8003616:	2200      	movs	r2, #0
 8003618:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800361a:	4b1a      	ldr	r3, [pc, #104]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003620:	4b18      	ldr	r3, [pc, #96]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003626:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 8003628:	2200      	movs	r2, #0
 800362a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362c:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 800362e:	2200      	movs	r2, #0
 8003630:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003632:	4814      	ldr	r0, [pc, #80]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 8003634:	f000 fa2a 	bl	8003a8c <HAL_DMA_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 800363e:	f7ff fd0b 	bl	8003058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a0f      	ldr	r2, [pc, #60]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 8003646:	639a      	str	r2, [r3, #56]	@ 0x38
 8003648:	4a0e      	ldr	r2, [pc, #56]	@ (8003684 <HAL_UART_MspInit+0x1d0>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	2026      	movs	r0, #38	@ 0x26
 8003654:	f000 f9ca 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003658:	2026      	movs	r0, #38	@ 0x26
 800365a:	f000 f9f3 	bl	8003a44 <HAL_NVIC_EnableIRQ>
}
 800365e:	bf00      	nop
 8003660:	3730      	adds	r7, #48	@ 0x30
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40011000 	.word	0x40011000
 800366c:	40023800 	.word	0x40023800
 8003670:	40020000 	.word	0x40020000
 8003674:	40004400 	.word	0x40004400
 8003678:	40020c00 	.word	0x40020c00
 800367c:	200003b4 	.word	0x200003b4
 8003680:	400260b8 	.word	0x400260b8
 8003684:	20000414 	.word	0x20000414
 8003688:	400260a0 	.word	0x400260a0

0800368c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800368c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003690:	f7ff feaa 	bl	80033e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003694:	480c      	ldr	r0, [pc, #48]	@ (80036c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003696:	490d      	ldr	r1, [pc, #52]	@ (80036cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003698:	4a0d      	ldr	r2, [pc, #52]	@ (80036d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800369c:	e002      	b.n	80036a4 <LoopCopyDataInit>

0800369e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800369e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a2:	3304      	adds	r3, #4

080036a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036a8:	d3f9      	bcc.n	800369e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036aa:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036ac:	4c0a      	ldr	r4, [pc, #40]	@ (80036d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b0:	e001      	b.n	80036b6 <LoopFillZerobss>

080036b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b4:	3204      	adds	r2, #4

080036b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036b8:	d3fb      	bcc.n	80036b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ba:	f00c f8c3 	bl	800f844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036be:	f7ff fa3f 	bl	8002b40 <main>
  bx  lr    
 80036c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036cc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80036d0:	08011ff0 	.word	0x08011ff0
  ldr r2, =_sbss
 80036d4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80036d8:	20000d80 	.word	0x20000d80

080036dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036dc:	e7fe      	b.n	80036dc <ADC_IRQHandler>
	...

080036e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <HAL_Init+0x40>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003720 <HAL_Init+0x40>)
 80036ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003720 <HAL_Init+0x40>)
 80036f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036fc:	4b08      	ldr	r3, [pc, #32]	@ (8003720 <HAL_Init+0x40>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a07      	ldr	r2, [pc, #28]	@ (8003720 <HAL_Init+0x40>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003708:	2003      	movs	r0, #3
 800370a:	f000 f94f 	bl	80039ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800370e:	2000      	movs	r0, #0
 8003710:	f000 f808 	bl	8003724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003714:	f7ff fd30 	bl	8003178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023c00 	.word	0x40023c00

08003724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800372c:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <HAL_InitTick+0x54>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b12      	ldr	r3, [pc, #72]	@ (800377c <HAL_InitTick+0x58>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800373a:	fbb3 f3f1 	udiv	r3, r3, r1
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f996 	bl	8003a74 <HAL_SYSTICK_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e00e      	b.n	8003770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0f      	cmp	r3, #15
 8003756:	d80a      	bhi.n	800376e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003758:	2200      	movs	r2, #0
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	f000 f944 	bl	80039ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003764:	4a06      	ldr	r2, [pc, #24]	@ (8003780 <HAL_InitTick+0x5c>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000000 	.word	0x20000000
 800377c:	20000008 	.word	0x20000008
 8003780:	20000004 	.word	0x20000004

08003784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_IncTick+0x20>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_IncTick+0x24>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4413      	add	r3, r2
 8003794:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <HAL_IncTick+0x24>)
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000008 	.word	0x20000008
 80037a8:	20000474 	.word	0x20000474

080037ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return uwTick;
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <HAL_GetTick+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000474 	.word	0x20000474

080037c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037cc:	f7ff ffee 	bl	80037ac <HAL_GetTick>
 80037d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d005      	beq.n	80037ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037de:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <HAL_Delay+0x44>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ea:	bf00      	nop
 80037ec:	f7ff ffde 	bl	80037ac <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d8f7      	bhi.n	80037ec <HAL_Delay+0x28>
  {
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000008 	.word	0x20000008

0800380c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800381c:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003828:	4013      	ands	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383e:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	60d3      	str	r3, [r2, #12]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <__NVIC_GetPriorityGrouping+0x18>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 0307 	and.w	r3, r3, #7
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	2b00      	cmp	r3, #0
 8003880:	db0b      	blt.n	800389a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	f003 021f 	and.w	r2, r3, #31
 8003888:	4907      	ldr	r1, [pc, #28]	@ (80038a8 <__NVIC_EnableIRQ+0x38>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2001      	movs	r0, #1
 8003892:	fa00 f202 	lsl.w	r2, r0, r2
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000e100 	.word	0xe000e100

080038ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	6039      	str	r1, [r7, #0]
 80038b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	db0a      	blt.n	80038d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	490c      	ldr	r1, [pc, #48]	@ (80038f8 <__NVIC_SetPriority+0x4c>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	440b      	add	r3, r1
 80038d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d4:	e00a      	b.n	80038ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4908      	ldr	r1, [pc, #32]	@ (80038fc <__NVIC_SetPriority+0x50>)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	3b04      	subs	r3, #4
 80038e4:	0112      	lsls	r2, r2, #4
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	440b      	add	r3, r1
 80038ea:	761a      	strb	r2, [r3, #24]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000e100 	.word	0xe000e100
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	@ 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f1c3 0307 	rsb	r3, r3, #7
 800391a:	2b04      	cmp	r3, #4
 800391c:	bf28      	it	cs
 800391e:	2304      	movcs	r3, #4
 8003920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3304      	adds	r3, #4
 8003926:	2b06      	cmp	r3, #6
 8003928:	d902      	bls.n	8003930 <NVIC_EncodePriority+0x30>
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3b03      	subs	r3, #3
 800392e:	e000      	b.n	8003932 <NVIC_EncodePriority+0x32>
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	f04f 32ff 	mov.w	r2, #4294967295
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	401a      	ands	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003948:	f04f 31ff 	mov.w	r1, #4294967295
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	43d9      	mvns	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	4313      	orrs	r3, r2
         );
}
 800395a:	4618      	mov	r0, r3
 800395c:	3724      	adds	r7, #36	@ 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003978:	d301      	bcc.n	800397e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800397a:	2301      	movs	r3, #1
 800397c:	e00f      	b.n	800399e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397e:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <SysTick_Config+0x40>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003986:	210f      	movs	r1, #15
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	f7ff ff8e 	bl	80038ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003990:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <SysTick_Config+0x40>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003996:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <SysTick_Config+0x40>)
 8003998:	2207      	movs	r2, #7
 800399a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	e000e010 	.word	0xe000e010

080039ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b07      	cmp	r3, #7
 80039b8:	d00f      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b06      	cmp	r3, #6
 80039be:	d00c      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d009      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d006      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d003      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039d2:	2190      	movs	r1, #144	@ 0x90
 80039d4:	4804      	ldr	r0, [pc, #16]	@ (80039e8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80039d6:	f7ff fb45 	bl	8003064 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ff16 	bl	800380c <__NVIC_SetPriorityGrouping>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	080119c8 	.word	0x080119c8

080039ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d903      	bls.n	8003a0c <HAL_NVIC_SetPriority+0x20>
 8003a04:	21a8      	movs	r1, #168	@ 0xa8
 8003a06:	480e      	ldr	r0, [pc, #56]	@ (8003a40 <HAL_NVIC_SetPriority+0x54>)
 8003a08:	f7ff fb2c 	bl	8003064 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	d903      	bls.n	8003a1a <HAL_NVIC_SetPriority+0x2e>
 8003a12:	21a9      	movs	r1, #169	@ 0xa9
 8003a14:	480a      	ldr	r0, [pc, #40]	@ (8003a40 <HAL_NVIC_SetPriority+0x54>)
 8003a16:	f7ff fb25 	bl	8003064 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1a:	f7ff ff1b 	bl	8003854 <__NVIC_GetPriorityGrouping>
 8003a1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	6978      	ldr	r0, [r7, #20]
 8003a26:	f7ff ff6b 	bl	8003900 <NVIC_EncodePriority>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff3a 	bl	80038ac <__NVIC_SetPriority>
}
 8003a38:	bf00      	nop
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	080119c8 	.word	0x080119c8

08003a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	da03      	bge.n	8003a5e <HAL_NVIC_EnableIRQ+0x1a>
 8003a56:	21bc      	movs	r1, #188	@ 0xbc
 8003a58:	4805      	ldr	r0, [pc, #20]	@ (8003a70 <HAL_NVIC_EnableIRQ+0x2c>)
 8003a5a:	f7ff fb03 	bl	8003064 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff04 	bl	8003870 <__NVIC_EnableIRQ>
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	080119c8 	.word	0x080119c8

08003a74 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff73 	bl	8003968 <SysTick_Config>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7ff fe88 	bl	80037ac <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e203      	b.n	8003eb0 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a8b      	ldr	r2, [pc, #556]	@ (8003cdc <HAL_DMA_Init+0x250>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d04e      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a8a      	ldr	r2, [pc, #552]	@ (8003ce0 <HAL_DMA_Init+0x254>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d049      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a88      	ldr	r2, [pc, #544]	@ (8003ce4 <HAL_DMA_Init+0x258>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d044      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a87      	ldr	r2, [pc, #540]	@ (8003ce8 <HAL_DMA_Init+0x25c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d03f      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a85      	ldr	r2, [pc, #532]	@ (8003cec <HAL_DMA_Init+0x260>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d03a      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a84      	ldr	r2, [pc, #528]	@ (8003cf0 <HAL_DMA_Init+0x264>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d035      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a82      	ldr	r2, [pc, #520]	@ (8003cf4 <HAL_DMA_Init+0x268>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d030      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a81      	ldr	r2, [pc, #516]	@ (8003cf8 <HAL_DMA_Init+0x26c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d02b      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a7f      	ldr	r2, [pc, #508]	@ (8003cfc <HAL_DMA_Init+0x270>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d026      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7e      	ldr	r2, [pc, #504]	@ (8003d00 <HAL_DMA_Init+0x274>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d021      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a7c      	ldr	r2, [pc, #496]	@ (8003d04 <HAL_DMA_Init+0x278>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01c      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d08 <HAL_DMA_Init+0x27c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d017      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a79      	ldr	r2, [pc, #484]	@ (8003d0c <HAL_DMA_Init+0x280>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d012      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a78      	ldr	r2, [pc, #480]	@ (8003d10 <HAL_DMA_Init+0x284>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00d      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a76      	ldr	r2, [pc, #472]	@ (8003d14 <HAL_DMA_Init+0x288>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d008      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a75      	ldr	r2, [pc, #468]	@ (8003d18 <HAL_DMA_Init+0x28c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <HAL_DMA_Init+0xc4>
 8003b48:	21b7      	movs	r1, #183	@ 0xb7
 8003b4a:	4874      	ldr	r0, [pc, #464]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003b4c:	f7ff fa8a 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d026      	beq.n	8003ba6 <HAL_DMA_Init+0x11a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b60:	d021      	beq.n	8003ba6 <HAL_DMA_Init+0x11a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b6a:	d01c      	beq.n	8003ba6 <HAL_DMA_Init+0x11a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003b74:	d017      	beq.n	8003ba6 <HAL_DMA_Init+0x11a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b7e:	d012      	beq.n	8003ba6 <HAL_DMA_Init+0x11a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8003b88:	d00d      	beq.n	8003ba6 <HAL_DMA_Init+0x11a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003b92:	d008      	beq.n	8003ba6 <HAL_DMA_Init+0x11a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8003b9c:	d003      	beq.n	8003ba6 <HAL_DMA_Init+0x11a>
 8003b9e:	21b8      	movs	r1, #184	@ 0xb8
 8003ba0:	485e      	ldr	r0, [pc, #376]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003ba2:	f7ff fa5f 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_DMA_Init+0x13a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	d007      	beq.n	8003bc6 <HAL_DMA_Init+0x13a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d003      	beq.n	8003bc6 <HAL_DMA_Init+0x13a>
 8003bbe:	21b9      	movs	r1, #185	@ 0xb9
 8003bc0:	4856      	ldr	r0, [pc, #344]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003bc2:	f7ff fa4f 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bce:	d007      	beq.n	8003be0 <HAL_DMA_Init+0x154>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_DMA_Init+0x154>
 8003bd8:	21ba      	movs	r1, #186	@ 0xba
 8003bda:	4850      	ldr	r0, [pc, #320]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003bdc:	f7ff fa42 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_Init+0x16e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_DMA_Init+0x16e>
 8003bf2:	21bb      	movs	r1, #187	@ 0xbb
 8003bf4:	4849      	ldr	r0, [pc, #292]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003bf6:	f7ff fa35 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_DMA_Init+0x192>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c0a:	d008      	beq.n	8003c1e <HAL_DMA_Init+0x192>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c14:	d003      	beq.n	8003c1e <HAL_DMA_Init+0x192>
 8003c16:	21bc      	movs	r1, #188	@ 0xbc
 8003c18:	4840      	ldr	r0, [pc, #256]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003c1a:	f7ff fa23 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <HAL_DMA_Init+0x1b6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2e:	d008      	beq.n	8003c42 <HAL_DMA_Init+0x1b6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c38:	d003      	beq.n	8003c42 <HAL_DMA_Init+0x1b6>
 8003c3a:	21bd      	movs	r1, #189	@ 0xbd
 8003c3c:	4837      	ldr	r0, [pc, #220]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003c3e:	f7ff fa11 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00c      	beq.n	8003c64 <HAL_DMA_Init+0x1d8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c52:	d007      	beq.n	8003c64 <HAL_DMA_Init+0x1d8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d003      	beq.n	8003c64 <HAL_DMA_Init+0x1d8>
 8003c5c:	21be      	movs	r1, #190	@ 0xbe
 8003c5e:	482f      	ldr	r0, [pc, #188]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003c60:	f7ff fa00 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <HAL_DMA_Init+0x206>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c74:	d00d      	beq.n	8003c92 <HAL_DMA_Init+0x206>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c7e:	d008      	beq.n	8003c92 <HAL_DMA_Init+0x206>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c88:	d003      	beq.n	8003c92 <HAL_DMA_Init+0x206>
 8003c8a:	21bf      	movs	r1, #191	@ 0xbf
 8003c8c:	4823      	ldr	r0, [pc, #140]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003c8e:	f7ff f9e9 	bl	8003064 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_DMA_Init+0x21e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d003      	beq.n	8003caa <HAL_DMA_Init+0x21e>
 8003ca2:	21c0      	movs	r1, #192	@ 0xc0
 8003ca4:	481d      	ldr	r0, [pc, #116]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003ca6:	f7ff f9dd 	bl	8003064 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d064      	beq.n	8003d7c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d032      	beq.n	8003d20 <HAL_DMA_Init+0x294>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d02e      	beq.n	8003d20 <HAL_DMA_Init+0x294>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d02a      	beq.n	8003d20 <HAL_DMA_Init+0x294>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d026      	beq.n	8003d20 <HAL_DMA_Init+0x294>
 8003cd2:	21c5      	movs	r1, #197	@ 0xc5
 8003cd4:	4811      	ldr	r0, [pc, #68]	@ (8003d1c <HAL_DMA_Init+0x290>)
 8003cd6:	f7ff f9c5 	bl	8003064 <assert_failed>
 8003cda:	e021      	b.n	8003d20 <HAL_DMA_Init+0x294>
 8003cdc:	40026010 	.word	0x40026010
 8003ce0:	40026028 	.word	0x40026028
 8003ce4:	40026040 	.word	0x40026040
 8003ce8:	40026058 	.word	0x40026058
 8003cec:	40026070 	.word	0x40026070
 8003cf0:	40026088 	.word	0x40026088
 8003cf4:	400260a0 	.word	0x400260a0
 8003cf8:	400260b8 	.word	0x400260b8
 8003cfc:	40026410 	.word	0x40026410
 8003d00:	40026428 	.word	0x40026428
 8003d04:	40026440 	.word	0x40026440
 8003d08:	40026458 	.word	0x40026458
 8003d0c:	40026470 	.word	0x40026470
 8003d10:	40026488 	.word	0x40026488
 8003d14:	400264a0 	.word	0x400264a0
 8003d18:	400264b8 	.word	0x400264b8
 8003d1c:	08011a04 	.word	0x08011a04
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d012      	beq.n	8003d4e <HAL_DMA_Init+0x2c2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d30:	d00d      	beq.n	8003d4e <HAL_DMA_Init+0x2c2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d3a:	d008      	beq.n	8003d4e <HAL_DMA_Init+0x2c2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d44:	d003      	beq.n	8003d4e <HAL_DMA_Init+0x2c2>
 8003d46:	21c6      	movs	r1, #198	@ 0xc6
 8003d48:	485b      	ldr	r0, [pc, #364]	@ (8003eb8 <HAL_DMA_Init+0x42c>)
 8003d4a:	f7ff f98b 	bl	8003064 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d012      	beq.n	8003d7c <HAL_DMA_Init+0x2f0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d5e:	d00d      	beq.n	8003d7c <HAL_DMA_Init+0x2f0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d68:	d008      	beq.n	8003d7c <HAL_DMA_Init+0x2f0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003d72:	d003      	beq.n	8003d7c <HAL_DMA_Init+0x2f0>
 8003d74:	21c7      	movs	r1, #199	@ 0xc7
 8003d76:	4850      	ldr	r0, [pc, #320]	@ (8003eb8 <HAL_DMA_Init+0x42c>)
 8003d78:	f7ff f974 	bl	8003064 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d9c:	e00f      	b.n	8003dbe <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d9e:	f7ff fd05 	bl	80037ac <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d908      	bls.n	8003dbe <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2203      	movs	r2, #3
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e078      	b.n	8003eb0 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e8      	bne.n	8003d9e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4b39      	ldr	r3, [pc, #228]	@ (8003ebc <HAL_DMA_Init+0x430>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d107      	bne.n	8003e28 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	4313      	orrs	r3, r2
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0307 	bic.w	r3, r3, #7
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d117      	bne.n	8003e82 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fb11 	bl	800448c <DMA_CheckFifoParam>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2240      	movs	r2, #64	@ 0x40
 8003e74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e016      	b.n	8003eb0 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fac8 	bl	8004420 <DMA_CalcBaseAndBitshift>
 8003e90:	4603      	mov	r3, r0
 8003e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e98:	223f      	movs	r2, #63	@ 0x3f
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	08011a04 	.word	0x08011a04
 8003ebc:	f010803f 	.word	0xf010803f

08003ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_DMA_Start_IT+0x26>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee4:	d304      	bcc.n	8003ef0 <HAL_DMA_Start_IT+0x30>
 8003ee6:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8003eea:	4827      	ldr	r0, [pc, #156]	@ (8003f88 <HAL_DMA_Start_IT+0xc8>)
 8003eec:	f7ff f8ba 	bl	8003064 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_DMA_Start_IT+0x3e>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e040      	b.n	8003f80 <HAL_DMA_Start_IT+0xc0>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d12f      	bne.n	8003f72 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fa4c 	bl	80043c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	223f      	movs	r2, #63	@ 0x3f
 8003f32:	409a      	lsls	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0216 	orr.w	r2, r2, #22
 8003f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0208 	orr.w	r2, r2, #8
 8003f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e005      	b.n	8003f7e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	08011a04 	.word	0x08011a04

08003f8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f9a:	f7ff fc07 	bl	80037ac <HAL_GetTick>
 8003f9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d008      	beq.n	8003fbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2280      	movs	r2, #128	@ 0x80
 8003fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e052      	b.n	8004064 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0216 	bic.w	r2, r2, #22
 8003fcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <HAL_DMA_Abort+0x62>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0208 	bic.w	r2, r2, #8
 8003ffc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800400e:	e013      	b.n	8004038 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004010:	f7ff fbcc 	bl	80037ac <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b05      	cmp	r3, #5
 800401c:	d90c      	bls.n	8004038 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2203      	movs	r2, #3
 8004028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e015      	b.n	8004064 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e4      	bne.n	8004010 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404a:	223f      	movs	r2, #63	@ 0x3f
 800404c:	409a      	lsls	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d004      	beq.n	800408a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2280      	movs	r2, #128	@ 0x80
 8004084:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e00c      	b.n	80040a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2205      	movs	r2, #5
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040bc:	4b8e      	ldr	r3, [pc, #568]	@ (80042f8 <HAL_DMA_IRQHandler+0x248>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a8e      	ldr	r2, [pc, #568]	@ (80042fc <HAL_DMA_IRQHandler+0x24c>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0a9b      	lsrs	r3, r3, #10
 80040c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	2208      	movs	r2, #8
 80040dc:	409a      	lsls	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01a      	beq.n	800411c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004108:	2208      	movs	r2, #8
 800410a:	409a      	lsls	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004114:	f043 0201 	orr.w	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004120:	2201      	movs	r2, #1
 8004122:	409a      	lsls	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413e:	2201      	movs	r2, #1
 8004140:	409a      	lsls	r2, r3
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	f043 0202 	orr.w	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	2204      	movs	r2, #4
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4013      	ands	r3, r2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d012      	beq.n	8004188 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004174:	2204      	movs	r2, #4
 8004176:	409a      	lsls	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	2210      	movs	r2, #16
 800418e:	409a      	lsls	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d043      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03c      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041aa:	2210      	movs	r2, #16
 80041ac:	409a      	lsls	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d024      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
 80041de:	e01f      	b.n	8004220 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
 80041f0:	e016      	b.n	8004220 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0208 	bic.w	r2, r2, #8
 800420e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	2220      	movs	r2, #32
 8004226:	409a      	lsls	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 808f 	beq.w	8004350 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8087 	beq.w	8004350 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004246:	2220      	movs	r2, #32
 8004248:	409a      	lsls	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b05      	cmp	r3, #5
 8004258:	d136      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0216 	bic.w	r2, r2, #22
 8004268:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004278:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <HAL_DMA_IRQHandler+0x1da>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0208 	bic.w	r2, r2, #8
 8004298:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429e:	223f      	movs	r2, #63	@ 0x3f
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d07e      	beq.n	80043bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
        }
        return;
 80042c6:	e079      	b.n	80043bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01d      	beq.n	8004312 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10d      	bne.n	8004300 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d031      	beq.n	8004350 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
 80042f4:	e02c      	b.n	8004350 <HAL_DMA_IRQHandler+0x2a0>
 80042f6:	bf00      	nop
 80042f8:	20000000 	.word	0x20000000
 80042fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d023      	beq.n	8004350 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
 8004310:	e01e      	b.n	8004350 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10f      	bne.n	8004340 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0210 	bic.w	r2, r2, #16
 800432e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004354:	2b00      	cmp	r3, #0
 8004356:	d032      	beq.n	80043be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d022      	beq.n	80043aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2205      	movs	r2, #5
 8004368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	3301      	adds	r3, #1
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	429a      	cmp	r2, r3
 8004386:	d307      	bcc.n	8004398 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f2      	bne.n	800437c <HAL_DMA_IRQHandler+0x2cc>
 8004396:	e000      	b.n	800439a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004398:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	4798      	blx	r3
 80043ba:	e000      	b.n	80043be <HAL_DMA_IRQHandler+0x30e>
        return;
 80043bc:	bf00      	nop
    }
  }
}
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	d108      	bne.n	8004404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004402:	e007      	b.n	8004414 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3b10      	subs	r3, #16
 8004430:	4a14      	ldr	r2, [pc, #80]	@ (8004484 <DMA_CalcBaseAndBitshift+0x64>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800443a:	4a13      	ldr	r2, [pc, #76]	@ (8004488 <DMA_CalcBaseAndBitshift+0x68>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d909      	bls.n	8004462 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	1d1a      	adds	r2, r3, #4
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004460:	e007      	b.n	8004472 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	aaaaaaab 	.word	0xaaaaaaab
 8004488:	08011c64 	.word	0x08011c64

0800448c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11f      	bne.n	80044e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d856      	bhi.n	800455a <DMA_CheckFifoParam+0xce>
 80044ac:	a201      	add	r2, pc, #4	@ (adr r2, 80044b4 <DMA_CheckFifoParam+0x28>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044d7 	.word	0x080044d7
 80044bc:	080044c5 	.word	0x080044c5
 80044c0:	0800455b 	.word	0x0800455b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d046      	beq.n	800455e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d4:	e043      	b.n	800455e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044de:	d140      	bne.n	8004562 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e4:	e03d      	b.n	8004562 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ee:	d121      	bne.n	8004534 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d837      	bhi.n	8004566 <DMA_CheckFifoParam+0xda>
 80044f6:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <DMA_CheckFifoParam+0x70>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004513 	.word	0x08004513
 8004504:	0800450d 	.word	0x0800450d
 8004508:	08004525 	.word	0x08004525
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	e030      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d025      	beq.n	800456a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004522:	e022      	b.n	800456a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800452c:	d11f      	bne.n	800456e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004532:	e01c      	b.n	800456e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d903      	bls.n	8004542 <DMA_CheckFifoParam+0xb6>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d003      	beq.n	8004548 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004540:	e018      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      break;
 8004546:	e015      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00e      	beq.n	8004572 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e00b      	b.n	8004572 <DMA_CheckFifoParam+0xe6>
      break;
 800455a:	bf00      	nop
 800455c:	e00a      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 800455e:	bf00      	nop
 8004560:	e008      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004562:	bf00      	nop
 8004564:	e006      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004566:	bf00      	nop
 8004568:	e004      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;   
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004572:	bf00      	nop
    }
  } 
  
  return status; 
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop

08004584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a32      	ldr	r2, [pc, #200]	@ (8004668 <HAL_GPIO_Init+0xe4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d017      	beq.n	80045d2 <HAL_GPIO_Init+0x4e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a31      	ldr	r2, [pc, #196]	@ (800466c <HAL_GPIO_Init+0xe8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <HAL_GPIO_Init+0x4e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a30      	ldr	r2, [pc, #192]	@ (8004670 <HAL_GPIO_Init+0xec>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <HAL_GPIO_Init+0x4e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004674 <HAL_GPIO_Init+0xf0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00b      	beq.n	80045d2 <HAL_GPIO_Init+0x4e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004678 <HAL_GPIO_Init+0xf4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d007      	beq.n	80045d2 <HAL_GPIO_Init+0x4e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2d      	ldr	r2, [pc, #180]	@ (800467c <HAL_GPIO_Init+0xf8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x4e>
 80045ca:	21ac      	movs	r1, #172	@ 0xac
 80045cc:	482c      	ldr	r0, [pc, #176]	@ (8004680 <HAL_GPIO_Init+0xfc>)
 80045ce:	f7fe fd49 	bl	8003064 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <HAL_GPIO_Init+0x62>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e4:	d303      	bcc.n	80045ee <HAL_GPIO_Init+0x6a>
 80045e6:	21ad      	movs	r1, #173	@ 0xad
 80045e8:	4825      	ldr	r0, [pc, #148]	@ (8004680 <HAL_GPIO_Init+0xfc>)
 80045ea:	f7fe fd3b 	bl	8003064 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d035      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d031      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b11      	cmp	r3, #17
 8004604:	d02d      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d029      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b12      	cmp	r3, #18
 8004614:	d025      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800461e:	d020      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004628:	d01b      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8004632:	d016      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800463c:	d011      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8004646:	d00c      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8004650:	d007      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0xde>
 800465a:	21ae      	movs	r1, #174	@ 0xae
 800465c:	4808      	ldr	r0, [pc, #32]	@ (8004680 <HAL_GPIO_Init+0xfc>)
 800465e:	f7fe fd01 	bl	8003064 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	e20b      	b.n	8004a80 <HAL_GPIO_Init+0x4fc>
 8004668:	40020000 	.word	0x40020000
 800466c:	40020400 	.word	0x40020400
 8004670:	40020800 	.word	0x40020800
 8004674:	40020c00 	.word	0x40020c00
 8004678:	40021000 	.word	0x40021000
 800467c:	40021c00 	.word	0x40021c00
 8004680:	08011a3c 	.word	0x08011a3c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004684:	2201      	movs	r2, #1
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	f040 81ec 	bne.w	8004a7a <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d005      	beq.n	80046ba <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d144      	bne.n	8004744 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00f      	beq.n	80046e2 <HAL_GPIO_Init+0x15e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d00b      	beq.n	80046e2 <HAL_GPIO_Init+0x15e>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d007      	beq.n	80046e2 <HAL_GPIO_Init+0x15e>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x15e>
 80046da:	21c0      	movs	r1, #192	@ 0xc0
 80046dc:	4884      	ldr	r0, [pc, #528]	@ (80048f0 <HAL_GPIO_Init+0x36c>)
 80046de:	f7fe fcc1 	bl	8003064 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004718:	2201      	movs	r2, #1
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 0201 	and.w	r2, r3, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d027      	beq.n	80047a0 <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_GPIO_Init+0x1ec>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d007      	beq.n	8004770 <HAL_GPIO_Init+0x1ec>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x1ec>
 8004768:	21d1      	movs	r1, #209	@ 0xd1
 800476a:	4861      	ldr	r0, [pc, #388]	@ (80048f0 <HAL_GPIO_Init+0x36c>)
 800476c:	f7fe fc7a 	bl	8003064 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	2203      	movs	r2, #3
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	f040 80a3 	bne.w	80048f4 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d077      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b09      	cmp	r3, #9
 80047bc:	d073      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d06f      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d06b      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d067      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d063      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d05f      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d05b      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d057      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d053      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d04f      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d04b      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d047      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d043      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b05      	cmp	r3, #5
 8004824:	d03f      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b05      	cmp	r3, #5
 800482c:	d03b      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d037      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b06      	cmp	r3, #6
 800483c:	d033      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d02f      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b05      	cmp	r3, #5
 800484c:	d02b      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b06      	cmp	r3, #6
 8004854:	d027      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b07      	cmp	r3, #7
 800485c:	d023      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b07      	cmp	r3, #7
 8004864:	d01f      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b07      	cmp	r3, #7
 800486c:	d01b      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b08      	cmp	r3, #8
 8004874:	d017      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b0a      	cmp	r3, #10
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b09      	cmp	r3, #9
 8004884:	d00f      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b09      	cmp	r3, #9
 800488c:	d00b      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b0c      	cmp	r3, #12
 8004894:	d007      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x322>
 800489e:	21de      	movs	r1, #222	@ 0xde
 80048a0:	4813      	ldr	r0, [pc, #76]	@ (80048f0 <HAL_GPIO_Init+0x36c>)
 80048a2:	f7fe fbdf 	bl	8003064 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	08da      	lsrs	r2, r3, #3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3208      	adds	r2, #8
 80048ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	220f      	movs	r2, #15
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	08da      	lsrs	r2, r3, #3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3208      	adds	r2, #8
 80048e8:	69b9      	ldr	r1, [r7, #24]
 80048ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80048ee:	e001      	b.n	80048f4 <HAL_GPIO_Init+0x370>
 80048f0:	08011a3c 	.word	0x08011a3c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a2 	beq.w	8004a7a <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4b56      	ldr	r3, [pc, #344]	@ (8004a94 <HAL_GPIO_Init+0x510>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	4a55      	ldr	r2, [pc, #340]	@ (8004a94 <HAL_GPIO_Init+0x510>)
 8004940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004944:	6453      	str	r3, [r2, #68]	@ 0x44
 8004946:	4b53      	ldr	r3, [pc, #332]	@ (8004a94 <HAL_GPIO_Init+0x510>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004952:	4a51      	ldr	r2, [pc, #324]	@ (8004a98 <HAL_GPIO_Init+0x514>)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	3302      	adds	r3, #2
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a48      	ldr	r2, [pc, #288]	@ (8004a9c <HAL_GPIO_Init+0x518>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d019      	beq.n	80049b2 <HAL_GPIO_Init+0x42e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a47      	ldr	r2, [pc, #284]	@ (8004aa0 <HAL_GPIO_Init+0x51c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_GPIO_Init+0x42a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a46      	ldr	r2, [pc, #280]	@ (8004aa4 <HAL_GPIO_Init+0x520>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00d      	beq.n	80049aa <HAL_GPIO_Init+0x426>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a45      	ldr	r2, [pc, #276]	@ (8004aa8 <HAL_GPIO_Init+0x524>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <HAL_GPIO_Init+0x422>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a44      	ldr	r2, [pc, #272]	@ (8004aac <HAL_GPIO_Init+0x528>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <HAL_GPIO_Init+0x41e>
 800499e:	2304      	movs	r3, #4
 80049a0:	e008      	b.n	80049b4 <HAL_GPIO_Init+0x430>
 80049a2:	2307      	movs	r3, #7
 80049a4:	e006      	b.n	80049b4 <HAL_GPIO_Init+0x430>
 80049a6:	2303      	movs	r3, #3
 80049a8:	e004      	b.n	80049b4 <HAL_GPIO_Init+0x430>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e002      	b.n	80049b4 <HAL_GPIO_Init+0x430>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_GPIO_Init+0x430>
 80049b2:	2300      	movs	r3, #0
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	f002 0203 	and.w	r2, r2, #3
 80049ba:	0092      	lsls	r2, r2, #2
 80049bc:	4093      	lsls	r3, r2
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049c4:	4934      	ldr	r1, [pc, #208]	@ (8004a98 <HAL_GPIO_Init+0x514>)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	3302      	adds	r3, #2
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049d2:	4b37      	ldr	r3, [pc, #220]	@ (8004ab0 <HAL_GPIO_Init+0x52c>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049f6:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab0 <HAL_GPIO_Init+0x52c>)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049fc:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab0 <HAL_GPIO_Init+0x52c>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a20:	4a23      	ldr	r2, [pc, #140]	@ (8004ab0 <HAL_GPIO_Init+0x52c>)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a26:	4b22      	ldr	r3, [pc, #136]	@ (8004ab0 <HAL_GPIO_Init+0x52c>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a4a:	4a19      	ldr	r2, [pc, #100]	@ (8004ab0 <HAL_GPIO_Init+0x52c>)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a50:	4b17      	ldr	r3, [pc, #92]	@ (8004ab0 <HAL_GPIO_Init+0x52c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a74:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab0 <HAL_GPIO_Init+0x52c>)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	f67f adfe 	bls.w	8004684 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40013800 	.word	0x40013800
 8004a9c:	40020000 	.word	0x40020000
 8004aa0:	40020400 	.word	0x40020400
 8004aa4:	40020800 	.word	0x40020800
 8004aa8:	40020c00 	.word	0x40020c00
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40013c00 	.word	0x40013c00

08004ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004ac0:	887b      	ldrh	r3, [r7, #2]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <HAL_GPIO_ReadPin+0x1c>
 8004ac6:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8004aca:	4809      	ldr	r0, [pc, #36]	@ (8004af0 <HAL_GPIO_ReadPin+0x3c>)
 8004acc:	f7fe faca 	bl	8003064 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	887b      	ldrh	r3, [r7, #2]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
 8004ae0:	e001      	b.n	8004ae6 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	08011a3c 	.word	0x08011a3c

08004af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	807b      	strh	r3, [r7, #2]
 8004b00:	4613      	mov	r3, r2
 8004b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004b04:	887b      	ldrh	r3, [r7, #2]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <HAL_GPIO_WritePin+0x20>
 8004b0a:	f240 119d 	movw	r1, #413	@ 0x19d
 8004b0e:	480e      	ldr	r0, [pc, #56]	@ (8004b48 <HAL_GPIO_WritePin+0x54>)
 8004b10:	f7fe faa8 	bl	8003064 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004b14:	787b      	ldrb	r3, [r7, #1]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <HAL_GPIO_WritePin+0x36>
 8004b1a:	787b      	ldrb	r3, [r7, #1]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d004      	beq.n	8004b2a <HAL_GPIO_WritePin+0x36>
 8004b20:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8004b24:	4808      	ldr	r0, [pc, #32]	@ (8004b48 <HAL_GPIO_WritePin+0x54>)
 8004b26:	f7fe fa9d 	bl	8003064 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004b2a:	787b      	ldrb	r3, [r7, #1]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b30:	887a      	ldrh	r2, [r7, #2]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b36:	e003      	b.n	8004b40 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	041a      	lsls	r2, r3, #16
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	619a      	str	r2, [r3, #24]
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	08011a3c 	.word	0x08011a3c

08004b4c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e062      	b.n	8004c24 <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b66:	d003      	beq.n	8004b70 <HAL_HCD_Init+0x24>
 8004b68:	217b      	movs	r1, #123	@ 0x7b
 8004b6a:	4830      	ldr	r0, [pc, #192]	@ (8004c2c <HAL_HCD_Init+0xe0>)
 8004b6c:	f7fe fa7a 	bl	8003064 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f009 fc14 	bl	800e3b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b9e:	d102      	bne.n	8004ba6 <HAL_HCD_Init+0x5a>
  {
    hhcd->Init.dma_enable = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f006 facb 	bl	800b146 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7c1a      	ldrb	r2, [r3, #16]
 8004bb8:	f88d 2000 	strb.w	r2, [sp]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc0:	f006 fa4c 	bl	800b05c <USB_CoreInit>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_HCD_Init+0x8a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e026      	b.n	8004c24 <HAL_HCD_Init+0xd8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f006 fac3 	bl	800b168 <USB_SetCurrentMode>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e017      	b.n	8004c24 <HAL_HCD_Init+0xd8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	7c1a      	ldrb	r2, [r3, #16]
 8004bfc:	f88d 2000 	strb.w	r2, [sp]
 8004c00:	3304      	adds	r3, #4
 8004c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c04:	f006 fc66 	bl	800b4d4 <USB_HostInit>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_HCD_Init+0xce>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e004      	b.n	8004c24 <HAL_HCD_Init+0xd8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	08011a78 	.word	0x08011a78

08004c30 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b08b      	sub	sp, #44	@ 0x2c
 8004c34:	af04      	add	r7, sp, #16
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	70fb      	strb	r3, [r7, #3]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70bb      	strb	r3, [r7, #2]
 8004c46:	4613      	mov	r3, r2
 8004c48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004c4a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c4c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_HCD_HC_Init+0x2c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e09d      	b.n	8004d98 <HAL_HCD_HC_Init+0x168>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3319      	adds	r3, #25
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3314      	adds	r3, #20
 8004c88:	787a      	ldrb	r2, [r7, #1]
 8004c8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	3315      	adds	r3, #21
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	3326      	adds	r3, #38	@ 0x26
 8004cb0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004cb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	78bb      	ldrb	r3, [r7, #2]
 8004cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cbe:	b2d8      	uxtb	r0, r3
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3316      	adds	r3, #22
 8004cce:	4602      	mov	r2, r0
 8004cd0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fbc8 	bl	800546c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004cdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	da0a      	bge.n	8004cfa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	3317      	adds	r3, #23
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	e009      	b.n	8004d0e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	3317      	adds	r3, #23
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f006 fd2c 	bl	800b770 <USB_GetHostSpeed>
 8004d18:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004d1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10b      	bne.n	8004d3a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004d22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <HAL_HCD_HC_Init+0x10a>
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2bbc      	cmp	r3, #188	@ 0xbc
 8004d34:	d901      	bls.n	8004d3a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004d36:	23bc      	movs	r3, #188	@ 0xbc
 8004d38:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3318      	adds	r3, #24
 8004d4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	b298      	uxth	r0, r3
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	3328      	adds	r3, #40	@ 0x28
 8004d64:	4602      	mov	r2, r0
 8004d66:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	787c      	ldrb	r4, [r7, #1]
 8004d72:	78ba      	ldrb	r2, [r7, #2]
 8004d74:	78f9      	ldrb	r1, [r7, #3]
 8004d76:	9302      	str	r3, [sp, #8]
 8004d78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	4623      	mov	r3, r4
 8004d86:	f006 fd1b 	bl	800b7c0 <USB_HC_Init>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd90      	pop	{r4, r7, pc}

08004da0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_HCD_HC_Halt+0x1e>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e00f      	b.n	8004dde <HAL_HCD_HC_Halt+0x3e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f007 f861 	bl	800be96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	4608      	mov	r0, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	461a      	mov	r2, r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	70fb      	strb	r3, [r7, #3]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	70bb      	strb	r3, [r7, #2]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3317      	adds	r3, #23
 8004e12:	78ba      	ldrb	r2, [r7, #2]
 8004e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	3326      	adds	r3, #38	@ 0x26
 8004e26:	787a      	ldrb	r2, [r7, #1]
 8004e28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004e2a:	7c3b      	ldrb	r3, [r7, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d114      	bne.n	8004e5a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4613      	mov	r3, r2
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	332a      	adds	r3, #42	@ 0x2a
 8004e40:	2203      	movs	r2, #3
 8004e42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	3319      	adds	r3, #25
 8004e54:	7f3a      	ldrb	r2, [r7, #28]
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e009      	b.n	8004e6e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	332a      	adds	r3, #42	@ 0x2a
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004e6e:	787b      	ldrb	r3, [r7, #1]
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	f200 8102 	bhi.w	800507a <HAL_HCD_HC_SubmitRequest+0x292>
 8004e76:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <HAL_HCD_HC_SubmitRequest+0x94>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08005065 	.word	0x08005065
 8004e84:	08004f51 	.word	0x08004f51
 8004e88:	08004fdb 	.word	0x08004fdb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004e8c:	7c3b      	ldrb	r3, [r7, #16]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	f040 80f5 	bne.w	800507e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004e94:	78bb      	ldrb	r3, [r7, #2]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d12d      	bne.n	8004ef6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004e9a:	8b3b      	ldrh	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d109      	bne.n	8004eb4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	333d      	adds	r3, #61	@ 0x3d
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	333d      	adds	r3, #61	@ 0x3d
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	332a      	adds	r3, #42	@ 0x2a
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004ede:	e0ce      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	332a      	adds	r3, #42	@ 0x2a
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	701a      	strb	r2, [r3, #0]
      break;
 8004ef4:	e0c3      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	331a      	adds	r3, #26
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	f040 80b8 	bne.w	800507e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	333c      	adds	r3, #60	@ 0x3c
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	332a      	adds	r3, #42	@ 0x2a
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
      break;
 8004f38:	e0a1      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	332a      	adds	r3, #42	@ 0x2a
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	701a      	strb	r2, [r3, #0]
      break;
 8004f4e:	e096      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004f50:	78bb      	ldrb	r3, [r7, #2]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d120      	bne.n	8004f98 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	333d      	adds	r3, #61	@ 0x3d
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	332a      	adds	r3, #42	@ 0x2a
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004f80:	e07e      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	332a      	adds	r3, #42	@ 0x2a
 8004f92:	2202      	movs	r2, #2
 8004f94:	701a      	strb	r2, [r3, #0]
      break;
 8004f96:	e073      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	333c      	adds	r3, #60	@ 0x3c
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	332a      	adds	r3, #42	@ 0x2a
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
      break;
 8004fc2:	e05d      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	332a      	adds	r3, #42	@ 0x2a
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	701a      	strb	r2, [r3, #0]
      break;
 8004fd8:	e052      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004fda:	78bb      	ldrb	r3, [r7, #2]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d120      	bne.n	8005022 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	333d      	adds	r3, #61	@ 0x3d
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	332a      	adds	r3, #42	@ 0x2a
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800500a:	e039      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	332a      	adds	r3, #42	@ 0x2a
 800501c:	2202      	movs	r2, #2
 800501e:	701a      	strb	r2, [r3, #0]
      break;
 8005020:	e02e      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	333c      	adds	r3, #60	@ 0x3c
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	332a      	adds	r3, #42	@ 0x2a
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
      break;
 800504c:	e018      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	332a      	adds	r3, #42	@ 0x2a
 800505e:	2202      	movs	r2, #2
 8005060:	701a      	strb	r2, [r3, #0]
      break;
 8005062:	e00d      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	332a      	adds	r3, #42	@ 0x2a
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
      break;
 8005078:	e002      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800507e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	332c      	adds	r3, #44	@ 0x2c
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	8b39      	ldrh	r1, [r7, #24]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4403      	add	r3, r0
 80050a4:	3334      	adds	r3, #52	@ 0x34
 80050a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	334c      	adds	r3, #76	@ 0x4c
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80050bc:	78fa      	ldrb	r2, [r7, #3]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	3338      	adds	r3, #56	@ 0x38
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	3315      	adds	r3, #21
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	334d      	adds	r3, #77	@ 0x4d
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	3310      	adds	r3, #16
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	1d19      	adds	r1, r3, #4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	799b      	ldrb	r3, [r3, #6]
 8005112:	461a      	mov	r2, r3
 8005114:	f006 fc6a 	bl	800b9ec <USB_HC_StartXfer>
 8005118:	4603      	mov	r3, r0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop

08005124 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f006 f98a 	bl	800b454 <USB_GetMode>
 8005140:	4603      	mov	r3, r0
 8005142:	2b01      	cmp	r3, #1
 8005144:	f040 80fb 	bne.w	800533e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f006 f94d 	bl	800b3ec <USB_ReadInterrupts>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80f1 	beq.w	800533c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f006 f944 	bl	800b3ec <USB_ReadInterrupts>
 8005164:	4603      	mov	r3, r0
 8005166:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800516a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800516e:	d104      	bne.n	800517a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005178:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f006 f934 	bl	800b3ec <USB_ReadInterrupts>
 8005184:	4603      	mov	r3, r0
 8005186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800518a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800518e:	d104      	bne.n	800519a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005198:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f006 f924 	bl	800b3ec <USB_ReadInterrupts>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051ae:	d104      	bne.n	80051ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80051b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f006 f914 	bl	800b3ec <USB_ReadInterrupts>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d103      	bne.n	80051d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2202      	movs	r2, #2
 80051d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f006 f906 	bl	800b3ec <USB_ReadInterrupts>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ea:	d120      	bne.n	800522e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80051f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d113      	bne.n	800522e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005206:	2110      	movs	r1, #16
 8005208:	6938      	ldr	r0, [r7, #16]
 800520a:	f005 fff9 	bl	800b200 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800520e:	6938      	ldr	r0, [r7, #16]
 8005210:	f006 f828 	bl	800b264 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	7a5b      	ldrb	r3, [r3, #9]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d105      	bne.n	8005228 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2101      	movs	r1, #1
 8005222:	4618      	mov	r0, r3
 8005224:	f006 fa04 	bl	800b630 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f009 f935 	bl	800e498 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f006 f8da 	bl	800b3ec <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800523e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005242:	d102      	bne.n	800524a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f001 fd4d 	bl	8006ce4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f006 f8cc 	bl	800b3ec <USB_ReadInterrupts>
 8005254:	4603      	mov	r3, r0
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b08      	cmp	r3, #8
 800525c:	d106      	bne.n	800526c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f009 f8fe 	bl	800e460 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2208      	movs	r2, #8
 800526a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f006 f8bb 	bl	800b3ec <USB_ReadInterrupts>
 8005276:	4603      	mov	r3, r0
 8005278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005280:	d139      	bne.n	80052f6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f006 fdf4 	bl	800be74 <USB_HC_ReadInterrupt>
 800528c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e025      	b.n	80052e0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d018      	beq.n	80052da <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052be:	d106      	bne.n	80052ce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f905 	bl	80054d6 <HCD_HC_IN_IRQHandler>
 80052cc:	e005      	b.n	80052da <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 ff67 	bl	80061a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	3301      	adds	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	795b      	ldrb	r3, [r3, #5]
 80052e4:	461a      	mov	r2, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d3d3      	bcc.n	8005294 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f006 f876 	bl	800b3ec <USB_ReadInterrupts>
 8005300:	4603      	mov	r3, r0
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b10      	cmp	r3, #16
 8005308:	d101      	bne.n	800530e <HAL_HCD_IRQHandler+0x1ea>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_HCD_IRQHandler+0x1ec>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d014      	beq.n	800533e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0210 	bic.w	r2, r2, #16
 8005322:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 fbfe 	bl	8006b26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0210 	orr.w	r2, r2, #16
 8005338:	619a      	str	r2, [r3, #24]
 800533a:	e000      	b.n	800533e <HAL_HCD_IRQHandler+0x21a>
      return;
 800533c:	bf00      	nop
    }
  }
}
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_HCD_Start+0x16>
 8005356:	2302      	movs	r3, #2
 8005358:	e013      	b.n	8005382 <HAL_HCD_Start+0x3e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f006 f9c8 	bl	800b6fe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f005 fed6 	bl	800b124 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_HCD_Stop+0x16>
 800539c:	2302      	movs	r3, #2
 800539e:	e00d      	b.n	80053bc <HAL_HCD_Stop+0x32>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f006 fe92 	bl	800c0d6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f006 f96a 	bl	800b6aa <USB_ResetPort>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	334c      	adds	r3, #76	@ 0x4c
 80053fc:	781b      	ldrb	r3, [r3, #0]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	3338      	adds	r3, #56	@ 0x38
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f006 f9ac 	bl	800b79e <USB_GetCurrentFrame>
 8005446:	4603      	mov	r3, r0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f006 f987 	bl	800b770 <USB_GetHostSpeed>
 8005462:	4603      	mov	r3, r0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	331a      	adds	r3, #26
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800548c:	78fa      	ldrb	r2, [r7, #3]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	331b      	adds	r3, #27
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80054a0:	78fa      	ldrb	r2, [r7, #3]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	3325      	adds	r3, #37	@ 0x25
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	3324      	adds	r3, #36	@ 0x24
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b086      	sub	sp, #24
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	78fa      	ldrb	r2, [r7, #3]
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f005 ff8c 	bl	800b412 <USB_ReadChInterrupts>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d11a      	bne.n	800553a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005510:	461a      	mov	r2, r3
 8005512:	2304      	movs	r3, #4
 8005514:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	334d      	adds	r3, #77	@ 0x4d
 8005526:	2207      	movs	r2, #7
 8005528:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	78fa      	ldrb	r2, [r7, #3]
 8005530:	4611      	mov	r1, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f006 fcaf 	bl	800be96 <USB_HC_Halt>
 8005538:	e09e      	b.n	8005678 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	4611      	mov	r1, r2
 8005542:	4618      	mov	r0, r3
 8005544:	f005 ff65 	bl	800b412 <USB_ReadChInterrupts>
 8005548:	4603      	mov	r3, r0
 800554a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005552:	d11b      	bne.n	800558c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005560:	461a      	mov	r2, r3
 8005562:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005566:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	334d      	adds	r3, #77	@ 0x4d
 8005578:	2208      	movs	r2, #8
 800557a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	4611      	mov	r1, r2
 8005584:	4618      	mov	r0, r3
 8005586:	f006 fc86 	bl	800be96 <USB_HC_Halt>
 800558a:	e075      	b.n	8005678 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	78fa      	ldrb	r2, [r7, #3]
 8005592:	4611      	mov	r1, r2
 8005594:	4618      	mov	r0, r3
 8005596:	f005 ff3c 	bl	800b412 <USB_ReadChInterrupts>
 800559a:	4603      	mov	r3, r0
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d11a      	bne.n	80055da <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b0:	461a      	mov	r2, r3
 80055b2:	2308      	movs	r3, #8
 80055b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	334d      	adds	r3, #77	@ 0x4d
 80055c6:	2206      	movs	r2, #6
 80055c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f006 fc5f 	bl	800be96 <USB_HC_Halt>
 80055d8:	e04e      	b.n	8005678 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f005 ff15 	bl	800b412 <USB_ReadChInterrupts>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f2:	d11b      	bne.n	800562c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005600:	461a      	mov	r2, r3
 8005602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005606:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	334d      	adds	r3, #77	@ 0x4d
 8005618:	2209      	movs	r2, #9
 800561a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f006 fc36 	bl	800be96 <USB_HC_Halt>
 800562a:	e025      	b.n	8005678 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f005 feec 	bl	800b412 <USB_ReadChInterrupts>
 800563a:	4603      	mov	r3, r0
 800563c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005640:	2b80      	cmp	r3, #128	@ 0x80
 8005642:	d119      	bne.n	8005678 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005650:	461a      	mov	r2, r3
 8005652:	2380      	movs	r3, #128	@ 0x80
 8005654:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005656:	78fa      	ldrb	r2, [r7, #3]
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	334d      	adds	r3, #77	@ 0x4d
 8005666:	2207      	movs	r2, #7
 8005668:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f006 fc0f 	bl	800be96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f005 fec6 	bl	800b412 <USB_ReadChInterrupts>
 8005686:	4603      	mov	r3, r0
 8005688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005690:	d112      	bne.n	80056b8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f006 fbfb 	bl	800be96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ac:	461a      	mov	r2, r3
 80056ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056b2:	6093      	str	r3, [r2, #8]
 80056b4:	f000 bd75 	b.w	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f005 fea6 	bl	800b412 <USB_ReadChInterrupts>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	f040 8128 	bne.w	8005922 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056de:	461a      	mov	r2, r3
 80056e0:	2320      	movs	r3, #32
 80056e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80056e4:	78fa      	ldrb	r2, [r7, #3]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	331b      	adds	r3, #27
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d119      	bne.n	800572e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	331b      	adds	r3, #27
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	440a      	add	r2, r1
 8005724:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	799b      	ldrb	r3, [r3, #6]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01b      	beq.n	800576e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005736:	78fa      	ldrb	r2, [r7, #3]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	3330      	adds	r3, #48	@ 0x30
 8005746:	6819      	ldr	r1, [r3, #0]
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4413      	add	r3, r2
 8005750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	78fa      	ldrb	r2, [r7, #3]
 800575c:	1ac9      	subs	r1, r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4403      	add	r3, r0
 800576a:	3338      	adds	r3, #56	@ 0x38
 800576c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800576e:	78fa      	ldrb	r2, [r7, #3]
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	334d      	adds	r3, #77	@ 0x4d
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3344      	adds	r3, #68	@ 0x44
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4413      	add	r3, r2
 800579e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a2:	461a      	mov	r2, r3
 80057a4:	2301      	movs	r3, #1
 80057a6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	3326      	adds	r3, #38	@ 0x26
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	1a9b      	subs	r3, r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3326      	adds	r3, #38	@ 0x26
 80057ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d110      	bne.n	80057f6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f006 fb5a 	bl	800be96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ee:	461a      	mov	r2, r3
 80057f0:	2310      	movs	r3, #16
 80057f2:	6093      	str	r3, [r2, #8]
 80057f4:	e03d      	b.n	8005872 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	3326      	adds	r3, #38	@ 0x26
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d00a      	beq.n	8005822 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	3326      	adds	r3, #38	@ 0x26
 800581c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800581e:	2b01      	cmp	r3, #1
 8005820:	d127      	bne.n	8005872 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	440a      	add	r2, r1
 8005838:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800583c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005840:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	334c      	adds	r3, #76	@ 0x4c
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	334c      	adds	r3, #76	@ 0x4c
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f008 fe21 	bl	800e4b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	799b      	ldrb	r3, [r3, #6]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d13b      	bne.n	80058f2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800587a:	78fa      	ldrb	r2, [r7, #3]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3338      	adds	r3, #56	@ 0x38
 800588a:	6819      	ldr	r1, [r3, #0]
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4403      	add	r3, r0
 800589a:	3328      	adds	r3, #40	@ 0x28
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	440b      	add	r3, r1
 80058a0:	1e59      	subs	r1, r3, #1
 80058a2:	78fa      	ldrb	r2, [r7, #3]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4403      	add	r3, r0
 80058b0:	3328      	adds	r3, #40	@ 0x28
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8470 	beq.w	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80058c2:	78fa      	ldrb	r2, [r7, #3]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	333c      	adds	r3, #60	@ 0x3c
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	f083 0301 	eor.w	r3, r3, #1
 80058da:	b2d8      	uxtb	r0, r3
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	333c      	adds	r3, #60	@ 0x3c
 80058ea:	4602      	mov	r2, r0
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	f000 bc58 	b.w	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	333c      	adds	r3, #60	@ 0x3c
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	f083 0301 	eor.w	r3, r3, #1
 800590a:	b2d8      	uxtb	r0, r3
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	333c      	adds	r3, #60	@ 0x3c
 800591a:	4602      	mov	r2, r0
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	f000 bc40 	b.w	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f005 fd71 	bl	800b412 <USB_ReadChInterrupts>
 8005930:	4603      	mov	r3, r0
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b20      	cmp	r3, #32
 8005938:	d131      	bne.n	800599e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005946:	461a      	mov	r2, r3
 8005948:	2320      	movs	r3, #32
 800594a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	331a      	adds	r3, #26
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	f040 841f 	bne.w	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005964:	78fa      	ldrb	r2, [r7, #3]
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	1a9b      	subs	r3, r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	331b      	adds	r3, #27
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	4613      	mov	r3, r2
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	334d      	adds	r3, #77	@ 0x4d
 8005988:	2203      	movs	r2, #3
 800598a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f006 fa7e 	bl	800be96 <USB_HC_Halt>
 800599a:	f000 bc02 	b.w	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	78fa      	ldrb	r2, [r7, #3]
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f005 fd33 	bl	800b412 <USB_ReadChInterrupts>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	f040 8305 	bne.w	8005fc2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c4:	461a      	mov	r2, r3
 80059c6:	2302      	movs	r3, #2
 80059c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	334d      	adds	r3, #77	@ 0x4d
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d114      	bne.n	8005a0a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	334d      	adds	r3, #77	@ 0x4d
 80059f0:	2202      	movs	r2, #2
 80059f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	334c      	adds	r3, #76	@ 0x4c
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e2cc      	b.n	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005a0a:	78fa      	ldrb	r2, [r7, #3]
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	334d      	adds	r3, #77	@ 0x4d
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b06      	cmp	r3, #6
 8005a1e:	d114      	bne.n	8005a4a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a20:	78fa      	ldrb	r2, [r7, #3]
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	334d      	adds	r3, #77	@ 0x4d
 8005a30:	2202      	movs	r2, #2
 8005a32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	334c      	adds	r3, #76	@ 0x4c
 8005a44:	2205      	movs	r2, #5
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e2ac      	b.n	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	334d      	adds	r3, #77	@ 0x4d
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b07      	cmp	r3, #7
 8005a5e:	d00b      	beq.n	8005a78 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	334d      	adds	r3, #77	@ 0x4d
 8005a70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005a72:	2b09      	cmp	r3, #9
 8005a74:	f040 80a6 	bne.w	8005bc4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	334d      	adds	r3, #77	@ 0x4d
 8005a88:	2202      	movs	r2, #2
 8005a8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	3344      	adds	r3, #68	@ 0x44
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4403      	add	r3, r0
 8005aac:	3344      	adds	r3, #68	@ 0x44
 8005aae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	3344      	adds	r3, #68	@ 0x44
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d943      	bls.n	8005b4e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3344      	adds	r3, #68	@ 0x44
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005ada:	78fa      	ldrb	r2, [r7, #3]
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	331a      	adds	r3, #26
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d123      	bne.n	8005b38 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	331b      	adds	r3, #27
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	331c      	adds	r3, #28
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b36:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	334c      	adds	r3, #76	@ 0x4c
 8005b48:	2204      	movs	r2, #4
 8005b4a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b4c:	e229      	b.n	8005fa2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	334c      	adds	r3, #76	@ 0x4c
 8005b5e:	2202      	movs	r2, #2
 8005b60:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	3326      	adds	r3, #38	@ 0x26
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b78:	78fa      	ldrb	r2, [r7, #3]
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	3326      	adds	r3, #38	@ 0x26
 8005b88:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	f040 8209 	bne.w	8005fa2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ba6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bc2:	e1ee      	b.n	8005fa2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	334d      	adds	r3, #77	@ 0x4d
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	f040 80c8 	bne.w	8005d6c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	334d      	adds	r3, #77	@ 0x4d
 8005bec:	2202      	movs	r2, #2
 8005bee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	331b      	adds	r3, #27
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	f040 81ce 	bne.w	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	3326      	adds	r3, #38	@ 0x26
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d16b      	bne.n	8005cf6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3348      	adds	r3, #72	@ 0x48
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	1c59      	adds	r1, r3, #1
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4403      	add	r3, r0
 8005c3e:	3348      	adds	r3, #72	@ 0x48
 8005c40:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	3348      	adds	r3, #72	@ 0x48
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d943      	bls.n	8005ce0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	3348      	adds	r3, #72	@ 0x48
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	4613      	mov	r3, r2
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	331b      	adds	r3, #27
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	3344      	adds	r3, #68	@ 0x44
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d809      	bhi.n	8005caa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	331c      	adds	r3, #28
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	334c      	adds	r3, #76	@ 0x4c
 8005cda:	2204      	movs	r2, #4
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e014      	b.n	8005d0a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	334c      	adds	r3, #76	@ 0x4c
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e009      	b.n	8005d0a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	334c      	adds	r3, #76	@ 0x4c
 8005d06:	2202      	movs	r2, #2
 8005d08:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	1a9b      	subs	r3, r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3326      	adds	r3, #38	@ 0x26
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d20:	78fa      	ldrb	r2, [r7, #3]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3326      	adds	r3, #38	@ 0x26
 8005d30:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	f040 8136 	bne.w	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d4e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d56:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d64:	461a      	mov	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e11b      	b.n	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	334d      	adds	r3, #77	@ 0x4d
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	f040 8081 	bne.w	8005e86 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d84:	78fa      	ldrb	r2, [r7, #3]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	334d      	adds	r3, #77	@ 0x4d
 8005d94:	2202      	movs	r2, #2
 8005d96:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	331b      	adds	r3, #27
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	f040 80fa 	bne.w	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	334c      	adds	r3, #76	@ 0x4c
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	78fa      	ldrb	r2, [r7, #3]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e02:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e1e:	f023 0320 	bic.w	r3, r3, #32
 8005e22:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	3326      	adds	r3, #38	@ 0x26
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	3326      	adds	r3, #38	@ 0x26
 8005e4a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	f040 80a9 	bne.w	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e68:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e70:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	e08e      	b.n	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	334d      	adds	r3, #77	@ 0x4d
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d143      	bne.n	8005f24 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	334d      	adds	r3, #77	@ 0x4d
 8005eac:	2202      	movs	r2, #2
 8005eae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	334c      	adds	r3, #76	@ 0x4c
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	3326      	adds	r3, #38	@ 0x26
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	3326      	adds	r3, #38	@ 0x26
 8005eea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d159      	bne.n	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f06:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f0e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e03f      	b.n	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	334d      	adds	r3, #77	@ 0x4d
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d126      	bne.n	8005f88 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	440b      	add	r3, r1
 8005f48:	334d      	adds	r3, #77	@ 0x4d
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005f4e:	78fa      	ldrb	r2, [r7, #3]
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	3344      	adds	r3, #68	@ 0x44
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4403      	add	r3, r0
 8005f6e:	3344      	adds	r3, #68	@ 0x44
 8005f70:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005f72:	78fa      	ldrb	r2, [r7, #3]
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	334c      	adds	r3, #76	@ 0x4c
 8005f82:	2204      	movs	r2, #4
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e00d      	b.n	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	334d      	adds	r3, #77	@ 0x4d
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	f000 8100 	beq.w	80061a0 <HCD_HC_IN_IRQHandler+0xcca>
 8005fa0:	e000      	b.n	8005fa4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fa2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	334c      	adds	r3, #76	@ 0x4c
 8005fb4:	781a      	ldrb	r2, [r3, #0]
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f008 fa7a 	bl	800e4b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005fc0:	e0ef      	b.n	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f005 fa21 	bl	800b412 <USB_ReadChInterrupts>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b40      	cmp	r3, #64	@ 0x40
 8005fd8:	d12f      	bne.n	800603a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2340      	movs	r3, #64	@ 0x40
 8005fea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	334d      	adds	r3, #77	@ 0x4d
 8005ffc:	2205      	movs	r2, #5
 8005ffe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	331a      	adds	r3, #26
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	3344      	adds	r3, #68	@ 0x44
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	4611      	mov	r1, r2
 8006032:	4618      	mov	r0, r3
 8006034:	f005 ff2f 	bl	800be96 <USB_HC_Halt>
 8006038:	e0b3      	b.n	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	4611      	mov	r1, r2
 8006042:	4618      	mov	r0, r3
 8006044:	f005 f9e5 	bl	800b412 <USB_ReadChInterrupts>
 8006048:	4603      	mov	r3, r0
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b10      	cmp	r3, #16
 8006050:	f040 80a7 	bne.w	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006054:	78fa      	ldrb	r2, [r7, #3]
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	3326      	adds	r3, #38	@ 0x26
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d11b      	bne.n	80060a2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	3344      	adds	r3, #68	@ 0x44
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800607e:	78fa      	ldrb	r2, [r7, #3]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	334d      	adds	r3, #77	@ 0x4d
 800608e:	2204      	movs	r2, #4
 8006090:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	78fa      	ldrb	r2, [r7, #3]
 8006098:	4611      	mov	r1, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f005 fefb 	bl	800be96 <USB_HC_Halt>
 80060a0:	e03f      	b.n	8006122 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3326      	adds	r3, #38	@ 0x26
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	3326      	adds	r3, #38	@ 0x26
 80060c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d129      	bne.n	8006122 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80060ce:	78fa      	ldrb	r2, [r7, #3]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	3344      	adds	r3, #68	@ 0x44
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	799b      	ldrb	r3, [r3, #6]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HCD_HC_IN_IRQHandler+0xc2a>
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	331b      	adds	r3, #27
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d110      	bne.n	8006122 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	334d      	adds	r3, #77	@ 0x4d
 8006110:	2204      	movs	r2, #4
 8006112:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	78fa      	ldrb	r2, [r7, #3]
 800611a:	4611      	mov	r1, r2
 800611c:	4618      	mov	r0, r3
 800611e:	f005 feba 	bl	800be96 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	331b      	adds	r3, #27
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d129      	bne.n	800618c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	331b      	adds	r3, #27
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	78fa      	ldrb	r2, [r7, #3]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	440a      	add	r2, r1
 8006162:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800616a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	440a      	add	r2, r1
 8006182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006186:	f043 0320 	orr.w	r3, r3, #32
 800618a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006198:	461a      	mov	r2, r3
 800619a:	2310      	movs	r3, #16
 800619c:	6093      	str	r3, [r2, #8]
 800619e:	e000      	b.n	80061a2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80061a0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f005 f923 	bl	800b412 <USB_ReadChInterrupts>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d11b      	bne.n	800620e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e2:	461a      	mov	r2, r3
 80061e4:	2304      	movs	r3, #4
 80061e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	334d      	adds	r3, #77	@ 0x4d
 80061f8:	2207      	movs	r2, #7
 80061fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f005 fe46 	bl	800be96 <USB_HC_Halt>
 800620a:	f000 bc89 	b.w	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f005 f8fb 	bl	800b412 <USB_ReadChInterrupts>
 800621c:	4603      	mov	r3, r0
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b20      	cmp	r3, #32
 8006224:	f040 8082 	bne.w	800632c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006234:	461a      	mov	r2, r3
 8006236:	2320      	movs	r3, #32
 8006238:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	3319      	adds	r3, #25
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d124      	bne.n	800629a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	3319      	adds	r3, #25
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4613      	mov	r3, r2
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	334c      	adds	r3, #76	@ 0x4c
 8006274:	2202      	movs	r2, #2
 8006276:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4613      	mov	r3, r2
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	334d      	adds	r3, #77	@ 0x4d
 8006288:	2203      	movs	r2, #3
 800628a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f005 fdfe 	bl	800be96 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800629a:	78fa      	ldrb	r2, [r7, #3]
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	331a      	adds	r3, #26
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 8437 	bne.w	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	331b      	adds	r3, #27
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f040 842b 	bne.w	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3326      	adds	r3, #38	@ 0x26
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d009      	beq.n	80062f4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	331b      	adds	r3, #27
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	334d      	adds	r3, #77	@ 0x4d
 8006304:	2203      	movs	r2, #3
 8006306:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f005 fdc0 	bl	800be96 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3344      	adds	r3, #68	@ 0x44
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e3f9      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f005 f86c 	bl	800b412 <USB_ReadChInterrupts>
 800633a:	4603      	mov	r3, r0
 800633c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006344:	d111      	bne.n	800636a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006352:	461a      	mov	r2, r3
 8006354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006358:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	4611      	mov	r1, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f005 fd97 	bl	800be96 <USB_HC_Halt>
 8006368:	e3da      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f005 f84d 	bl	800b412 <USB_ReadChInterrupts>
 8006378:	4603      	mov	r3, r0
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d168      	bne.n	8006454 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	440b      	add	r3, r1
 8006390:	3344      	adds	r3, #68	@ 0x44
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	78fa      	ldrb	r2, [r7, #3]
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f005 f837 	bl	800b412 <USB_ReadChInterrupts>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063aa:	2b40      	cmp	r3, #64	@ 0x40
 80063ac:	d112      	bne.n	80063d4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80063ae:	78fa      	ldrb	r2, [r7, #3]
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	440b      	add	r3, r1
 80063bc:	3319      	adds	r3, #25
 80063be:	2201      	movs	r2, #1
 80063c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ce:	461a      	mov	r2, r3
 80063d0:	2340      	movs	r3, #64	@ 0x40
 80063d2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4613      	mov	r3, r2
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	331b      	adds	r3, #27
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d019      	beq.n	800641e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80063ea:	78fa      	ldrb	r2, [r7, #3]
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	4613      	mov	r3, r2
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	331b      	adds	r3, #27
 80063fa:	2200      	movs	r2, #0
 80063fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80063fe:	78fb      	ldrb	r3, [r7, #3]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4413      	add	r3, r2
 8006406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	78fa      	ldrb	r2, [r7, #3]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	440a      	add	r2, r1
 8006414:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800641c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800642a:	461a      	mov	r2, r3
 800642c:	2301      	movs	r3, #1
 800642e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006430:	78fa      	ldrb	r2, [r7, #3]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	334d      	adds	r3, #77	@ 0x4d
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	78fa      	ldrb	r2, [r7, #3]
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f005 fd22 	bl	800be96 <USB_HC_Halt>
 8006452:	e365      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	4611      	mov	r1, r2
 800645c:	4618      	mov	r0, r3
 800645e:	f004 ffd8 	bl	800b412 <USB_ReadChInterrupts>
 8006462:	4603      	mov	r3, r0
 8006464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006468:	2b40      	cmp	r3, #64	@ 0x40
 800646a:	d139      	bne.n	80064e0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	334d      	adds	r3, #77	@ 0x4d
 800647c:	2205      	movs	r2, #5
 800647e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006480:	78fa      	ldrb	r2, [r7, #3]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	331a      	adds	r3, #26
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	3319      	adds	r3, #25
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	3344      	adds	r3, #68	@ 0x44
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	78fa      	ldrb	r2, [r7, #3]
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f005 fce5 	bl	800be96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d8:	461a      	mov	r2, r3
 80064da:	2340      	movs	r3, #64	@ 0x40
 80064dc:	6093      	str	r3, [r2, #8]
 80064de:	e31f      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	4611      	mov	r1, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f004 ff92 	bl	800b412 <USB_ReadChInterrupts>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d11a      	bne.n	800652e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006504:	461a      	mov	r2, r3
 8006506:	2308      	movs	r3, #8
 8006508:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800650a:	78fa      	ldrb	r2, [r7, #3]
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	334d      	adds	r3, #77	@ 0x4d
 800651a:	2206      	movs	r2, #6
 800651c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	4611      	mov	r1, r2
 8006526:	4618      	mov	r0, r3
 8006528:	f005 fcb5 	bl	800be96 <USB_HC_Halt>
 800652c:	e2f8      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f004 ff6b 	bl	800b412 <USB_ReadChInterrupts>
 800653c:	4603      	mov	r3, r0
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b10      	cmp	r3, #16
 8006544:	d144      	bne.n	80065d0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	4613      	mov	r3, r2
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	440b      	add	r3, r1
 8006554:	3344      	adds	r3, #68	@ 0x44
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	334d      	adds	r3, #77	@ 0x4d
 800656a:	2204      	movs	r2, #4
 800656c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800656e:	78fa      	ldrb	r2, [r7, #3]
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	3319      	adds	r3, #25
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d114      	bne.n	80065ae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006584:	78fa      	ldrb	r2, [r7, #3]
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	4613      	mov	r3, r2
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	3318      	adds	r3, #24
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800659a:	78fa      	ldrb	r2, [r7, #3]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	3319      	adds	r3, #25
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f005 fc6d 	bl	800be96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c8:	461a      	mov	r2, r3
 80065ca:	2310      	movs	r3, #16
 80065cc:	6093      	str	r3, [r2, #8]
 80065ce:	e2a7      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f004 ff1a 	bl	800b412 <USB_ReadChInterrupts>
 80065de:	4603      	mov	r3, r0
 80065e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e4:	2b80      	cmp	r3, #128	@ 0x80
 80065e6:	f040 8083 	bne.w	80066f0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	799b      	ldrb	r3, [r3, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d111      	bne.n	8006616 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	334d      	adds	r3, #77	@ 0x4d
 8006602:	2207      	movs	r2, #7
 8006604:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	78fa      	ldrb	r2, [r7, #3]
 800660c:	4611      	mov	r1, r2
 800660e:	4618      	mov	r0, r3
 8006610:	f005 fc41 	bl	800be96 <USB_HC_Halt>
 8006614:	e062      	b.n	80066dc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006616:	78fa      	ldrb	r2, [r7, #3]
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	3344      	adds	r3, #68	@ 0x44
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	1a9b      	subs	r3, r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4403      	add	r3, r0
 8006636:	3344      	adds	r3, #68	@ 0x44
 8006638:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800663a:	78fa      	ldrb	r2, [r7, #3]
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	3344      	adds	r3, #68	@ 0x44
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d922      	bls.n	8006696 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	3344      	adds	r3, #68	@ 0x44
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4613      	mov	r3, r2
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	334c      	adds	r3, #76	@ 0x4c
 8006674:	2204      	movs	r2, #4
 8006676:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006678:	78fa      	ldrb	r2, [r7, #3]
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	4613      	mov	r3, r2
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	1a9b      	subs	r3, r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	334c      	adds	r3, #76	@ 0x4c
 8006688:	781a      	ldrb	r2, [r3, #0]
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f007 ff10 	bl	800e4b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006694:	e022      	b.n	80066dc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	334c      	adds	r3, #76	@ 0x4c
 80066a6:	2202      	movs	r2, #2
 80066a8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066c0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066c8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d6:	461a      	mov	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e8:	461a      	mov	r2, r3
 80066ea:	2380      	movs	r3, #128	@ 0x80
 80066ec:	6093      	str	r3, [r2, #8]
 80066ee:	e217      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	78fa      	ldrb	r2, [r7, #3]
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f004 fe8a 	bl	800b412 <USB_ReadChInterrupts>
 80066fe:	4603      	mov	r3, r0
 8006700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006708:	d11b      	bne.n	8006742 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	334d      	adds	r3, #77	@ 0x4d
 800671a:	2209      	movs	r2, #9
 800671c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	78fa      	ldrb	r2, [r7, #3]
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f005 fbb5 	bl	800be96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006738:	461a      	mov	r2, r3
 800673a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800673e:	6093      	str	r3, [r2, #8]
 8006740:	e1ee      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f004 fe61 	bl	800b412 <USB_ReadChInterrupts>
 8006750:	4603      	mov	r3, r0
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b02      	cmp	r3, #2
 8006758:	f040 81df 	bne.w	8006b1a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006768:	461a      	mov	r2, r3
 800676a:	2302      	movs	r3, #2
 800676c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	334d      	adds	r3, #77	@ 0x4d
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b01      	cmp	r3, #1
 8006782:	f040 8093 	bne.w	80068ac <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006786:	78fa      	ldrb	r2, [r7, #3]
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	440b      	add	r3, r1
 8006794:	334d      	adds	r3, #77	@ 0x4d
 8006796:	2202      	movs	r2, #2
 8006798:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800679a:	78fa      	ldrb	r2, [r7, #3]
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	334c      	adds	r3, #76	@ 0x4c
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3326      	adds	r3, #38	@ 0x26
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d00b      	beq.n	80067dc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	3326      	adds	r3, #38	@ 0x26
 80067d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	f040 8190 	bne.w	8006afc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	799b      	ldrb	r3, [r3, #6]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d115      	bne.n	8006810 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	333d      	adds	r3, #61	@ 0x3d
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	78fa      	ldrb	r2, [r7, #3]
 80067f8:	f083 0301 	eor.w	r3, r3, #1
 80067fc:	b2d8      	uxtb	r0, r3
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	333d      	adds	r3, #61	@ 0x3d
 800680c:	4602      	mov	r2, r0
 800680e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	799b      	ldrb	r3, [r3, #6]
 8006814:	2b01      	cmp	r3, #1
 8006816:	f040 8171 	bne.w	8006afc <HCD_HC_OUT_IRQHandler+0x954>
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	3334      	adds	r3, #52	@ 0x34
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 8165 	beq.w	8006afc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	3334      	adds	r3, #52	@ 0x34
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	1a9b      	subs	r3, r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4403      	add	r3, r0
 8006852:	3328      	adds	r3, #40	@ 0x28
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	440b      	add	r3, r1
 8006858:	1e59      	subs	r1, r3, #1
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4403      	add	r3, r0
 8006868:	3328      	adds	r3, #40	@ 0x28
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006870:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 813f 	beq.w	8006afc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	333d      	adds	r3, #61	@ 0x3d
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	78fa      	ldrb	r2, [r7, #3]
 8006892:	f083 0301 	eor.w	r3, r3, #1
 8006896:	b2d8      	uxtb	r0, r3
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	333d      	adds	r3, #61	@ 0x3d
 80068a6:	4602      	mov	r2, r0
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	e127      	b.n	8006afc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80068ac:	78fa      	ldrb	r2, [r7, #3]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	334d      	adds	r3, #77	@ 0x4d
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d120      	bne.n	8006904 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80068c2:	78fa      	ldrb	r2, [r7, #3]
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	334d      	adds	r3, #77	@ 0x4d
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	331b      	adds	r3, #27
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	f040 8107 	bne.w	8006afc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	334c      	adds	r3, #76	@ 0x4c
 80068fe:	2202      	movs	r2, #2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	e0fb      	b.n	8006afc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	1a9b      	subs	r3, r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	334d      	adds	r3, #77	@ 0x4d
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b04      	cmp	r3, #4
 8006918:	d13a      	bne.n	8006990 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	334d      	adds	r3, #77	@ 0x4d
 800692a:	2202      	movs	r2, #2
 800692c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800692e:	78fa      	ldrb	r2, [r7, #3]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	334c      	adds	r3, #76	@ 0x4c
 800693e:	2202      	movs	r2, #2
 8006940:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	1a9b      	subs	r3, r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	331b      	adds	r3, #27
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b01      	cmp	r3, #1
 8006956:	f040 80d1 	bne.w	8006afc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800695a:	78fa      	ldrb	r2, [r7, #3]
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	4613      	mov	r3, r2
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	1a9b      	subs	r3, r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	440b      	add	r3, r1
 8006968:	331b      	adds	r3, #27
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4413      	add	r3, r2
 8006976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	440a      	add	r2, r1
 8006984:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800698c:	6053      	str	r3, [r2, #4]
 800698e:	e0b5      	b.n	8006afc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4613      	mov	r3, r2
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	334d      	adds	r3, #77	@ 0x4d
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b05      	cmp	r3, #5
 80069a4:	d114      	bne.n	80069d0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	334d      	adds	r3, #77	@ 0x4d
 80069b6:	2202      	movs	r2, #2
 80069b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80069ba:	78fa      	ldrb	r2, [r7, #3]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	334c      	adds	r3, #76	@ 0x4c
 80069ca:	2202      	movs	r2, #2
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e095      	b.n	8006afc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	334d      	adds	r3, #77	@ 0x4d
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b06      	cmp	r3, #6
 80069e4:	d114      	bne.n	8006a10 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	334d      	adds	r3, #77	@ 0x4d
 80069f6:	2202      	movs	r2, #2
 80069f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4613      	mov	r3, r2
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	334c      	adds	r3, #76	@ 0x4c
 8006a0a:	2205      	movs	r2, #5
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e075      	b.n	8006afc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	334d      	adds	r3, #77	@ 0x4d
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b07      	cmp	r3, #7
 8006a24:	d00a      	beq.n	8006a3c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006a26:	78fa      	ldrb	r2, [r7, #3]
 8006a28:	6879      	ldr	r1, [r7, #4]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	334d      	adds	r3, #77	@ 0x4d
 8006a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006a38:	2b09      	cmp	r3, #9
 8006a3a:	d170      	bne.n	8006b1e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4613      	mov	r3, r2
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	334d      	adds	r3, #77	@ 0x4d
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3344      	adds	r3, #68	@ 0x44
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4403      	add	r3, r0
 8006a70:	3344      	adds	r3, #68	@ 0x44
 8006a72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	3344      	adds	r3, #68	@ 0x44
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d914      	bls.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006a8a:	78fa      	ldrb	r2, [r7, #3]
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3344      	adds	r3, #68	@ 0x44
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	334c      	adds	r3, #76	@ 0x4c
 8006aae:	2204      	movs	r2, #4
 8006ab0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ab2:	e022      	b.n	8006afa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ab4:	78fa      	ldrb	r2, [r7, #3]
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	334c      	adds	r3, #76	@ 0x4c
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ade:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ae6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af4:	461a      	mov	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006afa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	1a9b      	subs	r3, r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	334c      	adds	r3, #76	@ 0x4c
 8006b0c:	781a      	ldrb	r2, [r3, #0]
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f007 fcce 	bl	800e4b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006b18:	e002      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006b1a:	bf00      	nop
 8006b1c:	e000      	b.n	8006b20 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006b1e:	bf00      	nop
  }
}
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b08a      	sub	sp, #40	@ 0x28
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	0c5b      	lsrs	r3, r3, #17
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d004      	beq.n	8006b6c <HCD_RXQLVL_IRQHandler+0x46>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	f000 80b6 	beq.w	8006cd6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b6a:	e0b7      	b.n	8006cdc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80b3 	beq.w	8006cda <HCD_RXQLVL_IRQHandler+0x1b4>
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	332c      	adds	r3, #44	@ 0x2c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80a7 	beq.w	8006cda <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	4613      	mov	r3, r2
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	3338      	adds	r3, #56	@ 0x38
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	18d1      	adds	r1, r2, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4403      	add	r3, r0
 8006bb0:	3334      	adds	r3, #52	@ 0x34
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	f200 8083 	bhi.w	8006cc0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	332c      	adds	r3, #44	@ 0x2c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	b292      	uxth	r2, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f004 fbb1 	bl	800b33c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4613      	mov	r3, r2
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	332c      	adds	r3, #44	@ 0x2c
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	18d1      	adds	r1, r2, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4403      	add	r3, r0
 8006bfe:	332c      	adds	r3, #44	@ 0x2c
 8006c00:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	4613      	mov	r3, r2
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	1a9b      	subs	r3, r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	3338      	adds	r3, #56	@ 0x38
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	18d1      	adds	r1, r2, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4403      	add	r3, r0
 8006c26:	3338      	adds	r3, #56	@ 0x38
 8006c28:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	0cdb      	lsrs	r3, r3, #19
 8006c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c3e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4613      	mov	r3, r2
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3328      	adds	r3, #40	@ 0x28
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d13f      	bne.n	8006cda <HCD_RXQLVL_IRQHandler+0x1b4>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d03c      	beq.n	8006cda <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c76:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c7e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	4613      	mov	r3, r2
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	333c      	adds	r3, #60	@ 0x3c
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f083 0301 	eor.w	r3, r3, #1
 8006ca8:	b2d8      	uxtb	r0, r3
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	333c      	adds	r3, #60	@ 0x3c
 8006cba:	4602      	mov	r2, r0
 8006cbc:	701a      	strb	r2, [r3, #0]
      break;
 8006cbe:	e00c      	b.n	8006cda <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	334c      	adds	r3, #76	@ 0x4c
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	701a      	strb	r2, [r3, #0]
      break;
 8006cd4:	e001      	b.n	8006cda <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006cd6:	bf00      	nop
 8006cd8:	e000      	b.n	8006cdc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006cda:	bf00      	nop
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3728      	adds	r7, #40	@ 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006d10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d10b      	bne.n	8006d34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d102      	bne.n	8006d2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f007 fba8 	bl	800e47c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f043 0302 	orr.w	r3, r3, #2
 8006d32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d132      	bne.n	8006da4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f043 0308 	orr.w	r3, r3, #8
 8006d44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d126      	bne.n	8006d9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7a5b      	ldrb	r3, [r3, #9]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d113      	bne.n	8006d80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006d5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d62:	d106      	bne.n	8006d72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2102      	movs	r1, #2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f004 fc60 	bl	800b630 <USB_InitFSLSPClkSel>
 8006d70:	e011      	b.n	8006d96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2101      	movs	r1, #1
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f004 fc59 	bl	800b630 <USB_InitFSLSPClkSel>
 8006d7e:	e00a      	b.n	8006d96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	79db      	ldrb	r3, [r3, #7]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d106      	bne.n	8006d96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006d94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f007 fb9a 	bl	800e4d0 <HAL_HCD_PortEnabled_Callback>
 8006d9c:	e002      	b.n	8006da4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f007 fba4 	bl	800e4ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d103      	bne.n	8006db6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f043 0320 	orr.w	r3, r3, #32
 8006db4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6013      	str	r3, [r2, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e1ba      	b.n	8007154 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a9d      	ldr	r2, [pc, #628]	@ (8007058 <HAL_I2C_Init+0x28c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_I2C_Init+0x3a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a9b      	ldr	r2, [pc, #620]	@ (800705c <HAL_I2C_Init+0x290>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_I2C_Init+0x3a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a9a      	ldr	r2, [pc, #616]	@ (8007060 <HAL_I2C_Init+0x294>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_I2C_Init+0x3a>
 8006dfc:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8006e00:	4898      	ldr	r0, [pc, #608]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006e02:	f7fc f92f 	bl	8003064 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <HAL_I2C_Init+0x4c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	4a95      	ldr	r2, [pc, #596]	@ (8007068 <HAL_I2C_Init+0x29c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d904      	bls.n	8006e22 <HAL_I2C_Init+0x56>
 8006e18:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8006e1c:	4891      	ldr	r0, [pc, #580]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006e1e:	f7fc f921 	bl	8003064 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <HAL_I2C_Init+0x72>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e32:	d004      	beq.n	8006e3e <HAL_I2C_Init+0x72>
 8006e34:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8006e38:	488a      	ldr	r0, [pc, #552]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006e3a:	f7fc f913 	bl	8003064 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e46:	d304      	bcc.n	8006e52 <HAL_I2C_Init+0x86>
 8006e48:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8006e4c:	4885      	ldr	r0, [pc, #532]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006e4e:	f7fc f909 	bl	8003064 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e5a:	d009      	beq.n	8006e70 <HAL_I2C_Init+0xa4>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006e64:	d004      	beq.n	8006e70 <HAL_I2C_Init+0xa4>
 8006e66:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8006e6a:	487e      	ldr	r0, [pc, #504]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006e6c:	f7fc f8fa 	bl	8003064 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <HAL_I2C_Init+0xbe>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d004      	beq.n	8006e8a <HAL_I2C_Init+0xbe>
 8006e80:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8006e84:	4877      	ldr	r0, [pc, #476]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006e86:	f7fc f8ed 	bl	8003064 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d004      	beq.n	8006ea0 <HAL_I2C_Init+0xd4>
 8006e96:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8006e9a:	4872      	ldr	r0, [pc, #456]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006e9c:	f7fc f8e2 	bl	8003064 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <HAL_I2C_Init+0xee>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	2b40      	cmp	r3, #64	@ 0x40
 8006eae:	d004      	beq.n	8006eba <HAL_I2C_Init+0xee>
 8006eb0:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8006eb4:	486b      	ldr	r0, [pc, #428]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006eb6:	f7fc f8d5 	bl	8003064 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d008      	beq.n	8006ed4 <HAL_I2C_Init+0x108>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	2b80      	cmp	r3, #128	@ 0x80
 8006ec8:	d004      	beq.n	8006ed4 <HAL_I2C_Init+0x108>
 8006eca:	f240 11d1 	movw	r1, #465	@ 0x1d1
 8006ece:	4865      	ldr	r0, [pc, #404]	@ (8007064 <HAL_I2C_Init+0x298>)
 8006ed0:	f7fc f8c8 	bl	8003064 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d106      	bne.n	8006eee <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fb fced 	bl	80028c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2224      	movs	r2, #36	@ 0x24
 8006ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f14:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f24:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f26:	f001 fc43 	bl	80087b0 <HAL_RCC_GetPCLK1Freq>
 8006f2a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4a4e      	ldr	r2, [pc, #312]	@ (800706c <HAL_I2C_Init+0x2a0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d807      	bhi.n	8006f46 <HAL_I2C_Init+0x17a>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a4d      	ldr	r2, [pc, #308]	@ (8007070 <HAL_I2C_Init+0x2a4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	bf94      	ite	ls
 8006f3e:	2301      	movls	r3, #1
 8006f40:	2300      	movhi	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	e006      	b.n	8006f54 <HAL_I2C_Init+0x188>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a4a      	ldr	r2, [pc, #296]	@ (8007074 <HAL_I2C_Init+0x2a8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	bf94      	ite	ls
 8006f4e:	2301      	movls	r3, #1
 8006f50:	2300      	movhi	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0fb      	b.n	8007154 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4a46      	ldr	r2, [pc, #280]	@ (8007078 <HAL_I2C_Init+0x2ac>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	0c9b      	lsrs	r3, r3, #18
 8006f66:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	4a38      	ldr	r2, [pc, #224]	@ (800706c <HAL_I2C_Init+0x2a0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d802      	bhi.n	8006f96 <HAL_I2C_Init+0x1ca>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	3301      	adds	r3, #1
 8006f94:	e009      	b.n	8006faa <HAL_I2C_Init+0x1de>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006f9c:	fb02 f303 	mul.w	r3, r2, r3
 8006fa0:	4a36      	ldr	r2, [pc, #216]	@ (800707c <HAL_I2C_Init+0x2b0>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	3301      	adds	r3, #1
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6812      	ldr	r2, [r2, #0]
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006fbc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4929      	ldr	r1, [pc, #164]	@ (800706c <HAL_I2C_Init+0x2a0>)
 8006fc6:	428b      	cmp	r3, r1
 8006fc8:	d819      	bhi.n	8006ffe <HAL_I2C_Init+0x232>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	1e59      	subs	r1, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fd8:	1c59      	adds	r1, r3, #1
 8006fda:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006fde:	400b      	ands	r3, r1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <HAL_I2C_Init+0x22e>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	1e59      	subs	r1, r3, #1
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff8:	e065      	b.n	80070c6 <HAL_I2C_Init+0x2fa>
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	e063      	b.n	80070c6 <HAL_I2C_Init+0x2fa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d111      	bne.n	800702a <HAL_I2C_Init+0x25e>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	1e58      	subs	r0, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6859      	ldr	r1, [r3, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	440b      	add	r3, r1
 8007014:	fbb0 f3f3 	udiv	r3, r0, r3
 8007018:	3301      	adds	r3, #1
 800701a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800701e:	2b00      	cmp	r3, #0
 8007020:	bf0c      	ite	eq
 8007022:	2301      	moveq	r3, #1
 8007024:	2300      	movne	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	e012      	b.n	8007050 <HAL_I2C_Init+0x284>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1e58      	subs	r0, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6859      	ldr	r1, [r3, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	0099      	lsls	r1, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007040:	3301      	adds	r3, #1
 8007042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007046:	2b00      	cmp	r3, #0
 8007048:	bf0c      	ite	eq
 800704a:	2301      	moveq	r3, #1
 800704c:	2300      	movne	r3, #0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d015      	beq.n	8007080 <HAL_I2C_Init+0x2b4>
 8007054:	2301      	movs	r3, #1
 8007056:	e036      	b.n	80070c6 <HAL_I2C_Init+0x2fa>
 8007058:	40005400 	.word	0x40005400
 800705c:	40005800 	.word	0x40005800
 8007060:	40005c00 	.word	0x40005c00
 8007064:	08011ab0 	.word	0x08011ab0
 8007068:	00061a80 	.word	0x00061a80
 800706c:	000186a0 	.word	0x000186a0
 8007070:	001e847f 	.word	0x001e847f
 8007074:	003d08ff 	.word	0x003d08ff
 8007078:	431bde83 	.word	0x431bde83
 800707c:	10624dd3 	.word	0x10624dd3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10e      	bne.n	80070a6 <HAL_I2C_Init+0x2da>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	1e58      	subs	r0, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6859      	ldr	r1, [r3, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	440b      	add	r3, r1
 8007096:	fbb0 f3f3 	udiv	r3, r0, r3
 800709a:	3301      	adds	r3, #1
 800709c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070a4:	e00f      	b.n	80070c6 <HAL_I2C_Init+0x2fa>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1e58      	subs	r0, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6859      	ldr	r1, [r3, #4]
 80070ae:	460b      	mov	r3, r1
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	0099      	lsls	r1, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80070bc:	3301      	adds	r3, #1
 80070be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	6809      	ldr	r1, [r1, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80070f4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6911      	ldr	r1, [r2, #16]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	68d2      	ldr	r2, [r2, #12]
 8007100:	4311      	orrs	r1, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	430b      	orrs	r3, r1
 8007108:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	695a      	ldr	r2, [r3, #20]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0201 	orr.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e1e7      	b.n	800753e <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a92      	ldr	r2, [pc, #584]	@ (80073bc <HAL_I2S_Init+0x260>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d018      	beq.n	80071aa <HAL_I2S_Init+0x4e>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a90      	ldr	r2, [pc, #576]	@ (80073c0 <HAL_I2S_Init+0x264>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <HAL_I2S_Init+0x4e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a8f      	ldr	r2, [pc, #572]	@ (80073c4 <HAL_I2S_Init+0x268>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00e      	beq.n	80071aa <HAL_I2S_Init+0x4e>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a8d      	ldr	r2, [pc, #564]	@ (80073c8 <HAL_I2S_Init+0x26c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_I2S_Init+0x4e>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a8c      	ldr	r2, [pc, #560]	@ (80073cc <HAL_I2S_Init+0x270>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d004      	beq.n	80071aa <HAL_I2S_Init+0x4e>
 80071a0:	f240 111b 	movw	r1, #283	@ 0x11b
 80071a4:	488a      	ldr	r0, [pc, #552]	@ (80073d0 <HAL_I2S_Init+0x274>)
 80071a6:	f7fb ff5d 	bl	8003064 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d013      	beq.n	80071da <HAL_I2S_Init+0x7e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ba:	d00e      	beq.n	80071da <HAL_I2S_Init+0x7e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c4:	d009      	beq.n	80071da <HAL_I2S_Init+0x7e>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ce:	d004      	beq.n	80071da <HAL_I2S_Init+0x7e>
 80071d0:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80071d4:	487e      	ldr	r0, [pc, #504]	@ (80073d0 <HAL_I2S_Init+0x274>)
 80071d6:	f7fb ff45 	bl	8003064 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d014      	beq.n	800720c <HAL_I2S_Init+0xb0>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d010      	beq.n	800720c <HAL_I2S_Init+0xb0>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d00c      	beq.n	800720c <HAL_I2S_Init+0xb0>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b30      	cmp	r3, #48	@ 0x30
 80071f8:	d008      	beq.n	800720c <HAL_I2S_Init+0xb0>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	2bb0      	cmp	r3, #176	@ 0xb0
 8007200:	d004      	beq.n	800720c <HAL_I2S_Init+0xb0>
 8007202:	f240 111d 	movw	r1, #285	@ 0x11d
 8007206:	4872      	ldr	r0, [pc, #456]	@ (80073d0 <HAL_I2S_Init+0x274>)
 8007208:	f7fb ff2c 	bl	8003064 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d010      	beq.n	8007236 <HAL_I2S_Init+0xda>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d00c      	beq.n	8007236 <HAL_I2S_Init+0xda>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b03      	cmp	r3, #3
 8007222:	d008      	beq.n	8007236 <HAL_I2S_Init+0xda>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	2b05      	cmp	r3, #5
 800722a:	d004      	beq.n	8007236 <HAL_I2S_Init+0xda>
 800722c:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8007230:	4867      	ldr	r0, [pc, #412]	@ (80073d0 <HAL_I2S_Init+0x274>)
 8007232:	f7fb ff17 	bl	8003064 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800723e:	d008      	beq.n	8007252 <HAL_I2S_Init+0xf6>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <HAL_I2S_Init+0xf6>
 8007248:	f240 111f 	movw	r1, #287	@ 0x11f
 800724c:	4860      	ldr	r0, [pc, #384]	@ (80073d0 <HAL_I2S_Init+0x274>)
 800724e:	f7fb ff09 	bl	8003064 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800725a:	d304      	bcc.n	8007266 <HAL_I2S_Init+0x10a>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	4a5c      	ldr	r2, [pc, #368]	@ (80073d4 <HAL_I2S_Init+0x278>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d908      	bls.n	8007278 <HAL_I2S_Init+0x11c>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d004      	beq.n	8007278 <HAL_I2S_Init+0x11c>
 800726e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8007272:	4857      	ldr	r0, [pc, #348]	@ (80073d0 <HAL_I2S_Init+0x274>)
 8007274:	f7fb fef6 	bl	8003064 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <HAL_I2S_Init+0x136>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d004      	beq.n	8007292 <HAL_I2S_Init+0x136>
 8007288:	f240 1121 	movw	r1, #289	@ 0x121
 800728c:	4850      	ldr	r0, [pc, #320]	@ (80073d0 <HAL_I2S_Init+0x274>)
 800728e:	f7fb fee9 	bl	8003064 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d008      	beq.n	80072ac <HAL_I2S_Init+0x150>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <HAL_I2S_Init+0x150>
 80072a2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80072a6:	484a      	ldr	r0, [pc, #296]	@ (80073d0 <HAL_I2S_Init+0x274>)
 80072a8:	f7fb fedc 	bl	8003064 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d109      	bne.n	80072cc <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a45      	ldr	r2, [pc, #276]	@ (80073d8 <HAL_I2S_Init+0x27c>)
 80072c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fb fb74 	bl	80029b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80072e2:	f023 030f 	bic.w	r3, r3, #15
 80072e6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2202      	movs	r2, #2
 80072ee:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d073      	beq.n	80073e0 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007300:	2310      	movs	r3, #16
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e001      	b.n	800730a <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007306:	2320      	movs	r3, #32
 8007308:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2b20      	cmp	r3, #32
 8007310:	d802      	bhi.n	8007318 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007318:	2001      	movs	r0, #1
 800731a:	f001 fc87 	bl	8008c2c <HAL_RCCEx_GetPeriphCLKFreq>
 800731e:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007328:	d125      	bne.n	8007376 <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	fbb2 f2f3 	udiv	r2, r2, r3
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	461a      	mov	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	fbb2 f3f3 	udiv	r3, r2, r3
 800734e:	3305      	adds	r3, #5
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	e01f      	b.n	8007394 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	fbb2 f2f3 	udiv	r2, r2, r3
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	461a      	mov	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	3305      	adds	r3, #5
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	e00e      	b.n	8007394 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	fbb2 f2f3 	udiv	r2, r2, r3
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	3305      	adds	r3, #5
 8007392:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4a11      	ldr	r2, [pc, #68]	@ (80073dc <HAL_I2S_Init+0x280>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	08db      	lsrs	r3, r3, #3
 800739e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	085b      	lsrs	r3, r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	61bb      	str	r3, [r7, #24]
 80073b8:	e016      	b.n	80073e8 <HAL_I2S_Init+0x28c>
 80073ba:	bf00      	nop
 80073bc:	40013000 	.word	0x40013000
 80073c0:	40003800 	.word	0x40003800
 80073c4:	40003c00 	.word	0x40003c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40015000 	.word	0x40015000
 80073d0:	08011ae8 	.word	0x08011ae8
 80073d4:	0002ee00 	.word	0x0002ee00
 80073d8:	0800764f 	.word	0x0800764f
 80073dc:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80073e0:	2302      	movs	r3, #2
 80073e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d902      	bls.n	80073f4 <HAL_I2S_Init+0x298>
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2bff      	cmp	r3, #255	@ 0xff
 80073f2:	d907      	bls.n	8007404 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f8:	f043 0210 	orr.w	r2, r3, #16
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e09c      	b.n	800753e <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691a      	ldr	r2, [r3, #16]
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	ea42 0103 	orr.w	r1, r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	430a      	orrs	r2, r1
 8007416:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007422:	f023 030f 	bic.w	r3, r3, #15
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6851      	ldr	r1, [r2, #4]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6892      	ldr	r2, [r2, #8]
 800742e:	4311      	orrs	r1, r2
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68d2      	ldr	r2, [r2, #12]
 8007434:	4311      	orrs	r1, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6992      	ldr	r2, [r2, #24]
 800743a:	430a      	orrs	r2, r1
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007446:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_I2S_Init+0x306>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d004      	beq.n	8007462 <HAL_I2S_Init+0x306>
 8007458:	f240 11bd 	movw	r1, #445	@ 0x1bd
 800745c:	483a      	ldr	r0, [pc, #232]	@ (8007548 <HAL_I2S_Init+0x3ec>)
 800745e:	f7fb fe01 	bl	8003064 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d161      	bne.n	800752e <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a37      	ldr	r2, [pc, #220]	@ (800754c <HAL_I2S_Init+0x3f0>)
 800746e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a36      	ldr	r2, [pc, #216]	@ (8007550 <HAL_I2S_Init+0x3f4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d101      	bne.n	800747e <HAL_I2S_Init+0x322>
 800747a:	4b36      	ldr	r3, [pc, #216]	@ (8007554 <HAL_I2S_Init+0x3f8>)
 800747c:	e001      	b.n	8007482 <HAL_I2S_Init+0x326>
 800747e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	4931      	ldr	r1, [pc, #196]	@ (8007550 <HAL_I2S_Init+0x3f4>)
 800748a:	428a      	cmp	r2, r1
 800748c:	d101      	bne.n	8007492 <HAL_I2S_Init+0x336>
 800748e:	4a31      	ldr	r2, [pc, #196]	@ (8007554 <HAL_I2S_Init+0x3f8>)
 8007490:	e001      	b.n	8007496 <HAL_I2S_Init+0x33a>
 8007492:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007496:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800749a:	f023 030f 	bic.w	r3, r3, #15
 800749e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007550 <HAL_I2S_Init+0x3f4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d101      	bne.n	80074ae <HAL_I2S_Init+0x352>
 80074aa:	4b2a      	ldr	r3, [pc, #168]	@ (8007554 <HAL_I2S_Init+0x3f8>)
 80074ac:	e001      	b.n	80074b2 <HAL_I2S_Init+0x356>
 80074ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074b2:	2202      	movs	r2, #2
 80074b4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a25      	ldr	r2, [pc, #148]	@ (8007550 <HAL_I2S_Init+0x3f4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d101      	bne.n	80074c4 <HAL_I2S_Init+0x368>
 80074c0:	4b24      	ldr	r3, [pc, #144]	@ (8007554 <HAL_I2S_Init+0x3f8>)
 80074c2:	e001      	b.n	80074c8 <HAL_I2S_Init+0x36c>
 80074c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d4:	d003      	beq.n	80074de <HAL_I2S_Init+0x382>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d103      	bne.n	80074e6 <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80074de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	e001      	b.n	80074ea <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80074f4:	4313      	orrs	r3, r2
 80074f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80074fe:	4313      	orrs	r3, r2
 8007500:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007508:	4313      	orrs	r3, r2
 800750a:	b29a      	uxth	r2, r3
 800750c:	897b      	ldrh	r3, [r7, #10]
 800750e:	4313      	orrs	r3, r2
 8007510:	b29b      	uxth	r3, r3
 8007512:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007516:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a0c      	ldr	r2, [pc, #48]	@ (8007550 <HAL_I2S_Init+0x3f4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d101      	bne.n	8007526 <HAL_I2S_Init+0x3ca>
 8007522:	4b0c      	ldr	r3, [pc, #48]	@ (8007554 <HAL_I2S_Init+0x3f8>)
 8007524:	e001      	b.n	800752a <HAL_I2S_Init+0x3ce>
 8007526:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800752a:	897a      	ldrh	r2, [r7, #10]
 800752c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	08011ae8 	.word	0x08011ae8
 800754c:	08007765 	.word	0x08007765
 8007550:	40003800 	.word	0x40003800
 8007554:	40003400 	.word	0x40003400

08007558 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	881a      	ldrh	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	1c9a      	adds	r2, r3, #2
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10e      	bne.n	80075e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80075d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff ffb8 	bl	8007558 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007602:	b292      	uxth	r2, r2
 8007604:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	1c9a      	adds	r2, r3, #2
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10e      	bne.n	8007646 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007636:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff ff93 	bl	800756c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b04      	cmp	r3, #4
 8007668:	d13a      	bne.n	80076e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b01      	cmp	r3, #1
 8007672:	d109      	bne.n	8007688 <I2S_IRQHandler+0x3a>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800767e:	2b40      	cmp	r3, #64	@ 0x40
 8007680:	d102      	bne.n	8007688 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff ffb4 	bl	80075f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768e:	2b40      	cmp	r3, #64	@ 0x40
 8007690:	d126      	bne.n	80076e0 <I2S_IRQHandler+0x92>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	2b20      	cmp	r3, #32
 800769e:	d11f      	bne.n	80076e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80076ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80076b0:	2300      	movs	r3, #0
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d2:	f043 0202 	orr.w	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff ff50 	bl	8007580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d136      	bne.n	800775a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d109      	bne.n	800770a <I2S_IRQHandler+0xbc>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007700:	2b80      	cmp	r3, #128	@ 0x80
 8007702:	d102      	bne.n	800770a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff ff45 	bl	8007594 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b08      	cmp	r3, #8
 8007712:	d122      	bne.n	800775a <I2S_IRQHandler+0x10c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b20      	cmp	r3, #32
 8007720:	d11b      	bne.n	800775a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007730:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800774c:	f043 0204 	orr.w	r2, r3, #4
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff ff13 	bl	8007580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800775a:	bf00      	nop
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a92      	ldr	r2, [pc, #584]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d101      	bne.n	8007782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800777e:	4b92      	ldr	r3, [pc, #584]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007780:	e001      	b.n	8007786 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007782:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a8b      	ldr	r2, [pc, #556]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d101      	bne.n	80077a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800779c:	4b8a      	ldr	r3, [pc, #552]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800779e:	e001      	b.n	80077a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80077a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b0:	d004      	beq.n	80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f040 8099 	bne.w	80078ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d107      	bne.n	80077d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f925 	bl	8007a20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d107      	bne.n	80077f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f9c8 	bl	8007b80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f6:	2b40      	cmp	r3, #64	@ 0x40
 80077f8:	d13a      	bne.n	8007870 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b00      	cmp	r3, #0
 8007802:	d035      	beq.n	8007870 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a6e      	ldr	r2, [pc, #440]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d101      	bne.n	8007812 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800780e:	4b6e      	ldr	r3, [pc, #440]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007810:	e001      	b.n	8007816 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007812:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4969      	ldr	r1, [pc, #420]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800781e:	428b      	cmp	r3, r1
 8007820:	d101      	bne.n	8007826 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007822:	4b69      	ldr	r3, [pc, #420]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007824:	e001      	b.n	800782a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007826:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800782a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800782e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800783e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007862:	f043 0202 	orr.w	r2, r3, #2
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff fe88 	bl	8007580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b08      	cmp	r3, #8
 8007878:	f040 80c3 	bne.w	8007a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80bd 	beq.w	8007a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007896:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a49      	ldr	r2, [pc, #292]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d101      	bne.n	80078a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80078a2:	4b49      	ldr	r3, [pc, #292]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078a4:	e001      	b.n	80078aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80078a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4944      	ldr	r1, [pc, #272]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078b2:	428b      	cmp	r3, r1
 80078b4:	d101      	bne.n	80078ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80078b6:	4b44      	ldr	r3, [pc, #272]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078b8:	e001      	b.n	80078be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80078ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80078be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80078c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80078c4:	2300      	movs	r3, #0
 80078c6:	60bb      	str	r3, [r7, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078de:	f043 0204 	orr.w	r2, r3, #4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fe4a 	bl	8007580 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80078ec:	e089      	b.n	8007a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d107      	bne.n	8007908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f8be 	bl	8007a84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b01      	cmp	r3, #1
 8007910:	d107      	bne.n	8007922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8fd 	bl	8007b1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007928:	2b40      	cmp	r3, #64	@ 0x40
 800792a:	d12f      	bne.n	800798c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d02a      	beq.n	800798c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007944:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1e      	ldr	r2, [pc, #120]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d101      	bne.n	8007954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007950:	4b1d      	ldr	r3, [pc, #116]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007952:	e001      	b.n	8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007954:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4919      	ldr	r1, [pc, #100]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007960:	428b      	cmp	r3, r1
 8007962:	d101      	bne.n	8007968 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007964:	4b18      	ldr	r3, [pc, #96]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007966:	e001      	b.n	800796c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007968:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800796c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007970:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797e:	f043 0202 	orr.w	r2, r3, #2
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fdfa 	bl	8007580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b08      	cmp	r3, #8
 8007994:	d136      	bne.n	8007a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d031      	beq.n	8007a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a07      	ldr	r2, [pc, #28]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d101      	bne.n	80079ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80079aa:	4b07      	ldr	r3, [pc, #28]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079ac:	e001      	b.n	80079b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80079ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4902      	ldr	r1, [pc, #8]	@ (80079c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079ba:	428b      	cmp	r3, r1
 80079bc:	d106      	bne.n	80079cc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80079be:	4b02      	ldr	r3, [pc, #8]	@ (80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079c0:	e006      	b.n	80079d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80079c2:	bf00      	nop
 80079c4:	40003800 	.word	0x40003800
 80079c8:	40003400 	.word	0x40003400
 80079cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80079d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80079d4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80079e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f2:	f043 0204 	orr.w	r2, r3, #4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fdc0 	bl	8007580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a00:	e000      	b.n	8007a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a02:	bf00      	nop
}
 8007a04:	bf00      	nop
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2c:	1c99      	adds	r1, r3, #2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6251      	str	r1, [r2, #36]	@ 0x24
 8007a32:	881a      	ldrh	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d113      	bne.n	8007a7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007a60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff ffc9 	bl	8007a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a90:	1c99      	adds	r1, r3, #2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6251      	str	r1, [r2, #36]	@ 0x24
 8007a96:	8819      	ldrh	r1, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b14 <I2SEx_TxISR_I2SExt+0x90>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d101      	bne.n	8007aa6 <I2SEx_TxISR_I2SExt+0x22>
 8007aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b18 <I2SEx_TxISR_I2SExt+0x94>)
 8007aa4:	e001      	b.n	8007aaa <I2SEx_TxISR_I2SExt+0x26>
 8007aa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007aaa:	460a      	mov	r2, r1
 8007aac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d121      	bne.n	8007b0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a12      	ldr	r2, [pc, #72]	@ (8007b14 <I2SEx_TxISR_I2SExt+0x90>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d101      	bne.n	8007ad4 <I2SEx_TxISR_I2SExt+0x50>
 8007ad0:	4b11      	ldr	r3, [pc, #68]	@ (8007b18 <I2SEx_TxISR_I2SExt+0x94>)
 8007ad2:	e001      	b.n	8007ad8 <I2SEx_TxISR_I2SExt+0x54>
 8007ad4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	490d      	ldr	r1, [pc, #52]	@ (8007b14 <I2SEx_TxISR_I2SExt+0x90>)
 8007ae0:	428b      	cmp	r3, r1
 8007ae2:	d101      	bne.n	8007ae8 <I2SEx_TxISR_I2SExt+0x64>
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b18 <I2SEx_TxISR_I2SExt+0x94>)
 8007ae6:	e001      	b.n	8007aec <I2SEx_TxISR_I2SExt+0x68>
 8007ae8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007aec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007af0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff ff81 	bl	8007a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40003800 	.word	0x40003800
 8007b18:	40003400 	.word	0x40003400

08007b1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68d8      	ldr	r0, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	1c99      	adds	r1, r3, #2
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007b34:	b282      	uxth	r2, r0
 8007b36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d113      	bne.n	8007b78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007b5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff ff4a 	bl	8007a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a20      	ldr	r2, [pc, #128]	@ (8007c10 <I2SEx_RxISR_I2SExt+0x90>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d101      	bne.n	8007b96 <I2SEx_RxISR_I2SExt+0x16>
 8007b92:	4b20      	ldr	r3, [pc, #128]	@ (8007c14 <I2SEx_RxISR_I2SExt+0x94>)
 8007b94:	e001      	b.n	8007b9a <I2SEx_RxISR_I2SExt+0x1a>
 8007b96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b9a:	68d8      	ldr	r0, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba0:	1c99      	adds	r1, r3, #2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007ba6:	b282      	uxth	r2, r0
 8007ba8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d121      	bne.n	8007c06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a12      	ldr	r2, [pc, #72]	@ (8007c10 <I2SEx_RxISR_I2SExt+0x90>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d101      	bne.n	8007bd0 <I2SEx_RxISR_I2SExt+0x50>
 8007bcc:	4b11      	ldr	r3, [pc, #68]	@ (8007c14 <I2SEx_RxISR_I2SExt+0x94>)
 8007bce:	e001      	b.n	8007bd4 <I2SEx_RxISR_I2SExt+0x54>
 8007bd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	490d      	ldr	r1, [pc, #52]	@ (8007c10 <I2SEx_RxISR_I2SExt+0x90>)
 8007bdc:	428b      	cmp	r3, r1
 8007bde:	d101      	bne.n	8007be4 <I2SEx_RxISR_I2SExt+0x64>
 8007be0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c14 <I2SEx_RxISR_I2SExt+0x94>)
 8007be2:	e001      	b.n	8007be8 <I2SEx_RxISR_I2SExt+0x68>
 8007be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007be8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007bec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ff03 	bl	8007a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40003800 	.word	0x40003800
 8007c14:	40003400 	.word	0x40003400

08007c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e318      	b.n	800825c <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b0f      	cmp	r3, #15
 8007c30:	d903      	bls.n	8007c3a <HAL_RCC_OscConfig+0x22>
 8007c32:	21e6      	movs	r1, #230	@ 0xe6
 8007c34:	4897      	ldr	r0, [pc, #604]	@ (8007e94 <HAL_RCC_OscConfig+0x27c>)
 8007c36:	f7fb fa15 	bl	8003064 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8088 	beq.w	8007d58 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <HAL_RCC_OscConfig+0x54>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c58:	d008      	beq.n	8007c6c <HAL_RCC_OscConfig+0x54>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c62:	d003      	beq.n	8007c6c <HAL_RCC_OscConfig+0x54>
 8007c64:	21eb      	movs	r1, #235	@ 0xeb
 8007c66:	488b      	ldr	r0, [pc, #556]	@ (8007e94 <HAL_RCC_OscConfig+0x27c>)
 8007c68:	f7fb f9fc 	bl	8003064 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 030c 	and.w	r3, r3, #12
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d00c      	beq.n	8007c92 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c78:	4b87      	ldr	r3, [pc, #540]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d112      	bne.n	8007caa <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c84:	4b84      	ldr	r3, [pc, #528]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c90:	d10b      	bne.n	8007caa <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c92:	4b81      	ldr	r3, [pc, #516]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d05b      	beq.n	8007d56 <HAL_RCC_OscConfig+0x13e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d157      	bne.n	8007d56 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e2d8      	b.n	800825c <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb2:	d106      	bne.n	8007cc2 <HAL_RCC_OscConfig+0xaa>
 8007cb4:	4b78      	ldr	r3, [pc, #480]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a77      	ldr	r2, [pc, #476]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	e01d      	b.n	8007cfe <HAL_RCC_OscConfig+0xe6>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cca:	d10c      	bne.n	8007ce6 <HAL_RCC_OscConfig+0xce>
 8007ccc:	4b72      	ldr	r3, [pc, #456]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a71      	ldr	r2, [pc, #452]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	e00b      	b.n	8007cfe <HAL_RCC_OscConfig+0xe6>
 8007ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a6b      	ldr	r2, [pc, #428]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	4b69      	ldr	r3, [pc, #420]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a68      	ldr	r2, [pc, #416]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d06:	f7fb fd51 	bl	80037ac <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d0c:	e008      	b.n	8007d20 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d0e:	f7fb fd4d 	bl	80037ac <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b64      	cmp	r3, #100	@ 0x64
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e29d      	b.n	800825c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d20:	4b5d      	ldr	r3, [pc, #372]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0f0      	beq.n	8007d0e <HAL_RCC_OscConfig+0xf6>
 8007d2c:	e014      	b.n	8007d58 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d2e:	f7fb fd3d 	bl	80037ac <HAL_GetTick>
 8007d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d34:	e008      	b.n	8007d48 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d36:	f7fb fd39 	bl	80037ac <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b64      	cmp	r3, #100	@ 0x64
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e289      	b.n	800825c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d48:	4b53      	ldr	r3, [pc, #332]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1f0      	bne.n	8007d36 <HAL_RCC_OscConfig+0x11e>
 8007d54:	e000      	b.n	8007d58 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d079      	beq.n	8007e58 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <HAL_RCC_OscConfig+0x166>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d004      	beq.n	8007d7e <HAL_RCC_OscConfig+0x166>
 8007d74:	f240 111d 	movw	r1, #285	@ 0x11d
 8007d78:	4846      	ldr	r0, [pc, #280]	@ (8007e94 <HAL_RCC_OscConfig+0x27c>)
 8007d7a:	f7fb f973 	bl	8003064 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b1f      	cmp	r3, #31
 8007d84:	d904      	bls.n	8007d90 <HAL_RCC_OscConfig+0x178>
 8007d86:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8007d8a:	4842      	ldr	r0, [pc, #264]	@ (8007e94 <HAL_RCC_OscConfig+0x27c>)
 8007d8c:	f7fb f96a 	bl	8003064 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007d90:	4b41      	ldr	r3, [pc, #260]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 030c 	and.w	r3, r3, #12
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d11c      	bne.n	8007de2 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007da8:	4b3b      	ldr	r3, [pc, #236]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d116      	bne.n	8007de2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007db4:	4b38      	ldr	r3, [pc, #224]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_RCC_OscConfig+0x1b4>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d001      	beq.n	8007dcc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e247      	b.n	800825c <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dcc:	4b32      	ldr	r3, [pc, #200]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	00db      	lsls	r3, r3, #3
 8007dda:	492f      	ldr	r1, [pc, #188]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007de0:	e03a      	b.n	8007e58 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d020      	beq.n	8007e2c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dea:	4b2c      	ldr	r3, [pc, #176]	@ (8007e9c <HAL_RCC_OscConfig+0x284>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df0:	f7fb fcdc 	bl	80037ac <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007df8:	f7fb fcd8 	bl	80037ac <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e228      	b.n	800825c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e0a:	4b23      	ldr	r3, [pc, #140]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0f0      	beq.n	8007df8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e16:	4b20      	ldr	r3, [pc, #128]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	491c      	ldr	r1, [pc, #112]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	600b      	str	r3, [r1, #0]
 8007e2a:	e015      	b.n	8007e58 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007e9c <HAL_RCC_OscConfig+0x284>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e32:	f7fb fcbb 	bl	80037ac <HAL_GetTick>
 8007e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e3a:	f7fb fcb7 	bl	80037ac <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e207      	b.n	800825c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e4c:	4b12      	ldr	r3, [pc, #72]	@ (8007e98 <HAL_RCC_OscConfig+0x280>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f0      	bne.n	8007e3a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d045      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <HAL_RCC_OscConfig+0x266>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d004      	beq.n	8007e7e <HAL_RCC_OscConfig+0x266>
 8007e74:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8007e78:	4806      	ldr	r0, [pc, #24]	@ (8007e94 <HAL_RCC_OscConfig+0x27c>)
 8007e7a:	f7fb f8f3 	bl	8003064 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01e      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e86:	4b06      	ldr	r3, [pc, #24]	@ (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e8c:	f7fb fc8e 	bl	80037ac <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e92:	e010      	b.n	8007eb6 <HAL_RCC_OscConfig+0x29e>
 8007e94:	08011b20 	.word	0x08011b20
 8007e98:	40023800 	.word	0x40023800
 8007e9c:	42470000 	.word	0x42470000
 8007ea0:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ea4:	f7fb fc82 	bl	80037ac <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e1d2      	b.n	800825c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f0      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x28c>
 8007ec2:	e015      	b.n	8007ef0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8008034 <HAL_RCC_OscConfig+0x41c>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eca:	f7fb fc6f 	bl	80037ac <HAL_GetTick>
 8007ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ed2:	f7fb fc6b 	bl	80037ac <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d901      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e1bb      	b.n	800825c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee4:	4b52      	ldr	r3, [pc, #328]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f0      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 80b0 	beq.w	800805e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00c      	beq.n	8007f24 <HAL_RCC_OscConfig+0x30c>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d008      	beq.n	8007f24 <HAL_RCC_OscConfig+0x30c>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d004      	beq.n	8007f24 <HAL_RCC_OscConfig+0x30c>
 8007f1a:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8007f1e:	4846      	ldr	r0, [pc, #280]	@ (8008038 <HAL_RCC_OscConfig+0x420>)
 8007f20:	f7fb f8a0 	bl	8003064 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f24:	4b42      	ldr	r3, [pc, #264]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10f      	bne.n	8007f50 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f30:	2300      	movs	r3, #0
 8007f32:	60bb      	str	r3, [r7, #8]
 8007f34:	4b3e      	ldr	r3, [pc, #248]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f38:	4a3d      	ldr	r2, [pc, #244]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f40:	4b3b      	ldr	r3, [pc, #236]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f48:	60bb      	str	r3, [r7, #8]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f50:	4b3a      	ldr	r3, [pc, #232]	@ (800803c <HAL_RCC_OscConfig+0x424>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d118      	bne.n	8007f8e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f5c:	4b37      	ldr	r3, [pc, #220]	@ (800803c <HAL_RCC_OscConfig+0x424>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a36      	ldr	r2, [pc, #216]	@ (800803c <HAL_RCC_OscConfig+0x424>)
 8007f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f68:	f7fb fc20 	bl	80037ac <HAL_GetTick>
 8007f6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f70:	f7fb fc1c 	bl	80037ac <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e16c      	b.n	800825c <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f82:	4b2e      	ldr	r3, [pc, #184]	@ (800803c <HAL_RCC_OscConfig+0x424>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0f0      	beq.n	8007f70 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d106      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x38c>
 8007f96:	4b26      	ldr	r3, [pc, #152]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9a:	4a25      	ldr	r2, [pc, #148]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007f9c:	f043 0301 	orr.w	r3, r3, #1
 8007fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fa2:	e01c      	b.n	8007fde <HAL_RCC_OscConfig+0x3c6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d10c      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x3ae>
 8007fac:	4b20      	ldr	r3, [pc, #128]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007fb2:	f043 0304 	orr.w	r3, r3, #4
 8007fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007fbe:	f043 0301 	orr.w	r3, r3, #1
 8007fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fc4:	e00b      	b.n	8007fde <HAL_RCC_OscConfig+0x3c6>
 8007fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fca:	4a19      	ldr	r2, [pc, #100]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fd2:	4b17      	ldr	r3, [pc, #92]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	4a16      	ldr	r2, [pc, #88]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8007fd8:	f023 0304 	bic.w	r3, r3, #4
 8007fdc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d015      	beq.n	8008012 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fe6:	f7fb fbe1 	bl	80037ac <HAL_GetTick>
 8007fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fec:	e00a      	b.n	8008004 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fee:	f7fb fbdd 	bl	80037ac <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e12b      	b.n	800825c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008004:	4b0a      	ldr	r3, [pc, #40]	@ (8008030 <HAL_RCC_OscConfig+0x418>)
 8008006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0ee      	beq.n	8007fee <HAL_RCC_OscConfig+0x3d6>
 8008010:	e01c      	b.n	800804c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008012:	f7fb fbcb 	bl	80037ac <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008018:	e012      	b.n	8008040 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800801a:	f7fb fbc7 	bl	80037ac <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008028:	4293      	cmp	r3, r2
 800802a:	d909      	bls.n	8008040 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e115      	b.n	800825c <HAL_RCC_OscConfig+0x644>
 8008030:	40023800 	.word	0x40023800
 8008034:	42470e80 	.word	0x42470e80
 8008038:	08011b20 	.word	0x08011b20
 800803c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008040:	4b88      	ldr	r3, [pc, #544]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 8008042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d105      	bne.n	800805e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008052:	4b84      	ldr	r3, [pc, #528]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 8008054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008056:	4a83      	ldr	r2, [pc, #524]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 8008058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800805c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00c      	beq.n	8008080 <HAL_RCC_OscConfig+0x468>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d008      	beq.n	8008080 <HAL_RCC_OscConfig+0x468>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d004      	beq.n	8008080 <HAL_RCC_OscConfig+0x468>
 8008076:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800807a:	487b      	ldr	r0, [pc, #492]	@ (8008268 <HAL_RCC_OscConfig+0x650>)
 800807c:	f7fa fff2 	bl	8003064 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 80e8 	beq.w	800825a <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800808a:	4b76      	ldr	r3, [pc, #472]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 030c 	and.w	r3, r3, #12
 8008092:	2b08      	cmp	r3, #8
 8008094:	f000 80a9 	beq.w	80081ea <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	2b02      	cmp	r3, #2
 800809e:	f040 808d 	bne.w	80081bc <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <HAL_RCC_OscConfig+0x4a6>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080b2:	d004      	beq.n	80080be <HAL_RCC_OscConfig+0x4a6>
 80080b4:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 80080b8:	486b      	ldr	r0, [pc, #428]	@ (8008268 <HAL_RCC_OscConfig+0x650>)
 80080ba:	f7fa ffd3 	bl	8003064 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d903      	bls.n	80080ce <HAL_RCC_OscConfig+0x4b6>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80080cc:	d904      	bls.n	80080d8 <HAL_RCC_OscConfig+0x4c0>
 80080ce:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80080d2:	4865      	ldr	r0, [pc, #404]	@ (8008268 <HAL_RCC_OscConfig+0x650>)
 80080d4:	f7fa ffc6 	bl	8003064 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080dc:	2b31      	cmp	r3, #49	@ 0x31
 80080de:	d904      	bls.n	80080ea <HAL_RCC_OscConfig+0x4d2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80080e8:	d904      	bls.n	80080f4 <HAL_RCC_OscConfig+0x4dc>
 80080ea:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 80080ee:	485e      	ldr	r0, [pc, #376]	@ (8008268 <HAL_RCC_OscConfig+0x650>)
 80080f0:	f7fa ffb8 	bl	8003064 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d010      	beq.n	800811e <HAL_RCC_OscConfig+0x506>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008100:	2b04      	cmp	r3, #4
 8008102:	d00c      	beq.n	800811e <HAL_RCC_OscConfig+0x506>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008108:	2b06      	cmp	r3, #6
 800810a:	d008      	beq.n	800811e <HAL_RCC_OscConfig+0x506>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008110:	2b08      	cmp	r3, #8
 8008112:	d004      	beq.n	800811e <HAL_RCC_OscConfig+0x506>
 8008114:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8008118:	4853      	ldr	r0, [pc, #332]	@ (8008268 <HAL_RCC_OscConfig+0x650>)
 800811a:	f7fa ffa3 	bl	8003064 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	2b01      	cmp	r3, #1
 8008124:	d903      	bls.n	800812e <HAL_RCC_OscConfig+0x516>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812a:	2b0f      	cmp	r3, #15
 800812c:	d904      	bls.n	8008138 <HAL_RCC_OscConfig+0x520>
 800812e:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8008132:	484d      	ldr	r0, [pc, #308]	@ (8008268 <HAL_RCC_OscConfig+0x650>)
 8008134:	f7fa ff96 	bl	8003064 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008138:	4b4c      	ldr	r3, [pc, #304]	@ (800826c <HAL_RCC_OscConfig+0x654>)
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813e:	f7fb fb35 	bl	80037ac <HAL_GetTick>
 8008142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008144:	e008      	b.n	8008158 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008146:	f7fb fb31 	bl	80037ac <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d901      	bls.n	8008158 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e081      	b.n	800825c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008158:	4b42      	ldr	r3, [pc, #264]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1f0      	bne.n	8008146 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	69da      	ldr	r2, [r3, #28]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008172:	019b      	lsls	r3, r3, #6
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	3b01      	subs	r3, #1
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	061b      	lsls	r3, r3, #24
 8008188:	4936      	ldr	r1, [pc, #216]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 800818a:	4313      	orrs	r3, r2
 800818c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800818e:	4b37      	ldr	r3, [pc, #220]	@ (800826c <HAL_RCC_OscConfig+0x654>)
 8008190:	2201      	movs	r2, #1
 8008192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008194:	f7fb fb0a 	bl	80037ac <HAL_GetTick>
 8008198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800819a:	e008      	b.n	80081ae <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800819c:	f7fb fb06 	bl	80037ac <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e056      	b.n	800825c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0f0      	beq.n	800819c <HAL_RCC_OscConfig+0x584>
 80081ba:	e04e      	b.n	800825a <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081bc:	4b2b      	ldr	r3, [pc, #172]	@ (800826c <HAL_RCC_OscConfig+0x654>)
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c2:	f7fb faf3 	bl	80037ac <HAL_GetTick>
 80081c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081c8:	e008      	b.n	80081dc <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081ca:	f7fb faef 	bl	80037ac <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d901      	bls.n	80081dc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e03f      	b.n	800825c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081dc:	4b21      	ldr	r3, [pc, #132]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1f0      	bne.n	80081ca <HAL_RCC_OscConfig+0x5b2>
 80081e8:	e037      	b.n	800825a <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d101      	bne.n	80081f6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e032      	b.n	800825c <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008264 <HAL_RCC_OscConfig+0x64c>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d028      	beq.n	8008256 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800820e:	429a      	cmp	r2, r3
 8008210:	d121      	bne.n	8008256 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800821c:	429a      	cmp	r2, r3
 800821e:	d11a      	bne.n	8008256 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008226:	4013      	ands	r3, r2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800822c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800822e:	4293      	cmp	r3, r2
 8008230:	d111      	bne.n	8008256 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	3b01      	subs	r3, #1
 8008240:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008242:	429a      	cmp	r2, r3
 8008244:	d107      	bne.n	8008256 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008250:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008252:	429a      	cmp	r2, r3
 8008254:	d001      	beq.n	800825a <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40023800 	.word	0x40023800
 8008268:	08011b20 	.word	0x08011b20
 800826c:	42470060 	.word	0x42470060

08008270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e174      	b.n	800856e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <HAL_RCC_ClockConfig+0x24>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b0f      	cmp	r3, #15
 8008292:	d904      	bls.n	800829e <HAL_RCC_ClockConfig+0x2e>
 8008294:	f240 215a 	movw	r1, #602	@ 0x25a
 8008298:	487b      	ldr	r0, [pc, #492]	@ (8008488 <HAL_RCC_ClockConfig+0x218>)
 800829a:	f7fa fee3 	bl	8003064 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d019      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x68>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d016      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x68>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d013      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x68>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d010      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x68>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d00d      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x68>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d00a      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x68>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b06      	cmp	r3, #6
 80082c6:	d007      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x68>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b07      	cmp	r3, #7
 80082cc:	d004      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x68>
 80082ce:	f240 215b 	movw	r1, #603	@ 0x25b
 80082d2:	486d      	ldr	r0, [pc, #436]	@ (8008488 <HAL_RCC_ClockConfig+0x218>)
 80082d4:	f7fa fec6 	bl	8003064 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082d8:	4b6c      	ldr	r3, [pc, #432]	@ (800848c <HAL_RCC_ClockConfig+0x21c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d90c      	bls.n	8008300 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e6:	4b69      	ldr	r3, [pc, #420]	@ (800848c <HAL_RCC_ClockConfig+0x21c>)
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ee:	4b67      	ldr	r3, [pc, #412]	@ (800848c <HAL_RCC_ClockConfig+0x21c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d001      	beq.n	8008300 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e136      	b.n	800856e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d049      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008318:	4b5d      	ldr	r3, [pc, #372]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	4a5c      	ldr	r2, [pc, #368]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 800831e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b00      	cmp	r3, #0
 800832e:	d005      	beq.n	800833c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008330:	4b57      	ldr	r3, [pc, #348]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	4a56      	ldr	r2, [pc, #344]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 8008336:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800833a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d024      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b80      	cmp	r3, #128	@ 0x80
 800834a:	d020      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	2b90      	cmp	r3, #144	@ 0x90
 8008352:	d01c      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2ba0      	cmp	r3, #160	@ 0xa0
 800835a:	d018      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	2bb0      	cmp	r3, #176	@ 0xb0
 8008362:	d014      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	2bc0      	cmp	r3, #192	@ 0xc0
 800836a:	d010      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	2bd0      	cmp	r3, #208	@ 0xd0
 8008372:	d00c      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2be0      	cmp	r3, #224	@ 0xe0
 800837a:	d008      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2bf0      	cmp	r3, #240	@ 0xf0
 8008382:	d004      	beq.n	800838e <HAL_RCC_ClockConfig+0x11e>
 8008384:	f240 217e 	movw	r1, #638	@ 0x27e
 8008388:	483f      	ldr	r0, [pc, #252]	@ (8008488 <HAL_RCC_ClockConfig+0x218>)
 800838a:	f7fa fe6b 	bl	8003064 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800838e:	4b40      	ldr	r3, [pc, #256]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	493d      	ldr	r1, [pc, #244]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 800839c:	4313      	orrs	r3, r2
 800839e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d059      	beq.n	8008460 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d010      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x166>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d00c      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x166>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d008      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x166>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d004      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x166>
 80083cc:	f240 2185 	movw	r1, #645	@ 0x285
 80083d0:	482d      	ldr	r0, [pc, #180]	@ (8008488 <HAL_RCC_ClockConfig+0x218>)
 80083d2:	f7fa fe47 	bl	8003064 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d107      	bne.n	80083ee <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083de:	4b2c      	ldr	r3, [pc, #176]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d119      	bne.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e0bf      	b.n	800856e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d003      	beq.n	80083fe <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d107      	bne.n	800840e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083fe:	4b24      	ldr	r3, [pc, #144]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e0af      	b.n	800856e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800840e:	4b20      	ldr	r3, [pc, #128]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e0a7      	b.n	800856e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800841e:	4b1c      	ldr	r3, [pc, #112]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f023 0203 	bic.w	r2, r3, #3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4919      	ldr	r1, [pc, #100]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 800842c:	4313      	orrs	r3, r2
 800842e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008430:	f7fb f9bc 	bl	80037ac <HAL_GetTick>
 8008434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008436:	e00a      	b.n	800844e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008438:	f7fb f9b8 	bl	80037ac <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008446:	4293      	cmp	r3, r2
 8008448:	d901      	bls.n	800844e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e08f      	b.n	800856e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844e:	4b10      	ldr	r3, [pc, #64]	@ (8008490 <HAL_RCC_ClockConfig+0x220>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 020c 	and.w	r2, r3, #12
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	429a      	cmp	r2, r3
 800845e:	d1eb      	bne.n	8008438 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008460:	4b0a      	ldr	r3, [pc, #40]	@ (800848c <HAL_RCC_ClockConfig+0x21c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0307 	and.w	r3, r3, #7
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d212      	bcs.n	8008494 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846e:	4b07      	ldr	r3, [pc, #28]	@ (800848c <HAL_RCC_ClockConfig+0x21c>)
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008476:	4b05      	ldr	r3, [pc, #20]	@ (800848c <HAL_RCC_ClockConfig+0x21c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0307 	and.w	r3, r3, #7
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d007      	beq.n	8008494 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e072      	b.n	800856e <HAL_RCC_ClockConfig+0x2fe>
 8008488:	08011b20 	.word	0x08011b20
 800848c:	40023c00 	.word	0x40023c00
 8008490:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d025      	beq.n	80084ec <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d018      	beq.n	80084da <HAL_RCC_ClockConfig+0x26a>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b0:	d013      	beq.n	80084da <HAL_RCC_ClockConfig+0x26a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084ba:	d00e      	beq.n	80084da <HAL_RCC_ClockConfig+0x26a>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80084c4:	d009      	beq.n	80084da <HAL_RCC_ClockConfig+0x26a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80084ce:	d004      	beq.n	80084da <HAL_RCC_ClockConfig+0x26a>
 80084d0:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80084d4:	4828      	ldr	r0, [pc, #160]	@ (8008578 <HAL_RCC_ClockConfig+0x308>)
 80084d6:	f7fa fdc5 	bl	8003064 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084da:	4b28      	ldr	r3, [pc, #160]	@ (800857c <HAL_RCC_ClockConfig+0x30c>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	4925      	ldr	r1, [pc, #148]	@ (800857c <HAL_RCC_ClockConfig+0x30c>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d026      	beq.n	8008546 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d018      	beq.n	8008532 <HAL_RCC_ClockConfig+0x2c2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008508:	d013      	beq.n	8008532 <HAL_RCC_ClockConfig+0x2c2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008512:	d00e      	beq.n	8008532 <HAL_RCC_ClockConfig+0x2c2>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800851c:	d009      	beq.n	8008532 <HAL_RCC_ClockConfig+0x2c2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8008526:	d004      	beq.n	8008532 <HAL_RCC_ClockConfig+0x2c2>
 8008528:	f240 21ca 	movw	r1, #714	@ 0x2ca
 800852c:	4812      	ldr	r0, [pc, #72]	@ (8008578 <HAL_RCC_ClockConfig+0x308>)
 800852e:	f7fa fd99 	bl	8003064 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008532:	4b12      	ldr	r3, [pc, #72]	@ (800857c <HAL_RCC_ClockConfig+0x30c>)
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	490e      	ldr	r1, [pc, #56]	@ (800857c <HAL_RCC_ClockConfig+0x30c>)
 8008542:	4313      	orrs	r3, r2
 8008544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008546:	f000 f821 	bl	800858c <HAL_RCC_GetSysClockFreq>
 800854a:	4602      	mov	r2, r0
 800854c:	4b0b      	ldr	r3, [pc, #44]	@ (800857c <HAL_RCC_ClockConfig+0x30c>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	091b      	lsrs	r3, r3, #4
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	490a      	ldr	r1, [pc, #40]	@ (8008580 <HAL_RCC_ClockConfig+0x310>)
 8008558:	5ccb      	ldrb	r3, [r1, r3]
 800855a:	fa22 f303 	lsr.w	r3, r2, r3
 800855e:	4a09      	ldr	r2, [pc, #36]	@ (8008584 <HAL_RCC_ClockConfig+0x314>)
 8008560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008562:	4b09      	ldr	r3, [pc, #36]	@ (8008588 <HAL_RCC_ClockConfig+0x318>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7fb f8dc 	bl	8003724 <HAL_InitTick>

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	08011b20 	.word	0x08011b20
 800857c:	40023800 	.word	0x40023800
 8008580:	08011c4c 	.word	0x08011c4c
 8008584:	20000000 	.word	0x20000000
 8008588:	20000004 	.word	0x20000004

0800858c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800858c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008590:	b094      	sub	sp, #80	@ 0x50
 8008592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085a4:	4b79      	ldr	r3, [pc, #484]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 030c 	and.w	r3, r3, #12
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d00d      	beq.n	80085cc <HAL_RCC_GetSysClockFreq+0x40>
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	f200 80e1 	bhi.w	8008778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_RCC_GetSysClockFreq+0x34>
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d003      	beq.n	80085c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80085be:	e0db      	b.n	8008778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085c0:	4b73      	ldr	r3, [pc, #460]	@ (8008790 <HAL_RCC_GetSysClockFreq+0x204>)
 80085c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80085c4:	e0db      	b.n	800877e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085c6:	4b73      	ldr	r3, [pc, #460]	@ (8008794 <HAL_RCC_GetSysClockFreq+0x208>)
 80085c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80085ca:	e0d8      	b.n	800877e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085cc:	4b6f      	ldr	r3, [pc, #444]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085d6:	4b6d      	ldr	r3, [pc, #436]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d063      	beq.n	80086aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085e2:	4b6a      	ldr	r3, [pc, #424]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	099b      	lsrs	r3, r3, #6
 80085e8:	2200      	movs	r2, #0
 80085ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80085ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80085f6:	2300      	movs	r3, #0
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80085fe:	4622      	mov	r2, r4
 8008600:	462b      	mov	r3, r5
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f04f 0100 	mov.w	r1, #0
 800860a:	0159      	lsls	r1, r3, #5
 800860c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008610:	0150      	lsls	r0, r2, #5
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4621      	mov	r1, r4
 8008618:	1a51      	subs	r1, r2, r1
 800861a:	6139      	str	r1, [r7, #16]
 800861c:	4629      	mov	r1, r5
 800861e:	eb63 0301 	sbc.w	r3, r3, r1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008630:	4659      	mov	r1, fp
 8008632:	018b      	lsls	r3, r1, #6
 8008634:	4651      	mov	r1, sl
 8008636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800863a:	4651      	mov	r1, sl
 800863c:	018a      	lsls	r2, r1, #6
 800863e:	4651      	mov	r1, sl
 8008640:	ebb2 0801 	subs.w	r8, r2, r1
 8008644:	4659      	mov	r1, fp
 8008646:	eb63 0901 	sbc.w	r9, r3, r1
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800865a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800865e:	4690      	mov	r8, r2
 8008660:	4699      	mov	r9, r3
 8008662:	4623      	mov	r3, r4
 8008664:	eb18 0303 	adds.w	r3, r8, r3
 8008668:	60bb      	str	r3, [r7, #8]
 800866a:	462b      	mov	r3, r5
 800866c:	eb49 0303 	adc.w	r3, r9, r3
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	f04f 0200 	mov.w	r2, #0
 8008676:	f04f 0300 	mov.w	r3, #0
 800867a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800867e:	4629      	mov	r1, r5
 8008680:	024b      	lsls	r3, r1, #9
 8008682:	4621      	mov	r1, r4
 8008684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008688:	4621      	mov	r1, r4
 800868a:	024a      	lsls	r2, r1, #9
 800868c:	4610      	mov	r0, r2
 800868e:	4619      	mov	r1, r3
 8008690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008692:	2200      	movs	r2, #0
 8008694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800869c:	f7f8 fa8c 	bl	8000bb8 <__aeabi_uldivmod>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4613      	mov	r3, r2
 80086a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086a8:	e058      	b.n	800875c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086aa:	4b38      	ldr	r3, [pc, #224]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	099b      	lsrs	r3, r3, #6
 80086b0:	2200      	movs	r2, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	4611      	mov	r1, r2
 80086b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80086ba:	623b      	str	r3, [r7, #32]
 80086bc:	2300      	movs	r3, #0
 80086be:	627b      	str	r3, [r7, #36]	@ 0x24
 80086c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80086c4:	4642      	mov	r2, r8
 80086c6:	464b      	mov	r3, r9
 80086c8:	f04f 0000 	mov.w	r0, #0
 80086cc:	f04f 0100 	mov.w	r1, #0
 80086d0:	0159      	lsls	r1, r3, #5
 80086d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086d6:	0150      	lsls	r0, r2, #5
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4641      	mov	r1, r8
 80086de:	ebb2 0a01 	subs.w	sl, r2, r1
 80086e2:	4649      	mov	r1, r9
 80086e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	f04f 0300 	mov.w	r3, #0
 80086f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80086f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80086f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80086fc:	ebb2 040a 	subs.w	r4, r2, sl
 8008700:	eb63 050b 	sbc.w	r5, r3, fp
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	00eb      	lsls	r3, r5, #3
 800870e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008712:	00e2      	lsls	r2, r4, #3
 8008714:	4614      	mov	r4, r2
 8008716:	461d      	mov	r5, r3
 8008718:	4643      	mov	r3, r8
 800871a:	18e3      	adds	r3, r4, r3
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	464b      	mov	r3, r9
 8008720:	eb45 0303 	adc.w	r3, r5, r3
 8008724:	607b      	str	r3, [r7, #4]
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008732:	4629      	mov	r1, r5
 8008734:	028b      	lsls	r3, r1, #10
 8008736:	4621      	mov	r1, r4
 8008738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800873c:	4621      	mov	r1, r4
 800873e:	028a      	lsls	r2, r1, #10
 8008740:	4610      	mov	r0, r2
 8008742:	4619      	mov	r1, r3
 8008744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008746:	2200      	movs	r2, #0
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	61fa      	str	r2, [r7, #28]
 800874c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008750:	f7f8 fa32 	bl	8000bb8 <__aeabi_uldivmod>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4613      	mov	r3, r2
 800875a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800875c:	4b0b      	ldr	r3, [pc, #44]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	0c1b      	lsrs	r3, r3, #16
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	3301      	adds	r3, #1
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800876c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800876e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008770:	fbb2 f3f3 	udiv	r3, r2, r3
 8008774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008776:	e002      	b.n	800877e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008778:	4b05      	ldr	r3, [pc, #20]	@ (8008790 <HAL_RCC_GetSysClockFreq+0x204>)
 800877a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800877c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800877e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008780:	4618      	mov	r0, r3
 8008782:	3750      	adds	r7, #80	@ 0x50
 8008784:	46bd      	mov	sp, r7
 8008786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800878a:	bf00      	nop
 800878c:	40023800 	.word	0x40023800
 8008790:	00f42400 	.word	0x00f42400
 8008794:	007a1200 	.word	0x007a1200

08008798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800879c:	4b03      	ldr	r3, [pc, #12]	@ (80087ac <HAL_RCC_GetHCLKFreq+0x14>)
 800879e:	681b      	ldr	r3, [r3, #0]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000000 	.word	0x20000000

080087b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80087b4:	f7ff fff0 	bl	8008798 <HAL_RCC_GetHCLKFreq>
 80087b8:	4602      	mov	r2, r0
 80087ba:	4b05      	ldr	r3, [pc, #20]	@ (80087d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	0a9b      	lsrs	r3, r3, #10
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	4903      	ldr	r1, [pc, #12]	@ (80087d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087c6:	5ccb      	ldrb	r3, [r1, r3]
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	40023800 	.word	0x40023800
 80087d4:	08011c5c 	.word	0x08011c5c

080087d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80087dc:	f7ff ffdc 	bl	8008798 <HAL_RCC_GetHCLKFreq>
 80087e0:	4602      	mov	r2, r0
 80087e2:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	0b5b      	lsrs	r3, r3, #13
 80087e8:	f003 0307 	and.w	r3, r3, #7
 80087ec:	4903      	ldr	r1, [pc, #12]	@ (80087fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80087ee:	5ccb      	ldrb	r3, [r1, r3]
 80087f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	40023800 	.word	0x40023800
 80087fc:	08011c5c 	.word	0x08011c5c

08008800 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b0f      	cmp	r3, #15
 800881e:	d904      	bls.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8008820:	f640 11fd 	movw	r1, #2557	@ 0x9fd
 8008824:	4834      	ldr	r0, [pc, #208]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008826:	f7fa fc1d 	bl	8003064 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x42>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800883e:	2b00      	cmp	r3, #0
 8008840:	d066      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d903      	bls.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	2b07      	cmp	r3, #7
 8008850:	d904      	bls.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008852:	f640 2104 	movw	r1, #2564	@ 0xa04
 8008856:	4828      	ldr	r0, [pc, #160]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008858:	f7fa fc04 	bl	8003064 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	2b31      	cmp	r3, #49	@ 0x31
 8008862:	d904      	bls.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 800886c:	d904      	bls.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800886e:	f640 2105 	movw	r1, #2565	@ 0xa05
 8008872:	4821      	ldr	r0, [pc, #132]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008874:	f7fa fbf6 	bl	8003064 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d903      	bls.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	2b3f      	cmp	r3, #63	@ 0x3f
 8008886:	d904      	bls.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8008888:	f640 2107 	movw	r1, #2567	@ 0xa07
 800888c:	481a      	ldr	r0, [pc, #104]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800888e:	f7fa fbe9 	bl	8003064 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008892:	4b1a      	ldr	r3, [pc, #104]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008898:	f7fa ff88 	bl	80037ac <HAL_GetTick>
 800889c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800889e:	e008      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088a0:	f7fa ff84 	bl	80037ac <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e1b3      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088b2:	4b13      	ldr	r3, [pc, #76]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	019b      	lsls	r3, r3, #6
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	071b      	lsls	r3, r3, #28
 80088d0:	490b      	ldr	r1, [pc, #44]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088d8:	4b08      	ldr	r3, [pc, #32]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80088da:	2201      	movs	r2, #1
 80088dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088de:	f7fa ff65 	bl	80037ac <HAL_GetTick>
 80088e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088e4:	e00e      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088e6:	f7fa ff61 	bl	80037ac <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d907      	bls.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e190      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80088f8:	08011b58 	.word	0x08011b58
 80088fc:	42470068 	.word	0x42470068
 8008900:	40023800 	.word	0x40023800
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008904:	4b88      	ldr	r3, [pc, #544]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0ea      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 8173 	beq.w	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008926:	f000 80a6 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008932:	f000 80a0 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	4a7c      	ldr	r2, [pc, #496]	@ (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	f000 809a 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	4a7a      	ldr	r2, [pc, #488]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008948:	4293      	cmp	r3, r2
 800894a:	f000 8094 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	4a78      	ldr	r2, [pc, #480]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008954:	4293      	cmp	r3, r2
 8008956:	f000 808e 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	4a76      	ldr	r2, [pc, #472]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008960:	4293      	cmp	r3, r2
 8008962:	f000 8088 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	4a74      	ldr	r2, [pc, #464]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	f000 8082 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	4a72      	ldr	r2, [pc, #456]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d07c      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	4a70      	ldr	r2, [pc, #448]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d077      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	4a6f      	ldr	r2, [pc, #444]	@ (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d072      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	4a6d      	ldr	r2, [pc, #436]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d06d      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	4a6c      	ldr	r2, [pc, #432]	@ (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d068      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	4a6a      	ldr	r2, [pc, #424]	@ (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d063      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	4a69      	ldr	r2, [pc, #420]	@ (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d05e      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	4a67      	ldr	r2, [pc, #412]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d059      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	4a66      	ldr	r2, [pc, #408]	@ (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d054      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	4a64      	ldr	r2, [pc, #400]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d04f      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	4a63      	ldr	r2, [pc, #396]	@ (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d04a      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	4a61      	ldr	r2, [pc, #388]	@ (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d045      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	4a60      	ldr	r2, [pc, #384]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d040      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	4a5e      	ldr	r2, [pc, #376]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d03b      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	4a5d      	ldr	r2, [pc, #372]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d036      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	4a5b      	ldr	r2, [pc, #364]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d031      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	4a5a      	ldr	r2, [pc, #360]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d02c      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	4a58      	ldr	r2, [pc, #352]	@ (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d027      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	4a57      	ldr	r2, [pc, #348]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d022      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	4a55      	ldr	r2, [pc, #340]	@ (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d01d      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	4a54      	ldr	r2, [pc, #336]	@ (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d018      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	4a52      	ldr	r2, [pc, #328]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d013      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	4a51      	ldr	r2, [pc, #324]	@ (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00e      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d009      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	4a4e      	ldr	r2, [pc, #312]	@ (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d004      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a6c:	f640 2137 	movw	r1, #2615	@ 0xa37
 8008a70:	484c      	ldr	r0, [pc, #304]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8008a72:	f7fa faf7 	bl	8003064 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a86:	4b28      	ldr	r3, [pc, #160]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008a92:	4b45      	ldr	r3, [pc, #276]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a44      	ldr	r2, [pc, #272]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a9e:	f7fa fe85 	bl	80037ac <HAL_GetTick>
 8008aa2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aa6:	f7fa fe81 	bl	80037ac <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e0b0      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0f0      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ac4:	4b18      	ldr	r3, [pc, #96]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008acc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d073      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d06c      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ae2:	4b11      	ldr	r3, [pc, #68]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008aec:	4b2f      	ldr	r3, [pc, #188]	@ (8008bac <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008af2:	4b2e      	ldr	r3, [pc, #184]	@ (8008bac <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008af8:	4a0b      	ldr	r2, [pc, #44]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008afe:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d158      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b0a:	f7fa fe4f 	bl	80037ac <HAL_GetTick>
 8008b0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b10:	e04e      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b12:	f7fa fe4b 	bl	80037ac <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d945      	bls.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e078      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008b28:	40023800 	.word	0x40023800
 8008b2c:	00020300 	.word	0x00020300
 8008b30:	00030300 	.word	0x00030300
 8008b34:	00040300 	.word	0x00040300
 8008b38:	00050300 	.word	0x00050300
 8008b3c:	00060300 	.word	0x00060300
 8008b40:	00070300 	.word	0x00070300
 8008b44:	00080300 	.word	0x00080300
 8008b48:	00090300 	.word	0x00090300
 8008b4c:	000a0300 	.word	0x000a0300
 8008b50:	000b0300 	.word	0x000b0300
 8008b54:	000c0300 	.word	0x000c0300
 8008b58:	000d0300 	.word	0x000d0300
 8008b5c:	000e0300 	.word	0x000e0300
 8008b60:	000f0300 	.word	0x000f0300
 8008b64:	00100300 	.word	0x00100300
 8008b68:	00110300 	.word	0x00110300
 8008b6c:	00120300 	.word	0x00120300
 8008b70:	00130300 	.word	0x00130300
 8008b74:	00140300 	.word	0x00140300
 8008b78:	00150300 	.word	0x00150300
 8008b7c:	00160300 	.word	0x00160300
 8008b80:	00170300 	.word	0x00170300
 8008b84:	00180300 	.word	0x00180300
 8008b88:	00190300 	.word	0x00190300
 8008b8c:	001a0300 	.word	0x001a0300
 8008b90:	001b0300 	.word	0x001b0300
 8008b94:	001c0300 	.word	0x001c0300
 8008b98:	001d0300 	.word	0x001d0300
 8008b9c:	001e0300 	.word	0x001e0300
 8008ba0:	001f0300 	.word	0x001f0300
 8008ba4:	08011b58 	.word	0x08011b58
 8008ba8:	40007000 	.word	0x40007000
 8008bac:	42470e40 	.word	0x42470e40
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0aa      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bc8:	d10d      	bne.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008bca:	4b16      	ldr	r3, [pc, #88]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bde:	4911      	ldr	r1, [pc, #68]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	608b      	str	r3, [r1, #8]
 8008be4:	e005      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008be6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	4a0e      	ldr	r2, [pc, #56]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008bf0:	6093      	str	r3, [r2, #8]
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bf4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bfe:	4909      	ldr	r1, [pc, #36]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7d1a      	ldrb	r2, [r3, #20]
 8008c14:	4b04      	ldr	r3, [pc, #16]	@ (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8008c16:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	40023800 	.word	0x40023800
 8008c28:	424711e0 	.word	0x424711e0

08008c2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d141      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008c4a:	4b25      	ldr	r3, [pc, #148]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c60:	d131      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c62:	4b20      	ldr	r3, [pc, #128]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008c64:	617b      	str	r3, [r7, #20]
          break;
 8008c66:	e031      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008c68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c74:	d109      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008c76:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c80:	4a19      	ldr	r2, [pc, #100]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	e008      	b.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008c8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c94:	4a15      	ldr	r2, [pc, #84]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8008c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008c9c:	4b10      	ldr	r3, [pc, #64]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ca2:	099b      	lsrs	r3, r3, #6
 8008ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	fb02 f303 	mul.w	r3, r2, r3
 8008cae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cb6:	0f1b      	lsrs	r3, r3, #28
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc2:	617b      	str	r3, [r7, #20]
          break;
 8008cc4:	e002      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]
          break;
 8008cca:	bf00      	nop
        }
      }
      break;
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8008cce:	bf00      	nop
    }
  }
  return frequency;
 8008cd0:	697b      	ldr	r3, [r7, #20]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40023800 	.word	0x40023800
 8008ce4:	00bb8000 	.word	0x00bb8000
 8008ce8:	007a1200 	.word	0x007a1200
 8008cec:	00f42400 	.word	0x00f42400

08008cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e18c      	b.n	800901c <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a75      	ldr	r2, [pc, #468]	@ (8008edc <HAL_SPI_Init+0x1ec>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d018      	beq.n	8008d3e <HAL_SPI_Init+0x4e>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a73      	ldr	r2, [pc, #460]	@ (8008ee0 <HAL_SPI_Init+0x1f0>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d013      	beq.n	8008d3e <HAL_SPI_Init+0x4e>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a72      	ldr	r2, [pc, #456]	@ (8008ee4 <HAL_SPI_Init+0x1f4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00e      	beq.n	8008d3e <HAL_SPI_Init+0x4e>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a70      	ldr	r2, [pc, #448]	@ (8008ee8 <HAL_SPI_Init+0x1f8>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d009      	beq.n	8008d3e <HAL_SPI_Init+0x4e>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a6f      	ldr	r2, [pc, #444]	@ (8008eec <HAL_SPI_Init+0x1fc>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d004      	beq.n	8008d3e <HAL_SPI_Init+0x4e>
 8008d34:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8008d38:	486d      	ldr	r0, [pc, #436]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008d3a:	f7fa f993 	bl	8003064 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <HAL_SPI_Init+0x6a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d4e:	d004      	beq.n	8008d5a <HAL_SPI_Init+0x6a>
 8008d50:	f240 1141 	movw	r1, #321	@ 0x141
 8008d54:	4866      	ldr	r0, [pc, #408]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008d56:	f7fa f985 	bl	8003064 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00e      	beq.n	8008d80 <HAL_SPI_Init+0x90>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d6a:	d009      	beq.n	8008d80 <HAL_SPI_Init+0x90>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d74:	d004      	beq.n	8008d80 <HAL_SPI_Init+0x90>
 8008d76:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8008d7a:	485d      	ldr	r0, [pc, #372]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008d7c:	f7fa f972 	bl	8003064 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d88:	d008      	beq.n	8008d9c <HAL_SPI_Init+0xac>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d004      	beq.n	8008d9c <HAL_SPI_Init+0xac>
 8008d92:	f240 1143 	movw	r1, #323	@ 0x143
 8008d96:	4856      	ldr	r0, [pc, #344]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008d98:	f7fa f964 	bl	8003064 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008da4:	d00d      	beq.n	8008dc2 <HAL_SPI_Init+0xd2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <HAL_SPI_Init+0xd2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008db6:	d004      	beq.n	8008dc2 <HAL_SPI_Init+0xd2>
 8008db8:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8008dbc:	484c      	ldr	r0, [pc, #304]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008dbe:	f7fa f951 	bl	8003064 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d020      	beq.n	8008e0c <HAL_SPI_Init+0x11c>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	d01c      	beq.n	8008e0c <HAL_SPI_Init+0x11c>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	2b10      	cmp	r3, #16
 8008dd8:	d018      	beq.n	8008e0c <HAL_SPI_Init+0x11c>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	2b18      	cmp	r3, #24
 8008de0:	d014      	beq.n	8008e0c <HAL_SPI_Init+0x11c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d010      	beq.n	8008e0c <HAL_SPI_Init+0x11c>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	2b28      	cmp	r3, #40	@ 0x28
 8008df0:	d00c      	beq.n	8008e0c <HAL_SPI_Init+0x11c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	2b30      	cmp	r3, #48	@ 0x30
 8008df8:	d008      	beq.n	8008e0c <HAL_SPI_Init+0x11c>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	2b38      	cmp	r3, #56	@ 0x38
 8008e00:	d004      	beq.n	8008e0c <HAL_SPI_Init+0x11c>
 8008e02:	f240 1145 	movw	r1, #325	@ 0x145
 8008e06:	483a      	ldr	r0, [pc, #232]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008e08:	f7fa f92c 	bl	8003064 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d008      	beq.n	8008e26 <HAL_SPI_Init+0x136>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	2b80      	cmp	r3, #128	@ 0x80
 8008e1a:	d004      	beq.n	8008e26 <HAL_SPI_Init+0x136>
 8008e1c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8008e20:	4833      	ldr	r0, [pc, #204]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008e22:	f7fa f91f 	bl	8003064 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d008      	beq.n	8008e40 <HAL_SPI_Init+0x150>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d004      	beq.n	8008e40 <HAL_SPI_Init+0x150>
 8008e36:	f240 1147 	movw	r1, #327	@ 0x147
 8008e3a:	482d      	ldr	r0, [pc, #180]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008e3c:	f7fa f912 	bl	8003064 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d155      	bne.n	8008ef4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d008      	beq.n	8008e62 <HAL_SPI_Init+0x172>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d004      	beq.n	8008e62 <HAL_SPI_Init+0x172>
 8008e58:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8008e5c:	4824      	ldr	r0, [pc, #144]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008e5e:	f7fa f901 	bl	8003064 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d008      	beq.n	8008e7c <HAL_SPI_Init+0x18c>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d004      	beq.n	8008e7c <HAL_SPI_Init+0x18c>
 8008e72:	f240 114b 	movw	r1, #331	@ 0x14b
 8008e76:	481e      	ldr	r0, [pc, #120]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008e78:	f7fa f8f4 	bl	8003064 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e84:	d125      	bne.n	8008ed2 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d05d      	beq.n	8008f4a <HAL_SPI_Init+0x25a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d059      	beq.n	8008f4a <HAL_SPI_Init+0x25a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	2b10      	cmp	r3, #16
 8008e9c:	d055      	beq.n	8008f4a <HAL_SPI_Init+0x25a>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	2b18      	cmp	r3, #24
 8008ea4:	d051      	beq.n	8008f4a <HAL_SPI_Init+0x25a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	2b20      	cmp	r3, #32
 8008eac:	d04d      	beq.n	8008f4a <HAL_SPI_Init+0x25a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	2b28      	cmp	r3, #40	@ 0x28
 8008eb4:	d049      	beq.n	8008f4a <HAL_SPI_Init+0x25a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	2b30      	cmp	r3, #48	@ 0x30
 8008ebc:	d045      	beq.n	8008f4a <HAL_SPI_Init+0x25a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	2b38      	cmp	r3, #56	@ 0x38
 8008ec4:	d041      	beq.n	8008f4a <HAL_SPI_Init+0x25a>
 8008ec6:	f240 114f 	movw	r1, #335	@ 0x14f
 8008eca:	4809      	ldr	r0, [pc, #36]	@ (8008ef0 <HAL_SPI_Init+0x200>)
 8008ecc:	f7fa f8ca 	bl	8003064 <assert_failed>
 8008ed0:	e03b      	b.n	8008f4a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	61da      	str	r2, [r3, #28]
 8008ed8:	e037      	b.n	8008f4a <HAL_SPI_Init+0x25a>
 8008eda:	bf00      	nop
 8008edc:	40013000 	.word	0x40013000
 8008ee0:	40003800 	.word	0x40003800
 8008ee4:	40003c00 	.word	0x40003c00
 8008ee8:	40013400 	.word	0x40013400
 8008eec:	40015000 	.word	0x40015000
 8008ef0:	08011b94 	.word	0x08011b94
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d020      	beq.n	8008f3e <HAL_SPI_Init+0x24e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d01c      	beq.n	8008f3e <HAL_SPI_Init+0x24e>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	2b10      	cmp	r3, #16
 8008f0a:	d018      	beq.n	8008f3e <HAL_SPI_Init+0x24e>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	2b18      	cmp	r3, #24
 8008f12:	d014      	beq.n	8008f3e <HAL_SPI_Init+0x24e>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	d010      	beq.n	8008f3e <HAL_SPI_Init+0x24e>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	2b28      	cmp	r3, #40	@ 0x28
 8008f22:	d00c      	beq.n	8008f3e <HAL_SPI_Init+0x24e>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	2b30      	cmp	r3, #48	@ 0x30
 8008f2a:	d008      	beq.n	8008f3e <HAL_SPI_Init+0x24e>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	2b38      	cmp	r3, #56	@ 0x38
 8008f32:	d004      	beq.n	8008f3e <HAL_SPI_Init+0x24e>
 8008f34:	f240 1159 	movw	r1, #345	@ 0x159
 8008f38:	483a      	ldr	r0, [pc, #232]	@ (8009024 <HAL_SPI_Init+0x334>)
 8008f3a:	f7fa f893 	bl	8003064 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7fa f8bf 	bl	80030e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fce:	ea42 0103 	orr.w	r1, r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	0c1b      	lsrs	r3, r3, #16
 8008fe8:	f003 0104 	and.w	r1, r3, #4
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff0:	f003 0210 	and.w	r2, r3, #16
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	69da      	ldr	r2, [r3, #28]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800900a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	08011b94 	.word	0x08011b94

08009028 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	4613      	mov	r3, r2
 8009036:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d009      	beq.n	8009054 <HAL_SPI_Transmit+0x2c>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009048:	d004      	beq.n	8009054 <HAL_SPI_Transmit+0x2c>
 800904a:	f240 3107 	movw	r1, #775	@ 0x307
 800904e:	4886      	ldr	r0, [pc, #536]	@ (8009268 <HAL_SPI_Transmit+0x240>)
 8009050:	f7fa f808 	bl	8003064 <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009054:	f7fa fbaa 	bl	80037ac <HAL_GetTick>
 8009058:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b01      	cmp	r3, #1
 8009068:	d001      	beq.n	800906e <HAL_SPI_Transmit+0x46>
  {
    return HAL_BUSY;
 800906a:	2302      	movs	r3, #2
 800906c:	e12c      	b.n	80092c8 <HAL_SPI_Transmit+0x2a0>
  }

  if ((pData == NULL) || (Size == 0U))
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <HAL_SPI_Transmit+0x52>
 8009074:	88fb      	ldrh	r3, [r7, #6]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_SPI_Transmit+0x56>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e124      	b.n	80092c8 <HAL_SPI_Transmit+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_SPI_Transmit+0x64>
 8009088:	2302      	movs	r3, #2
 800908a:	e11d      	b.n	80092c8 <HAL_SPI_Transmit+0x2a0>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2203      	movs	r2, #3
 8009098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	88fa      	ldrh	r2, [r7, #6]
 80090ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	88fa      	ldrh	r2, [r7, #6]
 80090b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090da:	d10f      	bne.n	80090fc <HAL_SPI_Transmit+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009106:	2b40      	cmp	r3, #64	@ 0x40
 8009108:	d007      	beq.n	800911a <HAL_SPI_Transmit+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009122:	d152      	bne.n	80091ca <HAL_SPI_Transmit+0x1a2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <HAL_SPI_Transmit+0x10a>
 800912c:	8b7b      	ldrh	r3, [r7, #26]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d145      	bne.n	80091be <HAL_SPI_Transmit+0x196>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009136:	881a      	ldrh	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009142:	1c9a      	adds	r2, r3, #2
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800914c:	b29b      	uxth	r3, r3
 800914e:	3b01      	subs	r3, #1
 8009150:	b29a      	uxth	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009156:	e032      	b.n	80091be <HAL_SPI_Transmit+0x196>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b02      	cmp	r3, #2
 8009164:	d112      	bne.n	800918c <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916a:	881a      	ldrh	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	1c9a      	adds	r2, r3, #2
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009180:	b29b      	uxth	r3, r3
 8009182:	3b01      	subs	r3, #1
 8009184:	b29a      	uxth	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	86da      	strh	r2, [r3, #54]	@ 0x36
 800918a:	e018      	b.n	80091be <HAL_SPI_Transmit+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800918c:	f7fa fb0e 	bl	80037ac <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d803      	bhi.n	80091a4 <HAL_SPI_Transmit+0x17c>
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a2:	d102      	bne.n	80091aa <HAL_SPI_Transmit+0x182>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d109      	bne.n	80091be <HAL_SPI_Transmit+0x196>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e084      	b.n	80092c8 <HAL_SPI_Transmit+0x2a0>
    while (hspi->TxXferCount > 0U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1c7      	bne.n	8009158 <HAL_SPI_Transmit+0x130>
 80091c8:	e055      	b.n	8009276 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <HAL_SPI_Transmit+0x1b0>
 80091d2:	8b7b      	ldrh	r3, [r7, #26]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d149      	bne.n	800926c <HAL_SPI_Transmit+0x244>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	330c      	adds	r3, #12
 80091e2:	7812      	ldrb	r2, [r2, #0]
 80091e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	3b01      	subs	r3, #1
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80091fe:	e035      	b.n	800926c <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b02      	cmp	r3, #2
 800920c:	d113      	bne.n	8009236 <HAL_SPI_Transmit+0x20e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	330c      	adds	r3, #12
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800922a:	b29b      	uxth	r3, r3
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009234:	e01a      	b.n	800926c <HAL_SPI_Transmit+0x244>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009236:	f7fa fab9 	bl	80037ac <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d803      	bhi.n	800924e <HAL_SPI_Transmit+0x226>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924c:	d102      	bne.n	8009254 <HAL_SPI_Transmit+0x22c>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <HAL_SPI_Transmit+0x244>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e02f      	b.n	80092c8 <HAL_SPI_Transmit+0x2a0>
 8009268:	08011b94 	.word	0x08011b94
    while (hspi->TxXferCount > 0U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1c4      	bne.n	8009200 <HAL_SPI_Transmit+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fa74 	bl	8009768 <SPI_EndRxTxTransaction>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <HAL_SPI_Transmit+0x29e>
  {
    return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e000      	b.n	80092c8 <HAL_SPI_Transmit+0x2a0>
  }
  else
  {
    return HAL_OK;
 80092c6:	2300      	movs	r3, #0
  }
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3720      	adds	r7, #32
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	@ 0x28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80092de:	2301      	movs	r3, #1
 80092e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d004      	beq.n	80092f4 <HAL_SPI_TransmitReceive+0x24>
 80092ea:	f240 417e 	movw	r1, #1150	@ 0x47e
 80092ee:	4884      	ldr	r0, [pc, #528]	@ (8009500 <HAL_SPI_TransmitReceive+0x230>)
 80092f0:	f7f9 feb8 	bl	8003064 <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092f4:	f7fa fa5a 	bl	80037ac <HAL_GetTick>
 80092f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009300:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009308:	887b      	ldrh	r3, [r7, #2]
 800930a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800930c:	7ffb      	ldrb	r3, [r7, #31]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d00c      	beq.n	800932c <HAL_SPI_TransmitReceive+0x5c>
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009318:	d106      	bne.n	8009328 <HAL_SPI_TransmitReceive+0x58>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <HAL_SPI_TransmitReceive+0x58>
 8009322:	7ffb      	ldrb	r3, [r7, #31]
 8009324:	2b04      	cmp	r3, #4
 8009326:	d001      	beq.n	800932c <HAL_SPI_TransmitReceive+0x5c>
  {
    return HAL_BUSY;
 8009328:	2302      	movs	r3, #2
 800932a:	e182      	b.n	8009632 <HAL_SPI_TransmitReceive+0x362>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d005      	beq.n	800933e <HAL_SPI_TransmitReceive+0x6e>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <HAL_SPI_TransmitReceive+0x6e>
 8009338:	887b      	ldrh	r3, [r7, #2]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <HAL_SPI_TransmitReceive+0x72>
  {
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e177      	b.n	8009632 <HAL_SPI_TransmitReceive+0x362>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_SPI_TransmitReceive+0x80>
 800934c:	2302      	movs	r3, #2
 800934e:	e170      	b.n	8009632 <HAL_SPI_TransmitReceive+0x362>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b04      	cmp	r3, #4
 8009362:	d003      	beq.n	800936c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2205      	movs	r2, #5
 8009368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	887a      	ldrh	r2, [r7, #2]
 800937c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	887a      	ldrh	r2, [r7, #2]
 8009382:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	887a      	ldrh	r2, [r7, #2]
 800938e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	887a      	ldrh	r2, [r7, #2]
 8009394:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ac:	2b40      	cmp	r3, #64	@ 0x40
 80093ae:	d007      	beq.n	80093c0 <HAL_SPI_TransmitReceive+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093c8:	d17e      	bne.n	80094c8 <HAL_SPI_TransmitReceive+0x1f8>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <HAL_SPI_TransmitReceive+0x108>
 80093d2:	8afb      	ldrh	r3, [r7, #22]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d16c      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x1e2>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093dc:	881a      	ldrh	r2, [r3, #0]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e8:	1c9a      	adds	r2, r3, #2
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3b01      	subs	r3, #1
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093fc:	e059      	b.n	80094b2 <HAL_SPI_TransmitReceive+0x1e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b02      	cmp	r3, #2
 800940a:	d11b      	bne.n	8009444 <HAL_SPI_TransmitReceive+0x174>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009410:	b29b      	uxth	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d016      	beq.n	8009444 <HAL_SPI_TransmitReceive+0x174>
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	2b01      	cmp	r3, #1
 800941a:	d113      	bne.n	8009444 <HAL_SPI_TransmitReceive+0x174>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009420:	881a      	ldrh	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942c:	1c9a      	adds	r2, r3, #2
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009436:	b29b      	uxth	r3, r3
 8009438:	3b01      	subs	r3, #1
 800943a:	b29a      	uxth	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b01      	cmp	r3, #1
 8009450:	d119      	bne.n	8009486 <HAL_SPI_TransmitReceive+0x1b6>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009456:	b29b      	uxth	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d014      	beq.n	8009486 <HAL_SPI_TransmitReceive+0x1b6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009466:	b292      	uxth	r2, r2
 8009468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946e:	1c9a      	adds	r2, r3, #2
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009478:	b29b      	uxth	r3, r3
 800947a:	3b01      	subs	r3, #1
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009482:	2301      	movs	r3, #1
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009486:	f7fa f991 	bl	80037ac <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009492:	429a      	cmp	r2, r3
 8009494:	d80d      	bhi.n	80094b2 <HAL_SPI_TransmitReceive+0x1e2>
 8009496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949c:	d009      	beq.n	80094b2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e0bf      	b.n	8009632 <HAL_SPI_TransmitReceive+0x362>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1a0      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x12e>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d19b      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x12e>
 80094c6:	e085      	b.n	80095d4 <HAL_SPI_TransmitReceive+0x304>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <HAL_SPI_TransmitReceive+0x206>
 80094d0:	8afb      	ldrh	r3, [r7, #22]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d174      	bne.n	80095c0 <HAL_SPI_TransmitReceive+0x2f0>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	330c      	adds	r3, #12
 80094e0:	7812      	ldrb	r2, [r2, #0]
 80094e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	3b01      	subs	r3, #1
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094fc:	e060      	b.n	80095c0 <HAL_SPI_TransmitReceive+0x2f0>
 80094fe:	bf00      	nop
 8009500:	08011b94 	.word	0x08011b94
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b02      	cmp	r3, #2
 8009510:	d11c      	bne.n	800954c <HAL_SPI_TransmitReceive+0x27c>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009516:	b29b      	uxth	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d017      	beq.n	800954c <HAL_SPI_TransmitReceive+0x27c>
 800951c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951e:	2b01      	cmp	r3, #1
 8009520:	d114      	bne.n	800954c <HAL_SPI_TransmitReceive+0x27c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	330c      	adds	r3, #12
 800952c:	7812      	ldrb	r2, [r2, #0]
 800952e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b01      	cmp	r3, #1
 8009558:	d119      	bne.n	800958e <HAL_SPI_TransmitReceive+0x2be>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800955e:	b29b      	uxth	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	d014      	beq.n	800958e <HAL_SPI_TransmitReceive+0x2be>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800958a:	2301      	movs	r3, #1
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800958e:	f7fa f90d 	bl	80037ac <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800959a:	429a      	cmp	r2, r3
 800959c:	d803      	bhi.n	80095a6 <HAL_SPI_TransmitReceive+0x2d6>
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a4:	d102      	bne.n	80095ac <HAL_SPI_TransmitReceive+0x2dc>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d109      	bne.n	80095c0 <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e038      	b.n	8009632 <HAL_SPI_TransmitReceive+0x362>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d19c      	bne.n	8009504 <HAL_SPI_TransmitReceive+0x234>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d197      	bne.n	8009504 <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095d4:	6a3a      	ldr	r2, [r7, #32]
 80095d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f8c5 	bl	8009768 <SPI_EndRxTxTransaction>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d008      	beq.n	80095f6 <HAL_SPI_TransmitReceive+0x326>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2220      	movs	r2, #32
 80095e8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e01d      	b.n	8009632 <HAL_SPI_TransmitReceive+0x362>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <HAL_SPI_TransmitReceive+0x344>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095fe:	2300      	movs	r3, #0
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	613b      	str	r3, [r7, #16]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	613b      	str	r3, [r7, #16]
 8009612:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <HAL_SPI_TransmitReceive+0x360>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e000      	b.n	8009632 <HAL_SPI_TransmitReceive+0x362>
  }
  else
  {
    return HAL_OK;
 8009630:	2300      	movs	r3, #0
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3728      	adds	r7, #40	@ 0x28
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop

0800963c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800964a:	b2db      	uxtb	r3, r3
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	4613      	mov	r3, r2
 8009666:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009668:	f7fa f8a0 	bl	80037ac <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009670:	1a9b      	subs	r3, r3, r2
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	4413      	add	r3, r2
 8009676:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009678:	f7fa f898 	bl	80037ac <HAL_GetTick>
 800967c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800967e:	4b39      	ldr	r3, [pc, #228]	@ (8009764 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	015b      	lsls	r3, r3, #5
 8009684:	0d1b      	lsrs	r3, r3, #20
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	fb02 f303 	mul.w	r3, r2, r3
 800968c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800968e:	e054      	b.n	800973a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009696:	d050      	beq.n	800973a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009698:	f7fa f888 	bl	80037ac <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d902      	bls.n	80096ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d13d      	bne.n	800972a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80096bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096c6:	d111      	bne.n	80096ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096d0:	d004      	beq.n	80096dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096da:	d107      	bne.n	80096ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096f4:	d10f      	bne.n	8009716 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009714:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e017      	b.n	800975a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	3b01      	subs	r3, #1
 8009738:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4013      	ands	r3, r2
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	429a      	cmp	r2, r3
 8009748:	bf0c      	ite	eq
 800974a:	2301      	moveq	r3, #1
 800974c:	2300      	movne	r3, #0
 800974e:	b2db      	uxtb	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	429a      	cmp	r2, r3
 8009756:	d19b      	bne.n	8009690 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3720      	adds	r7, #32
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20000000 	.word	0x20000000

08009768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af02      	add	r7, sp, #8
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2201      	movs	r2, #1
 800977c:	2102      	movs	r1, #2
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7ff ff6a 	bl	8009658 <SPI_WaitFlagStateUntilTimeout>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d007      	beq.n	800979a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978e:	f043 0220 	orr.w	r2, r3, #32
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e032      	b.n	8009800 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800979a:	4b1b      	ldr	r3, [pc, #108]	@ (8009808 <SPI_EndRxTxTransaction+0xa0>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a1b      	ldr	r2, [pc, #108]	@ (800980c <SPI_EndRxTxTransaction+0xa4>)
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	0d5b      	lsrs	r3, r3, #21
 80097a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097b8:	d112      	bne.n	80097e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2200      	movs	r2, #0
 80097c2:	2180      	movs	r1, #128	@ 0x80
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7ff ff47 	bl	8009658 <SPI_WaitFlagStateUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d016      	beq.n	80097fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d4:	f043 0220 	orr.w	r2, r3, #32
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e00f      	b.n	8009800 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f6:	2b80      	cmp	r3, #128	@ 0x80
 80097f8:	d0f2      	beq.n	80097e0 <SPI_EndRxTxTransaction+0x78>
 80097fa:	e000      	b.n	80097fe <SPI_EndRxTxTransaction+0x96>
        break;
 80097fc:	bf00      	nop
  }

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000000 	.word	0x20000000
 800980c:	165e9f81 	.word	0x165e9f81

08009810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e0a3      	b.n	800996a <HAL_UART_Init+0x15a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d02c      	beq.n	8009884 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a51      	ldr	r2, [pc, #324]	@ (8009974 <HAL_UART_Init+0x164>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d00e      	beq.n	8009852 <HAL_UART_Init+0x42>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a4f      	ldr	r2, [pc, #316]	@ (8009978 <HAL_UART_Init+0x168>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d009      	beq.n	8009852 <HAL_UART_Init+0x42>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a4e      	ldr	r2, [pc, #312]	@ (800997c <HAL_UART_Init+0x16c>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d004      	beq.n	8009852 <HAL_UART_Init+0x42>
 8009848:	f240 1173 	movw	r1, #371	@ 0x173
 800984c:	484c      	ldr	r0, [pc, #304]	@ (8009980 <HAL_UART_Init+0x170>)
 800984e:	f7f9 fc09 	bl	8003064 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d028      	beq.n	80098ac <HAL_UART_Init+0x9c>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009862:	d023      	beq.n	80098ac <HAL_UART_Init+0x9c>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800986c:	d01e      	beq.n	80098ac <HAL_UART_Init+0x9c>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009876:	d019      	beq.n	80098ac <HAL_UART_Init+0x9c>
 8009878:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 800987c:	4840      	ldr	r0, [pc, #256]	@ (8009980 <HAL_UART_Init+0x170>)
 800987e:	f7f9 fbf1 	bl	8003064 <assert_failed>
 8009882:	e013      	b.n	80098ac <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a3a      	ldr	r2, [pc, #232]	@ (8009974 <HAL_UART_Init+0x164>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00e      	beq.n	80098ac <HAL_UART_Init+0x9c>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a39      	ldr	r2, [pc, #228]	@ (8009978 <HAL_UART_Init+0x168>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d009      	beq.n	80098ac <HAL_UART_Init+0x9c>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a37      	ldr	r2, [pc, #220]	@ (800997c <HAL_UART_Init+0x16c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d004      	beq.n	80098ac <HAL_UART_Init+0x9c>
 80098a2:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 80098a6:	4836      	ldr	r0, [pc, #216]	@ (8009980 <HAL_UART_Init+0x170>)
 80098a8:	f7f9 fbdc 	bl	8003064 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d009      	beq.n	80098c8 <HAL_UART_Init+0xb8>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098bc:	d004      	beq.n	80098c8 <HAL_UART_Init+0xb8>
 80098be:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 80098c2:	482f      	ldr	r0, [pc, #188]	@ (8009980 <HAL_UART_Init+0x170>)
 80098c4:	f7f9 fbce 	bl	8003064 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d009      	beq.n	80098e4 <HAL_UART_Init+0xd4>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098d8:	d004      	beq.n	80098e4 <HAL_UART_Init+0xd4>
 80098da:	f240 117b 	movw	r1, #379	@ 0x17b
 80098de:	4828      	ldr	r0, [pc, #160]	@ (8009980 <HAL_UART_Init+0x170>)
 80098e0:	f7f9 fbc0 	bl	8003064 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d106      	bne.n	80098fe <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7f9 fddb 	bl	80034b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2224      	movs	r2, #36	@ 0x24
 8009902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009914:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 f8e6 	bl	800aae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	691a      	ldr	r2, [r3, #16]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800992a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	695a      	ldr	r2, [r3, #20]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800993a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800994a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	40011000 	.word	0x40011000
 8009978:	40004400 	.word	0x40004400
 800997c:	40011400 	.word	0x40011400
 8009980:	08011bcc 	.word	0x08011bcc

08009984 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e07a      	b.n	8009a8c <HAL_HalfDuplex_Init+0x108>
  }

  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a3e      	ldr	r2, [pc, #248]	@ (8009a94 <HAL_HalfDuplex_Init+0x110>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d00e      	beq.n	80099be <HAL_HalfDuplex_Init+0x3a>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a3c      	ldr	r2, [pc, #240]	@ (8009a98 <HAL_HalfDuplex_Init+0x114>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d009      	beq.n	80099be <HAL_HalfDuplex_Init+0x3a>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a3b      	ldr	r2, [pc, #236]	@ (8009a9c <HAL_HalfDuplex_Init+0x118>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d004      	beq.n	80099be <HAL_HalfDuplex_Init+0x3a>
 80099b4:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 80099b8:	4839      	ldr	r0, [pc, #228]	@ (8009aa0 <HAL_HalfDuplex_Init+0x11c>)
 80099ba:	f7f9 fb53 	bl	8003064 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d009      	beq.n	80099da <HAL_HalfDuplex_Init+0x56>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ce:	d004      	beq.n	80099da <HAL_HalfDuplex_Init+0x56>
 80099d0:	f240 11bd 	movw	r1, #445	@ 0x1bd
 80099d4:	4832      	ldr	r0, [pc, #200]	@ (8009aa0 <HAL_HalfDuplex_Init+0x11c>)
 80099d6:	f7f9 fb45 	bl	8003064 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <HAL_HalfDuplex_Init+0x72>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	69db      	ldr	r3, [r3, #28]
 80099e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099ea:	d004      	beq.n	80099f6 <HAL_HalfDuplex_Init+0x72>
 80099ec:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80099f0:	482b      	ldr	r0, [pc, #172]	@ (8009aa0 <HAL_HalfDuplex_Init+0x11c>)
 80099f2:	f7f9 fb37 	bl	8003064 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d106      	bne.n	8009a10 <HAL_HalfDuplex_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7f9 fd52 	bl	80034b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2224      	movs	r2, #36	@ 0x24
 8009a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 f85d 	bl	800aae8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	691a      	ldr	r2, [r3, #16]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695a      	ldr	r2, [r3, #20]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8009a4c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	695a      	ldr	r2, [r3, #20]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0208 	orr.w	r2, r2, #8
 8009a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	40011000 	.word	0x40011000
 8009a98:	40004400 	.word	0x40004400
 8009a9c:	40011400 	.word	0x40011400
 8009aa0:	08011bcc 	.word	0x08011bcc

08009aa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08a      	sub	sp, #40	@ 0x28
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	d175      	bne.n	8009bb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <HAL_UART_Transmit+0x2c>
 8009aca:	88fb      	ldrh	r3, [r7, #6]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e06e      	b.n	8009bb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2221      	movs	r2, #33	@ 0x21
 8009ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ae2:	f7f9 fe63 	bl	80037ac <HAL_GetTick>
 8009ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	88fa      	ldrh	r2, [r7, #6]
 8009aec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	88fa      	ldrh	r2, [r7, #6]
 8009af2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009afc:	d108      	bne.n	8009b10 <HAL_UART_Transmit+0x6c>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	61bb      	str	r3, [r7, #24]
 8009b0e:	e003      	b.n	8009b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b18:	e02e      	b.n	8009b78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2200      	movs	r2, #0
 8009b22:	2180      	movs	r1, #128	@ 0x80
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 fd26 	bl	800a576 <UART_WaitOnFlagUntilTimeout>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2220      	movs	r2, #32
 8009b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e03a      	b.n	8009bb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10b      	bne.n	8009b5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	3302      	adds	r3, #2
 8009b56:	61bb      	str	r3, [r7, #24]
 8009b58:	e007      	b.n	8009b6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	781a      	ldrb	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	3301      	adds	r3, #1
 8009b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1cb      	bne.n	8009b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2140      	movs	r1, #64	@ 0x40
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 fcf2 	bl	800a576 <UART_WaitOnFlagUntilTimeout>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d005      	beq.n	8009ba4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e006      	b.n	8009bb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	e000      	b.n	8009bb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009bb0:	2302      	movs	r3, #2
  }
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3720      	adds	r7, #32
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08c      	sub	sp, #48	@ 0x30
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	d156      	bne.n	8009c84 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_UART_Transmit_DMA+0x26>
 8009bdc:	88fb      	ldrh	r3, [r7, #6]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e04f      	b.n	8009c86 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	88fa      	ldrh	r2, [r7, #6]
 8009bf0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	88fa      	ldrh	r2, [r7, #6]
 8009bf6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2221      	movs	r2, #33	@ 0x21
 8009c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c0a:	4a21      	ldr	r2, [pc, #132]	@ (8009c90 <HAL_UART_Transmit_DMA+0xd4>)
 8009c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c12:	4a20      	ldr	r2, [pc, #128]	@ (8009c94 <HAL_UART_Transmit_DMA+0xd8>)
 8009c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009c98 <HAL_UART_Transmit_DMA+0xdc>)
 8009c1c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c22:	2200      	movs	r2, #0
 8009c24:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009c26:	f107 0308 	add.w	r3, r7, #8
 8009c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	88fb      	ldrh	r3, [r7, #6]
 8009c3e:	f7fa f93f 	bl	8003ec0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3314      	adds	r3, #20
 8009c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	e853 3f00 	ldrex	r3, [r3]
 8009c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3314      	adds	r3, #20
 8009c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8009c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c70:	6a39      	ldr	r1, [r7, #32]
 8009c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c74:	e841 2300 	strex	r3, r2, [r1]
 8009c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e5      	bne.n	8009c4c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e000      	b.n	8009c86 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009c84:	2302      	movs	r3, #2
  }
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3730      	adds	r7, #48	@ 0x30
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	0800a2c5 	.word	0x0800a2c5
 8009c94:	0800a35f 	.word	0x0800a35f
 8009c98:	0800a4e3 	.word	0x0800a4e3

08009c9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d112      	bne.n	8009cdc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <HAL_UART_Receive_DMA+0x26>
 8009cbc:	88fb      	ldrh	r3, [r7, #6]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e00b      	b.n	8009cde <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ccc:	88fb      	ldrh	r3, [r7, #6]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68b9      	ldr	r1, [r7, #8]
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fca8 	bl	800a628 <UART_Start_Receive_DMA>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	e000      	b.n	8009cde <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009cdc:	2302      	movs	r3, #2
  }
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b0ba      	sub	sp, #232	@ 0xe8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009d14:	2300      	movs	r3, #0
 8009d16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d1e:	f003 030f 	and.w	r3, r3, #15
 8009d22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10f      	bne.n	8009d4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d32:	f003 0320 	and.w	r3, r3, #32
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d009      	beq.n	8009d4e <HAL_UART_IRQHandler+0x66>
 8009d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d3e:	f003 0320 	and.w	r3, r3, #32
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fe0f 	bl	800a96a <UART_Receive_IT>
      return;
 8009d4c:	e25b      	b.n	800a206 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 80de 	beq.w	8009f14 <HAL_UART_IRQHandler+0x22c>
 8009d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d106      	bne.n	8009d72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 80d1 	beq.w	8009f14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <HAL_UART_IRQHandler+0xae>
 8009d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d005      	beq.n	8009d96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d8e:	f043 0201 	orr.w	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d9a:	f003 0304 	and.w	r3, r3, #4
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00b      	beq.n	8009dba <HAL_UART_IRQHandler+0xd2>
 8009da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d005      	beq.n	8009dba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009db2:	f043 0202 	orr.w	r2, r3, #2
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00b      	beq.n	8009dde <HAL_UART_IRQHandler+0xf6>
 8009dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dd6:	f043 0204 	orr.w	r2, r3, #4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de2:	f003 0308 	and.w	r3, r3, #8
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d011      	beq.n	8009e0e <HAL_UART_IRQHandler+0x126>
 8009dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dee:	f003 0320 	and.w	r3, r3, #32
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e06:	f043 0208 	orr.w	r2, r3, #8
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 81f2 	beq.w	800a1fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e1c:	f003 0320 	and.w	r3, r3, #32
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d008      	beq.n	8009e36 <HAL_UART_IRQHandler+0x14e>
 8009e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e28:	f003 0320 	and.w	r3, r3, #32
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d002      	beq.n	8009e36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fd9a 	bl	800a96a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e40:	2b40      	cmp	r3, #64	@ 0x40
 8009e42:	bf0c      	ite	eq
 8009e44:	2301      	moveq	r3, #1
 8009e46:	2300      	movne	r3, #0
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e52:	f003 0308 	and.w	r3, r3, #8
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d103      	bne.n	8009e62 <HAL_UART_IRQHandler+0x17a>
 8009e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d04f      	beq.n	8009f02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fca2 	bl	800a7ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e72:	2b40      	cmp	r3, #64	@ 0x40
 8009e74:	d141      	bne.n	8009efa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3314      	adds	r3, #20
 8009e7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e84:	e853 3f00 	ldrex	r3, [r3]
 8009e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3314      	adds	r3, #20
 8009e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1d9      	bne.n	8009e76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d013      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ece:	4a7e      	ldr	r2, [pc, #504]	@ (800a0c8 <HAL_UART_IRQHandler+0x3e0>)
 8009ed0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fa f8c8 	bl	800406c <HAL_DMA_Abort_IT>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d016      	beq.n	8009f10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009eec:	4610      	mov	r0, r2
 8009eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef0:	e00e      	b.n	8009f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f9b2 	bl	800a25c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef8:	e00a      	b.n	8009f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f9ae 	bl	800a25c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f00:	e006      	b.n	8009f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f9aa 	bl	800a25c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009f0e:	e175      	b.n	800a1fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f10:	bf00      	nop
    return;
 8009f12:	e173      	b.n	800a1fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	f040 814f 	bne.w	800a1bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f22:	f003 0310 	and.w	r3, r3, #16
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 8148 	beq.w	800a1bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f30:	f003 0310 	and.w	r3, r3, #16
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 8141 	beq.w	800a1bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60bb      	str	r3, [r7, #8]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	60bb      	str	r3, [r7, #8]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	60bb      	str	r3, [r7, #8]
 8009f4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f5a:	2b40      	cmp	r3, #64	@ 0x40
 8009f5c:	f040 80b6 	bne.w	800a0cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 8145 	beq.w	800a200 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	f080 813e 	bcs.w	800a200 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f96:	f000 8088 	beq.w	800a0aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	330c      	adds	r3, #12
 8009fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1d9      	bne.n	8009f9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3314      	adds	r3, #20
 8009fec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ff0:	e853 3f00 	ldrex	r3, [r3]
 8009ff4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ff6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ff8:	f023 0301 	bic.w	r3, r3, #1
 8009ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3314      	adds	r3, #20
 800a006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a00a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a00e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a010:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a012:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a01c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e1      	bne.n	8009fe6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3314      	adds	r3, #20
 800a028:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3314      	adds	r3, #20
 800a042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a046:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a048:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a04c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e3      	bne.n	800a022 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	330c      	adds	r3, #12
 800a06e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a072:	e853 3f00 	ldrex	r3, [r3]
 800a076:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a07a:	f023 0310 	bic.w	r3, r3, #16
 800a07e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	330c      	adds	r3, #12
 800a088:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a08c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a08e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a092:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a094:	e841 2300 	strex	r3, r2, [r1]
 800a098:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a09a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1e3      	bne.n	800a068 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f9 ff71 	bl	8003f8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f8d5 	bl	800a270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0c6:	e09b      	b.n	800a200 <HAL_UART_IRQHandler+0x518>
 800a0c8:	0800a873 	.word	0x0800a873
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 808e 	beq.w	800a204 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a0e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 8089 	beq.w	800a204 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	330c      	adds	r3, #12
 800a0f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	e853 3f00 	ldrex	r3, [r3]
 800a100:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a108:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	330c      	adds	r3, #12
 800a112:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a116:	647a      	str	r2, [r7, #68]	@ 0x44
 800a118:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a11c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e3      	bne.n	800a0f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3314      	adds	r3, #20
 800a130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	623b      	str	r3, [r7, #32]
   return(result);
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f023 0301 	bic.w	r3, r3, #1
 800a140:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3314      	adds	r3, #20
 800a14a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a14e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a150:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a156:	e841 2300 	strex	r3, r2, [r1]
 800a15a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1e3      	bne.n	800a12a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2220      	movs	r2, #32
 800a166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	330c      	adds	r3, #12
 800a176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	e853 3f00 	ldrex	r3, [r3]
 800a17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0310 	bic.w	r3, r3, #16
 800a186:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	330c      	adds	r3, #12
 800a190:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a194:	61fa      	str	r2, [r7, #28]
 800a196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	69b9      	ldr	r1, [r7, #24]
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e3      	bne.n	800a170 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f85b 	bl	800a270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1ba:	e023      	b.n	800a204 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d009      	beq.n	800a1dc <HAL_UART_IRQHandler+0x4f4>
 800a1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d003      	beq.n	800a1dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fb60 	bl	800a89a <UART_Transmit_IT>
    return;
 800a1da:	e014      	b.n	800a206 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00e      	beq.n	800a206 <HAL_UART_IRQHandler+0x51e>
 800a1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d008      	beq.n	800a206 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fba0 	bl	800a93a <UART_EndTransmit_IT>
    return;
 800a1fa:	e004      	b.n	800a206 <HAL_UART_IRQHandler+0x51e>
    return;
 800a1fc:	bf00      	nop
 800a1fe:	e002      	b.n	800a206 <HAL_UART_IRQHandler+0x51e>
      return;
 800a200:	bf00      	nop
 800a202:	e000      	b.n	800a206 <HAL_UART_IRQHandler+0x51e>
      return;
 800a204:	bf00      	nop
  }
}
 800a206:	37e8      	adds	r7, #232	@ 0xe8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800a290:	2300      	movs	r3, #0
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	2300      	movs	r3, #0
 800a296:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	b2db      	uxtb	r3, r3
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b090      	sub	sp, #64	@ 0x40
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d137      	bne.n	800a350 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a2e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3314      	adds	r3, #20
 800a2ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3314      	adds	r3, #20
 800a304:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a306:	633a      	str	r2, [r7, #48]	@ 0x30
 800a308:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a30c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1e5      	bne.n	800a2e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	330c      	adds	r3, #12
 800a320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	60fb      	str	r3, [r7, #12]
   return(result);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a330:	637b      	str	r3, [r7, #52]	@ 0x34
 800a332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	330c      	adds	r3, #12
 800a338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a33a:	61fa      	str	r2, [r7, #28]
 800a33c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	69b9      	ldr	r1, [r7, #24]
 800a340:	69fa      	ldr	r2, [r7, #28]
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	617b      	str	r3, [r7, #20]
   return(result);
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e5      	bne.n	800a31a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a34e:	e002      	b.n	800a356 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a350:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a352:	f7ff ff5b 	bl	800a20c <HAL_UART_TxCpltCallback>
}
 800a356:	bf00      	nop
 800a358:	3740      	adds	r7, #64	@ 0x40
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7ff ff57 	bl	800a220 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a372:	bf00      	nop
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b09c      	sub	sp, #112	@ 0x70
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a386:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a392:	2b00      	cmp	r3, #0
 800a394:	d172      	bne.n	800a47c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a398:	2200      	movs	r2, #0
 800a39a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a39c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	330c      	adds	r3, #12
 800a3a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	330c      	adds	r3, #12
 800a3ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a3bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a3be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e5      	bne.n	800a39c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3314      	adds	r3, #20
 800a3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	e853 3f00 	ldrex	r3, [r3]
 800a3de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e2:	f023 0301 	bic.w	r3, r3, #1
 800a3e6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3314      	adds	r3, #20
 800a3ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a3f0:	647a      	str	r2, [r7, #68]	@ 0x44
 800a3f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3f8:	e841 2300 	strex	r3, r2, [r1]
 800a3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a3fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e5      	bne.n	800a3d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3314      	adds	r3, #20
 800a40a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	623b      	str	r3, [r7, #32]
   return(result);
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a41a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a41c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3314      	adds	r3, #20
 800a422:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a424:	633a      	str	r2, [r7, #48]	@ 0x30
 800a426:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a42a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e5      	bne.n	800a404 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a43a:	2220      	movs	r2, #32
 800a43c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a444:	2b01      	cmp	r3, #1
 800a446:	d119      	bne.n	800a47c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	330c      	adds	r3, #12
 800a44e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	e853 3f00 	ldrex	r3, [r3]
 800a456:	60fb      	str	r3, [r7, #12]
   return(result);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 0310 	bic.w	r3, r3, #16
 800a45e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	330c      	adds	r3, #12
 800a466:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a468:	61fa      	str	r2, [r7, #28]
 800a46a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46c:	69b9      	ldr	r1, [r7, #24]
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	e841 2300 	strex	r3, r2, [r1]
 800a474:	617b      	str	r3, [r7, #20]
   return(result);
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1e5      	bne.n	800a448 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a47e:	2200      	movs	r2, #0
 800a480:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a486:	2b01      	cmp	r3, #1
 800a488:	d106      	bne.n	800a498 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a48a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a48c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a48e:	4619      	mov	r1, r3
 800a490:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a492:	f7ff feed 	bl	800a270 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a496:	e002      	b.n	800a49e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a498:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a49a:	f7ff fecb 	bl	800a234 <HAL_UART_RxCpltCallback>
}
 800a49e:	bf00      	nop
 800a4a0:	3770      	adds	r7, #112	@ 0x70
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d108      	bne.n	800a4d4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a4c6:	085b      	lsrs	r3, r3, #1
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff fecf 	bl	800a270 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4d2:	e002      	b.n	800a4da <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f7ff feb7 	bl	800a248 <HAL_UART_RxHalfCpltCallback>
}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fe:	2b80      	cmp	r3, #128	@ 0x80
 800a500:	bf0c      	ite	eq
 800a502:	2301      	moveq	r3, #1
 800a504:	2300      	movne	r3, #0
 800a506:	b2db      	uxtb	r3, r3
 800a508:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a510:	b2db      	uxtb	r3, r3
 800a512:	2b21      	cmp	r3, #33	@ 0x21
 800a514:	d108      	bne.n	800a528 <UART_DMAError+0x46>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d005      	beq.n	800a528 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2200      	movs	r2, #0
 800a520:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a522:	68b8      	ldr	r0, [r7, #8]
 800a524:	f000 f91a 	bl	800a75c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a532:	2b40      	cmp	r3, #64	@ 0x40
 800a534:	bf0c      	ite	eq
 800a536:	2301      	moveq	r3, #1
 800a538:	2300      	movne	r3, #0
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b22      	cmp	r3, #34	@ 0x22
 800a548:	d108      	bne.n	800a55c <UART_DMAError+0x7a>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d005      	beq.n	800a55c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2200      	movs	r2, #0
 800a554:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a556:	68b8      	ldr	r0, [r7, #8]
 800a558:	f000 f928 	bl	800a7ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a560:	f043 0210 	orr.w	r2, r3, #16
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a568:	68b8      	ldr	r0, [r7, #8]
 800a56a:	f7ff fe77 	bl	800a25c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a56e:	bf00      	nop
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	603b      	str	r3, [r7, #0]
 800a582:	4613      	mov	r3, r2
 800a584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a586:	e03b      	b.n	800a600 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58e:	d037      	beq.n	800a600 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a590:	f7f9 f90c 	bl	80037ac <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	6a3a      	ldr	r2, [r7, #32]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d302      	bcc.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e03a      	b.n	800a620 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d023      	beq.n	800a600 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b80      	cmp	r3, #128	@ 0x80
 800a5bc:	d020      	beq.n	800a600 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2b40      	cmp	r3, #64	@ 0x40
 800a5c2:	d01d      	beq.n	800a600 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f003 0308 	and.w	r3, r3, #8
 800a5ce:	2b08      	cmp	r3, #8
 800a5d0:	d116      	bne.n	800a600 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f000 f8df 	bl	800a7ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2208      	movs	r2, #8
 800a5f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e00f      	b.n	800a620 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	4013      	ands	r3, r2
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	bf0c      	ite	eq
 800a610:	2301      	moveq	r3, #1
 800a612:	2300      	movne	r3, #0
 800a614:	b2db      	uxtb	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d0b4      	beq.n	800a588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b098      	sub	sp, #96	@ 0x60
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4613      	mov	r3, r2
 800a634:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	88fa      	ldrh	r2, [r7, #6]
 800a640:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2222      	movs	r2, #34	@ 0x22
 800a64c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a654:	4a3e      	ldr	r2, [pc, #248]	@ (800a750 <UART_Start_Receive_DMA+0x128>)
 800a656:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a65c:	4a3d      	ldr	r2, [pc, #244]	@ (800a754 <UART_Start_Receive_DMA+0x12c>)
 800a65e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a664:	4a3c      	ldr	r2, [pc, #240]	@ (800a758 <UART_Start_Receive_DMA+0x130>)
 800a666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a66c:	2200      	movs	r2, #0
 800a66e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a670:	f107 0308 	add.w	r3, r7, #8
 800a674:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3304      	adds	r3, #4
 800a680:	4619      	mov	r1, r3
 800a682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	f7f9 fc1a 	bl	8003ec0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	613b      	str	r3, [r7, #16]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d019      	beq.n	800a6de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	330c      	adds	r3, #12
 800a6b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	330c      	adds	r3, #12
 800a6c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a6cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a6d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a6d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e5      	bne.n	800a6aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3314      	adds	r3, #20
 800a6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f0:	f043 0301 	orr.w	r3, r3, #1
 800a6f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3314      	adds	r3, #20
 800a6fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a6fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a702:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a706:	e841 2300 	strex	r3, r2, [r1]
 800a70a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1e5      	bne.n	800a6de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3314      	adds	r3, #20
 800a718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	617b      	str	r3, [r7, #20]
   return(result);
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a728:	653b      	str	r3, [r7, #80]	@ 0x50
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3314      	adds	r3, #20
 800a730:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a732:	627a      	str	r2, [r7, #36]	@ 0x24
 800a734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6a39      	ldr	r1, [r7, #32]
 800a738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e5      	bne.n	800a712 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3760      	adds	r7, #96	@ 0x60
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	0800a37b 	.word	0x0800a37b
 800a754:	0800a4a7 	.word	0x0800a4a7
 800a758:	0800a4e3 	.word	0x0800a4e3

0800a75c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b089      	sub	sp, #36	@ 0x24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	330c      	adds	r3, #12
 800a76a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	e853 3f00 	ldrex	r3, [r3]
 800a772:	60bb      	str	r3, [r7, #8]
   return(result);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a77a:	61fb      	str	r3, [r7, #28]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	330c      	adds	r3, #12
 800a782:	69fa      	ldr	r2, [r7, #28]
 800a784:	61ba      	str	r2, [r7, #24]
 800a786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a788:	6979      	ldr	r1, [r7, #20]
 800a78a:	69ba      	ldr	r2, [r7, #24]
 800a78c:	e841 2300 	strex	r3, r2, [r1]
 800a790:	613b      	str	r3, [r7, #16]
   return(result);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1e5      	bne.n	800a764 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a7a0:	bf00      	nop
 800a7a2:	3724      	adds	r7, #36	@ 0x24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b095      	sub	sp, #84	@ 0x54
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	330c      	adds	r3, #12
 800a7ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7be:	e853 3f00 	ldrex	r3, [r3]
 800a7c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	330c      	adds	r3, #12
 800a7d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7d4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7dc:	e841 2300 	strex	r3, r2, [r1]
 800a7e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e5      	bne.n	800a7b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3314      	adds	r3, #20
 800a7ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f0:	6a3b      	ldr	r3, [r7, #32]
 800a7f2:	e853 3f00 	ldrex	r3, [r3]
 800a7f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	f023 0301 	bic.w	r3, r3, #1
 800a7fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3314      	adds	r3, #20
 800a806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a80a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a80e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e5      	bne.n	800a7e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a820:	2b01      	cmp	r3, #1
 800a822:	d119      	bne.n	800a858 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	330c      	adds	r3, #12
 800a82a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	e853 3f00 	ldrex	r3, [r3]
 800a832:	60bb      	str	r3, [r7, #8]
   return(result);
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	f023 0310 	bic.w	r3, r3, #16
 800a83a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	330c      	adds	r3, #12
 800a842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a844:	61ba      	str	r2, [r7, #24]
 800a846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	6979      	ldr	r1, [r7, #20]
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	e841 2300 	strex	r3, r2, [r1]
 800a850:	613b      	str	r3, [r7, #16]
   return(result);
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e5      	bne.n	800a824 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2220      	movs	r2, #32
 800a85c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a866:	bf00      	nop
 800a868:	3754      	adds	r7, #84	@ 0x54
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f7ff fce5 	bl	800a25c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a892:	bf00      	nop
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b21      	cmp	r3, #33	@ 0x21
 800a8ac:	d13e      	bne.n	800a92c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8b6:	d114      	bne.n	800a8e2 <UART_Transmit_IT+0x48>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d110      	bne.n	800a8e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	1c9a      	adds	r2, r3, #2
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	621a      	str	r2, [r3, #32]
 800a8e0:	e008      	b.n	800a8f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	1c59      	adds	r1, r3, #1
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	6211      	str	r1, [r2, #32]
 800a8ec:	781a      	ldrb	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	4619      	mov	r1, r3
 800a902:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10f      	bne.n	800a928 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a916:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68da      	ldr	r2, [r3, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a926:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	e000      	b.n	800a92e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a92c:	2302      	movs	r3, #2
  }
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68da      	ldr	r2, [r3, #12]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a950:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2220      	movs	r2, #32
 800a956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7ff fc56 	bl	800a20c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3708      	adds	r7, #8
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b08c      	sub	sp, #48	@ 0x30
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b22      	cmp	r3, #34	@ 0x22
 800a97c:	f040 80ae 	bne.w	800aadc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a988:	d117      	bne.n	800a9ba <UART_Receive_IT+0x50>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d113      	bne.n	800a9ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a99a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b2:	1c9a      	adds	r2, r3, #2
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a9b8:	e026      	b.n	800aa08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9cc:	d007      	beq.n	800a9de <UART_Receive_IT+0x74>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10a      	bne.n	800a9ec <UART_Receive_IT+0x82>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	e008      	b.n	800a9fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	4619      	mov	r1, r3
 800aa16:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d15d      	bne.n	800aad8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68da      	ldr	r2, [r3, #12]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 0220 	bic.w	r2, r2, #32
 800aa2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	695a      	ldr	r2, [r3, #20]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 0201 	bic.w	r2, r2, #1
 800aa4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d135      	bne.n	800aace <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	330c      	adds	r3, #12
 800aa6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	e853 3f00 	ldrex	r3, [r3]
 800aa76:	613b      	str	r3, [r7, #16]
   return(result);
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f023 0310 	bic.w	r3, r3, #16
 800aa7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	330c      	adds	r3, #12
 800aa86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa88:	623a      	str	r2, [r7, #32]
 800aa8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	69f9      	ldr	r1, [r7, #28]
 800aa8e:	6a3a      	ldr	r2, [r7, #32]
 800aa90:	e841 2300 	strex	r3, r2, [r1]
 800aa94:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e5      	bne.n	800aa68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 0310 	and.w	r3, r3, #16
 800aaa6:	2b10      	cmp	r3, #16
 800aaa8:	d10a      	bne.n	800aac0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fbd2 	bl	800a270 <HAL_UARTEx_RxEventCallback>
 800aacc:	e002      	b.n	800aad4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff fbb0 	bl	800a234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	e002      	b.n	800aade <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aad8:	2300      	movs	r3, #0
 800aada:	e000      	b.n	800aade <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aadc:	2302      	movs	r3, #2
  }
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3730      	adds	r7, #48	@ 0x30
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaec:	b0c0      	sub	sp, #256	@ 0x100
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800aaf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	4bcf      	ldr	r3, [pc, #828]	@ (800ae38 <UART_SetConfig+0x350>)
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d904      	bls.n	800ab0a <UART_SetConfig+0x22>
 800ab00:	f640 6175 	movw	r1, #3701	@ 0xe75
 800ab04:	48cd      	ldr	r0, [pc, #820]	@ (800ae3c <UART_SetConfig+0x354>)
 800ab06:	f7f8 faad 	bl	8003064 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ab0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00a      	beq.n	800ab2a <UART_SetConfig+0x42>
 800ab14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab1e:	d004      	beq.n	800ab2a <UART_SetConfig+0x42>
 800ab20:	f640 6176 	movw	r1, #3702	@ 0xe76
 800ab24:	48c5      	ldr	r0, [pc, #788]	@ (800ae3c <UART_SetConfig+0x354>)
 800ab26:	f7f8 fa9d 	bl	8003064 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ab2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d010      	beq.n	800ab56 <UART_SetConfig+0x6e>
 800ab34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab3e:	d00a      	beq.n	800ab56 <UART_SetConfig+0x6e>
 800ab40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ab4a:	d004      	beq.n	800ab56 <UART_SetConfig+0x6e>
 800ab4c:	f640 6177 	movw	r1, #3703	@ 0xe77
 800ab50:	48ba      	ldr	r0, [pc, #744]	@ (800ae3c <UART_SetConfig+0x354>)
 800ab52:	f7f8 fa87 	bl	8003064 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800ab56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab5a:	695a      	ldr	r2, [r3, #20]
 800ab5c:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 800ab60:	4013      	ands	r3, r2
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d104      	bne.n	800ab70 <UART_SetConfig+0x88>
 800ab66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d104      	bne.n	800ab7a <UART_SetConfig+0x92>
 800ab70:	f640 6178 	movw	r1, #3704	@ 0xe78
 800ab74:	48b1      	ldr	r0, [pc, #708]	@ (800ae3c <UART_SetConfig+0x354>)
 800ab76:	f7f8 fa75 	bl	8003064 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ab86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab8a:	68d9      	ldr	r1, [r3, #12]
 800ab8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	ea40 0301 	orr.w	r3, r0, r1
 800ab96:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab9c:	689a      	ldr	r2, [r3, #8]
 800ab9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	431a      	orrs	r2, r3
 800aba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	431a      	orrs	r2, r3
 800abae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abb2:	69db      	ldr	r3, [r3, #28]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800abba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800abc6:	f021 010c 	bic.w	r1, r1, #12
 800abca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800abd4:	430b      	orrs	r3, r1
 800abd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800abd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800abe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abe8:	6999      	ldr	r1, [r3, #24]
 800abea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	ea40 0301 	orr.w	r3, r0, r1
 800abf4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800abf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	4b90      	ldr	r3, [pc, #576]	@ (800ae40 <UART_SetConfig+0x358>)
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d005      	beq.n	800ac0e <UART_SetConfig+0x126>
 800ac02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	4b8e      	ldr	r3, [pc, #568]	@ (800ae44 <UART_SetConfig+0x35c>)
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d104      	bne.n	800ac18 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac0e:	f7fd fde3 	bl	80087d8 <HAL_RCC_GetPCLK2Freq>
 800ac12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ac16:	e003      	b.n	800ac20 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac18:	f7fd fdca 	bl	80087b0 <HAL_RCC_GetPCLK1Freq>
 800ac1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac2a:	f040 810f 	bne.w	800ae4c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac32:	2200      	movs	r2, #0
 800ac34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ac38:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ac3c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ac40:	4622      	mov	r2, r4
 800ac42:	462b      	mov	r3, r5
 800ac44:	1891      	adds	r1, r2, r2
 800ac46:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ac48:	415b      	adcs	r3, r3
 800ac4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ac50:	4621      	mov	r1, r4
 800ac52:	eb12 0801 	adds.w	r8, r2, r1
 800ac56:	4629      	mov	r1, r5
 800ac58:	eb43 0901 	adc.w	r9, r3, r1
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ac68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ac6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ac70:	4690      	mov	r8, r2
 800ac72:	4699      	mov	r9, r3
 800ac74:	4623      	mov	r3, r4
 800ac76:	eb18 0303 	adds.w	r3, r8, r3
 800ac7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ac7e:	462b      	mov	r3, r5
 800ac80:	eb49 0303 	adc.w	r3, r9, r3
 800ac84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ac88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ac94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ac98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	18db      	adds	r3, r3, r3
 800aca0:	653b      	str	r3, [r7, #80]	@ 0x50
 800aca2:	4613      	mov	r3, r2
 800aca4:	eb42 0303 	adc.w	r3, r2, r3
 800aca8:	657b      	str	r3, [r7, #84]	@ 0x54
 800acaa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800acae:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800acb2:	f7f5 ff81 	bl	8000bb8 <__aeabi_uldivmod>
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	4b63      	ldr	r3, [pc, #396]	@ (800ae48 <UART_SetConfig+0x360>)
 800acbc:	fba3 2302 	umull	r2, r3, r3, r2
 800acc0:	095b      	lsrs	r3, r3, #5
 800acc2:	011c      	lsls	r4, r3, #4
 800acc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acc8:	2200      	movs	r2, #0
 800acca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800acce:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800acd2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800acd6:	4642      	mov	r2, r8
 800acd8:	464b      	mov	r3, r9
 800acda:	1891      	adds	r1, r2, r2
 800acdc:	64b9      	str	r1, [r7, #72]	@ 0x48
 800acde:	415b      	adcs	r3, r3
 800ace0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ace2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ace6:	4641      	mov	r1, r8
 800ace8:	eb12 0a01 	adds.w	sl, r2, r1
 800acec:	4649      	mov	r1, r9
 800acee:	eb43 0b01 	adc.w	fp, r3, r1
 800acf2:	f04f 0200 	mov.w	r2, #0
 800acf6:	f04f 0300 	mov.w	r3, #0
 800acfa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800acfe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ad02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad06:	4692      	mov	sl, r2
 800ad08:	469b      	mov	fp, r3
 800ad0a:	4643      	mov	r3, r8
 800ad0c:	eb1a 0303 	adds.w	r3, sl, r3
 800ad10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad14:	464b      	mov	r3, r9
 800ad16:	eb4b 0303 	adc.w	r3, fp, r3
 800ad1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ad1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad2a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ad2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ad32:	460b      	mov	r3, r1
 800ad34:	18db      	adds	r3, r3, r3
 800ad36:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad38:	4613      	mov	r3, r2
 800ad3a:	eb42 0303 	adc.w	r3, r2, r3
 800ad3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ad44:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ad48:	f7f5 ff36 	bl	8000bb8 <__aeabi_uldivmod>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	4b3d      	ldr	r3, [pc, #244]	@ (800ae48 <UART_SetConfig+0x360>)
 800ad54:	fba3 2301 	umull	r2, r3, r3, r1
 800ad58:	095b      	lsrs	r3, r3, #5
 800ad5a:	2264      	movs	r2, #100	@ 0x64
 800ad5c:	fb02 f303 	mul.w	r3, r2, r3
 800ad60:	1acb      	subs	r3, r1, r3
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ad68:	4b37      	ldr	r3, [pc, #220]	@ (800ae48 <UART_SetConfig+0x360>)
 800ad6a:	fba3 2302 	umull	r2, r3, r3, r2
 800ad6e:	095b      	lsrs	r3, r3, #5
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ad76:	441c      	add	r4, r3
 800ad78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ad82:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ad86:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ad8a:	4642      	mov	r2, r8
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	1891      	adds	r1, r2, r2
 800ad90:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ad92:	415b      	adcs	r3, r3
 800ad94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ad9a:	4641      	mov	r1, r8
 800ad9c:	1851      	adds	r1, r2, r1
 800ad9e:	6339      	str	r1, [r7, #48]	@ 0x30
 800ada0:	4649      	mov	r1, r9
 800ada2:	414b      	adcs	r3, r1
 800ada4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ada6:	f04f 0200 	mov.w	r2, #0
 800adaa:	f04f 0300 	mov.w	r3, #0
 800adae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800adb2:	4659      	mov	r1, fp
 800adb4:	00cb      	lsls	r3, r1, #3
 800adb6:	4651      	mov	r1, sl
 800adb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adbc:	4651      	mov	r1, sl
 800adbe:	00ca      	lsls	r2, r1, #3
 800adc0:	4610      	mov	r0, r2
 800adc2:	4619      	mov	r1, r3
 800adc4:	4603      	mov	r3, r0
 800adc6:	4642      	mov	r2, r8
 800adc8:	189b      	adds	r3, r3, r2
 800adca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800adce:	464b      	mov	r3, r9
 800add0:	460a      	mov	r2, r1
 800add2:	eb42 0303 	adc.w	r3, r2, r3
 800add6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800adda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ade6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800adea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800adee:	460b      	mov	r3, r1
 800adf0:	18db      	adds	r3, r3, r3
 800adf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adf4:	4613      	mov	r3, r2
 800adf6:	eb42 0303 	adc.w	r3, r2, r3
 800adfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ae00:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ae04:	f7f5 fed8 	bl	8000bb8 <__aeabi_uldivmod>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ae48 <UART_SetConfig+0x360>)
 800ae0e:	fba3 1302 	umull	r1, r3, r3, r2
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	2164      	movs	r1, #100	@ 0x64
 800ae16:	fb01 f303 	mul.w	r3, r1, r3
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	3332      	adds	r3, #50	@ 0x32
 800ae20:	4a09      	ldr	r2, [pc, #36]	@ (800ae48 <UART_SetConfig+0x360>)
 800ae22:	fba2 2303 	umull	r2, r3, r2, r3
 800ae26:	095b      	lsrs	r3, r3, #5
 800ae28:	f003 0207 	and.w	r2, r3, #7
 800ae2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4422      	add	r2, r4
 800ae34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ae36:	e109      	b.n	800b04c <UART_SetConfig+0x564>
 800ae38:	00a037a0 	.word	0x00a037a0
 800ae3c:	08011bcc 	.word	0x08011bcc
 800ae40:	40011000 	.word	0x40011000
 800ae44:	40011400 	.word	0x40011400
 800ae48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ae4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ae56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ae5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ae5e:	4642      	mov	r2, r8
 800ae60:	464b      	mov	r3, r9
 800ae62:	1891      	adds	r1, r2, r2
 800ae64:	6239      	str	r1, [r7, #32]
 800ae66:	415b      	adcs	r3, r3
 800ae68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ae6e:	4641      	mov	r1, r8
 800ae70:	1854      	adds	r4, r2, r1
 800ae72:	4649      	mov	r1, r9
 800ae74:	eb43 0501 	adc.w	r5, r3, r1
 800ae78:	f04f 0200 	mov.w	r2, #0
 800ae7c:	f04f 0300 	mov.w	r3, #0
 800ae80:	00eb      	lsls	r3, r5, #3
 800ae82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae86:	00e2      	lsls	r2, r4, #3
 800ae88:	4614      	mov	r4, r2
 800ae8a:	461d      	mov	r5, r3
 800ae8c:	4643      	mov	r3, r8
 800ae8e:	18e3      	adds	r3, r4, r3
 800ae90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae94:	464b      	mov	r3, r9
 800ae96:	eb45 0303 	adc.w	r3, r5, r3
 800ae9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ae9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aeaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aeae:	f04f 0200 	mov.w	r2, #0
 800aeb2:	f04f 0300 	mov.w	r3, #0
 800aeb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aeba:	4629      	mov	r1, r5
 800aebc:	008b      	lsls	r3, r1, #2
 800aebe:	4621      	mov	r1, r4
 800aec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aec4:	4621      	mov	r1, r4
 800aec6:	008a      	lsls	r2, r1, #2
 800aec8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800aecc:	f7f5 fe74 	bl	8000bb8 <__aeabi_uldivmod>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4b60      	ldr	r3, [pc, #384]	@ (800b058 <UART_SetConfig+0x570>)
 800aed6:	fba3 2302 	umull	r2, r3, r3, r2
 800aeda:	095b      	lsrs	r3, r3, #5
 800aedc:	011c      	lsls	r4, r3, #4
 800aede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aee2:	2200      	movs	r2, #0
 800aee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aee8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aeec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800aef0:	4642      	mov	r2, r8
 800aef2:	464b      	mov	r3, r9
 800aef4:	1891      	adds	r1, r2, r2
 800aef6:	61b9      	str	r1, [r7, #24]
 800aef8:	415b      	adcs	r3, r3
 800aefa:	61fb      	str	r3, [r7, #28]
 800aefc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af00:	4641      	mov	r1, r8
 800af02:	1851      	adds	r1, r2, r1
 800af04:	6139      	str	r1, [r7, #16]
 800af06:	4649      	mov	r1, r9
 800af08:	414b      	adcs	r3, r1
 800af0a:	617b      	str	r3, [r7, #20]
 800af0c:	f04f 0200 	mov.w	r2, #0
 800af10:	f04f 0300 	mov.w	r3, #0
 800af14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af18:	4659      	mov	r1, fp
 800af1a:	00cb      	lsls	r3, r1, #3
 800af1c:	4651      	mov	r1, sl
 800af1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af22:	4651      	mov	r1, sl
 800af24:	00ca      	lsls	r2, r1, #3
 800af26:	4610      	mov	r0, r2
 800af28:	4619      	mov	r1, r3
 800af2a:	4603      	mov	r3, r0
 800af2c:	4642      	mov	r2, r8
 800af2e:	189b      	adds	r3, r3, r2
 800af30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af34:	464b      	mov	r3, r9
 800af36:	460a      	mov	r2, r1
 800af38:	eb42 0303 	adc.w	r3, r2, r3
 800af3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800af4c:	f04f 0200 	mov.w	r2, #0
 800af50:	f04f 0300 	mov.w	r3, #0
 800af54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800af58:	4649      	mov	r1, r9
 800af5a:	008b      	lsls	r3, r1, #2
 800af5c:	4641      	mov	r1, r8
 800af5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af62:	4641      	mov	r1, r8
 800af64:	008a      	lsls	r2, r1, #2
 800af66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800af6a:	f7f5 fe25 	bl	8000bb8 <__aeabi_uldivmod>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4611      	mov	r1, r2
 800af74:	4b38      	ldr	r3, [pc, #224]	@ (800b058 <UART_SetConfig+0x570>)
 800af76:	fba3 2301 	umull	r2, r3, r3, r1
 800af7a:	095b      	lsrs	r3, r3, #5
 800af7c:	2264      	movs	r2, #100	@ 0x64
 800af7e:	fb02 f303 	mul.w	r3, r2, r3
 800af82:	1acb      	subs	r3, r1, r3
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	3332      	adds	r3, #50	@ 0x32
 800af88:	4a33      	ldr	r2, [pc, #204]	@ (800b058 <UART_SetConfig+0x570>)
 800af8a:	fba2 2303 	umull	r2, r3, r2, r3
 800af8e:	095b      	lsrs	r3, r3, #5
 800af90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800af94:	441c      	add	r4, r3
 800af96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af9a:	2200      	movs	r2, #0
 800af9c:	673b      	str	r3, [r7, #112]	@ 0x70
 800af9e:	677a      	str	r2, [r7, #116]	@ 0x74
 800afa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800afa4:	4642      	mov	r2, r8
 800afa6:	464b      	mov	r3, r9
 800afa8:	1891      	adds	r1, r2, r2
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	415b      	adcs	r3, r3
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afb4:	4641      	mov	r1, r8
 800afb6:	1851      	adds	r1, r2, r1
 800afb8:	6039      	str	r1, [r7, #0]
 800afba:	4649      	mov	r1, r9
 800afbc:	414b      	adcs	r3, r1
 800afbe:	607b      	str	r3, [r7, #4]
 800afc0:	f04f 0200 	mov.w	r2, #0
 800afc4:	f04f 0300 	mov.w	r3, #0
 800afc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800afcc:	4659      	mov	r1, fp
 800afce:	00cb      	lsls	r3, r1, #3
 800afd0:	4651      	mov	r1, sl
 800afd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afd6:	4651      	mov	r1, sl
 800afd8:	00ca      	lsls	r2, r1, #3
 800afda:	4610      	mov	r0, r2
 800afdc:	4619      	mov	r1, r3
 800afde:	4603      	mov	r3, r0
 800afe0:	4642      	mov	r2, r8
 800afe2:	189b      	adds	r3, r3, r2
 800afe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afe6:	464b      	mov	r3, r9
 800afe8:	460a      	mov	r2, r1
 800afea:	eb42 0303 	adc.w	r3, r2, r3
 800afee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	663b      	str	r3, [r7, #96]	@ 0x60
 800affa:	667a      	str	r2, [r7, #100]	@ 0x64
 800affc:	f04f 0200 	mov.w	r2, #0
 800b000:	f04f 0300 	mov.w	r3, #0
 800b004:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b008:	4649      	mov	r1, r9
 800b00a:	008b      	lsls	r3, r1, #2
 800b00c:	4641      	mov	r1, r8
 800b00e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b012:	4641      	mov	r1, r8
 800b014:	008a      	lsls	r2, r1, #2
 800b016:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b01a:	f7f5 fdcd 	bl	8000bb8 <__aeabi_uldivmod>
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	4b0d      	ldr	r3, [pc, #52]	@ (800b058 <UART_SetConfig+0x570>)
 800b024:	fba3 1302 	umull	r1, r3, r3, r2
 800b028:	095b      	lsrs	r3, r3, #5
 800b02a:	2164      	movs	r1, #100	@ 0x64
 800b02c:	fb01 f303 	mul.w	r3, r1, r3
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	011b      	lsls	r3, r3, #4
 800b034:	3332      	adds	r3, #50	@ 0x32
 800b036:	4a08      	ldr	r2, [pc, #32]	@ (800b058 <UART_SetConfig+0x570>)
 800b038:	fba2 2303 	umull	r2, r3, r2, r3
 800b03c:	095b      	lsrs	r3, r3, #5
 800b03e:	f003 020f 	and.w	r2, r3, #15
 800b042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4422      	add	r2, r4
 800b04a:	609a      	str	r2, [r3, #8]
}
 800b04c:	bf00      	nop
 800b04e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b052:	46bd      	mov	sp, r7
 800b054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b058:	51eb851f 	.word	0x51eb851f

0800b05c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b05c:	b084      	sub	sp, #16
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	f107 001c 	add.w	r0, r7, #28
 800b06a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b06e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b072:	2b01      	cmp	r3, #1
 800b074:	d123      	bne.n	800b0be <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800b08a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b09e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d105      	bne.n	800b0b2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f9dc 	bl	800b470 <USB_CoreReset>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]
 800b0bc:	e01b      	b.n	800b0f6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f9d0 	bl	800b470 <USB_CoreReset>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b0d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d106      	bne.n	800b0ea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	639a      	str	r2, [r3, #56]	@ 0x38
 800b0e8:	e005      	b.n	800b0f6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b0f6:	7fbb      	ldrb	r3, [r7, #30]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d10b      	bne.n	800b114 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f043 0206 	orr.w	r2, r3, #6
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	f043 0220 	orr.w	r2, r3, #32
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b114:	7bfb      	ldrb	r3, [r7, #15]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b120:	b004      	add	sp, #16
 800b122:	4770      	bx	lr

0800b124 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f043 0201 	orr.w	r2, r3, #1
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	f023 0201 	bic.w	r2, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	460b      	mov	r3, r1
 800b172:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b184:	78fb      	ldrb	r3, [r7, #3]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d115      	bne.n	800b1b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b196:	200a      	movs	r0, #10
 800b198:	f7f8 fb14 	bl	80037c4 <HAL_Delay>
      ms += 10U;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	330a      	adds	r3, #10
 800b1a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f956 	bl	800b454 <USB_GetMode>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d01e      	beq.n	800b1ec <USB_SetCurrentMode+0x84>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1b2:	d9f0      	bls.n	800b196 <USB_SetCurrentMode+0x2e>
 800b1b4:	e01a      	b.n	800b1ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1b6:	78fb      	ldrb	r3, [r7, #3]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d115      	bne.n	800b1e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b1c8:	200a      	movs	r0, #10
 800b1ca:	f7f8 fafb 	bl	80037c4 <HAL_Delay>
      ms += 10U;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	330a      	adds	r3, #10
 800b1d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f93d 	bl	800b454 <USB_GetMode>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d005      	beq.n	800b1ec <USB_SetCurrentMode+0x84>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1e4:	d9f0      	bls.n	800b1c8 <USB_SetCurrentMode+0x60>
 800b1e6:	e001      	b.n	800b1ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e005      	b.n	800b1f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2bc8      	cmp	r3, #200	@ 0xc8
 800b1f0:	d101      	bne.n	800b1f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3301      	adds	r3, #1
 800b212:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b21a:	d901      	bls.n	800b220 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e01b      	b.n	800b258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	daf2      	bge.n	800b20e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	019b      	lsls	r3, r3, #6
 800b230:	f043 0220 	orr.w	r2, r3, #32
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3301      	adds	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b244:	d901      	bls.n	800b24a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e006      	b.n	800b258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	f003 0320 	and.w	r3, r3, #32
 800b252:	2b20      	cmp	r3, #32
 800b254:	d0f0      	beq.n	800b238 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b26c:	2300      	movs	r3, #0
 800b26e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3301      	adds	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b27c:	d901      	bls.n	800b282 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e018      	b.n	800b2b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	daf2      	bge.n	800b270 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2210      	movs	r2, #16
 800b292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3301      	adds	r3, #1
 800b298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2a0:	d901      	bls.n	800b2a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e006      	b.n	800b2b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	f003 0310 	and.w	r3, r3, #16
 800b2ae:	2b10      	cmp	r3, #16
 800b2b0:	d0f0      	beq.n	800b294 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b089      	sub	sp, #36	@ 0x24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	71fb      	strb	r3, [r7, #7]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b2de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d123      	bne.n	800b32e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b2e6:	88bb      	ldrh	r3, [r7, #4]
 800b2e8:	3303      	adds	r3, #3
 800b2ea:	089b      	lsrs	r3, r3, #2
 800b2ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	61bb      	str	r3, [r7, #24]
 800b2f2:	e018      	b.n	800b326 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	031a      	lsls	r2, r3, #12
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b300:	461a      	mov	r2, r3
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	3301      	adds	r3, #1
 800b30c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	3301      	adds	r3, #1
 800b312:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	3301      	adds	r3, #1
 800b318:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	3301      	adds	r3, #1
 800b31e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	3301      	adds	r3, #1
 800b324:	61bb      	str	r3, [r7, #24]
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d3e2      	bcc.n	800b2f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3724      	adds	r7, #36	@ 0x24
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b08b      	sub	sp, #44	@ 0x2c
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	4613      	mov	r3, r2
 800b348:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b352:	88fb      	ldrh	r3, [r7, #6]
 800b354:	089b      	lsrs	r3, r3, #2
 800b356:	b29b      	uxth	r3, r3
 800b358:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b35a:	88fb      	ldrh	r3, [r7, #6]
 800b35c:	f003 0303 	and.w	r3, r3, #3
 800b360:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b362:	2300      	movs	r3, #0
 800b364:	623b      	str	r3, [r7, #32]
 800b366:	e014      	b.n	800b392 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	601a      	str	r2, [r3, #0]
    pDest++;
 800b374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b376:	3301      	adds	r3, #1
 800b378:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37c:	3301      	adds	r3, #1
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	3301      	adds	r3, #1
 800b384:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b388:	3301      	adds	r3, #1
 800b38a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	3301      	adds	r3, #1
 800b390:	623b      	str	r3, [r7, #32]
 800b392:	6a3a      	ldr	r2, [r7, #32]
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	429a      	cmp	r2, r3
 800b398:	d3e6      	bcc.n	800b368 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b39a:	8bfb      	ldrh	r3, [r7, #30]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01e      	beq.n	800b3de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f107 0310 	add.w	r3, r7, #16
 800b3b0:	6812      	ldr	r2, [r2, #0]
 800b3b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c4:	701a      	strb	r2, [r3, #0]
      i++;
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b3d2:	8bfb      	ldrh	r3, [r7, #30]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b3d8:	8bfb      	ldrh	r3, [r7, #30]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1ea      	bne.n	800b3b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	372c      	adds	r7, #44	@ 0x2c
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	4013      	ands	r3, r2
 800b402:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b404:	68fb      	ldr	r3, [r7, #12]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800b422:	78fb      	ldrb	r3, [r7, #3]
 800b424:	015a      	lsls	r2, r3, #5
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	4013      	ands	r3, r2
 800b444:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b446:	68bb      	ldr	r3, [r7, #8]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	f003 0301 	and.w	r3, r3, #1
}
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3301      	adds	r3, #1
 800b480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b488:	d901      	bls.n	800b48e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e01b      	b.n	800b4c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	2b00      	cmp	r3, #0
 800b494:	daf2      	bge.n	800b47c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	f043 0201 	orr.w	r2, r3, #1
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4b2:	d901      	bls.n	800b4b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e006      	b.n	800b4c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d0f0      	beq.n	800b4a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
	...

0800b4d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b086      	sub	sp, #24
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b4e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b516:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b526:	2b00      	cmp	r3, #0
 800b528:	d119      	bne.n	800b55e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b52a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d10a      	bne.n	800b548 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b540:	f043 0304 	orr.w	r3, r3, #4
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	e014      	b.n	800b572 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b556:	f023 0304 	bic.w	r3, r3, #4
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	e009      	b.n	800b572 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b56c:	f023 0304 	bic.w	r3, r3, #4
 800b570:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b572:	2110      	movs	r1, #16
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7ff fe43 	bl	800b200 <USB_FlushTxFifo>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff fe6d 	bl	800b264 <USB_FlushRxFifo>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b594:	2300      	movs	r3, #0
 800b596:	613b      	str	r3, [r7, #16]
 800b598:	e015      	b.n	800b5c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	015a      	lsls	r2, r3, #5
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d3e3      	bcc.n	800b59a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f04f 32ff 	mov.w	r2, #4294967295
 800b5de:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2280      	movs	r2, #128	@ 0x80
 800b5e4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b624 <USB_HostInit+0x150>)
 800b5ea:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a0e      	ldr	r2, [pc, #56]	@ (800b628 <USB_HostInit+0x154>)
 800b5f0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b5f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d105      	bne.n	800b608 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	f043 0210 	orr.w	r2, r3, #16
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	699a      	ldr	r2, [r3, #24]
 800b60c:	4b07      	ldr	r3, [pc, #28]	@ (800b62c <USB_HostInit+0x158>)
 800b60e:	4313      	orrs	r3, r2
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b614:	7dfb      	ldrb	r3, [r7, #23]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b620:	b004      	add	sp, #16
 800b622:	4770      	bx	lr
 800b624:	00600080 	.word	0x00600080
 800b628:	004000e0 	.word	0x004000e0
 800b62c:	a3200008 	.word	0xa3200008

0800b630 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b64e:	f023 0303 	bic.w	r3, r3, #3
 800b652:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	78fb      	ldrb	r3, [r7, #3]
 800b65e:	f003 0303 	and.w	r3, r3, #3
 800b662:	68f9      	ldr	r1, [r7, #12]
 800b664:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b668:	4313      	orrs	r3, r2
 800b66a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b66c:	78fb      	ldrb	r3, [r7, #3]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d107      	bne.n	800b682 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b678:	461a      	mov	r2, r3
 800b67a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b67e:	6053      	str	r3, [r2, #4]
 800b680:	e00c      	b.n	800b69c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d107      	bne.n	800b698 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b68e:	461a      	mov	r2, r3
 800b690:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b694:	6053      	str	r3, [r2, #4]
 800b696:	e001      	b.n	800b69c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e000      	b.n	800b69e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b084      	sub	sp, #16
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b6ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b6d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6d8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b6da:	2064      	movs	r0, #100	@ 0x64
 800b6dc:	f7f8 f872 	bl	80037c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b6e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b6ee:	200a      	movs	r0, #10
 800b6f0:	f7f8 f868 	bl	80037c4 <HAL_Delay>

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b085      	sub	sp, #20
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	460b      	mov	r3, r1
 800b708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b70e:	2300      	movs	r3, #0
 800b710:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b722:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d109      	bne.n	800b742 <USB_DriveVbus+0x44>
 800b72e:	78fb      	ldrb	r3, [r7, #3]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d106      	bne.n	800b742 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b73c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b740:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b74c:	d109      	bne.n	800b762 <USB_DriveVbus+0x64>
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d106      	bne.n	800b762 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b75c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b760:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b77c:	2300      	movs	r3, #0
 800b77e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	0c5b      	lsrs	r3, r3, #17
 800b78e:	f003 0303 	and.w	r3, r3, #3
}
 800b792:	4618      	mov	r0, r3
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b085      	sub	sp, #20
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	b29b      	uxth	r3, r3
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	70fb      	strb	r3, [r7, #3]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	70bb      	strb	r3, [r7, #2]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b7e2:	78fb      	ldrb	r3, [r7, #3]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b7f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d867      	bhi.n	800b8ce <USB_HC_Init+0x10e>
 800b7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b804 <USB_HC_Init+0x44>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b815 	.word	0x0800b815
 800b808:	0800b891 	.word	0x0800b891
 800b80c:	0800b815 	.word	0x0800b815
 800b810:	0800b853 	.word	0x0800b853
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b814:	78fb      	ldrb	r3, [r7, #3]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b820:	461a      	mov	r2, r3
 800b822:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b826:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b828:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	da51      	bge.n	800b8d4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	015a      	lsls	r2, r3, #5
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	4413      	add	r3, r2
 800b838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	78fa      	ldrb	r2, [r7, #3]
 800b840:	0151      	lsls	r1, r2, #5
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	440a      	add	r2, r1
 800b846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b84a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b84e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b850:	e040      	b.n	800b8d4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b852:	78fb      	ldrb	r3, [r7, #3]
 800b854:	015a      	lsls	r2, r3, #5
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	4413      	add	r3, r2
 800b85a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b85e:	461a      	mov	r2, r3
 800b860:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b864:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b866:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	da34      	bge.n	800b8d8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b86e:	78fb      	ldrb	r3, [r7, #3]
 800b870:	015a      	lsls	r2, r3, #5
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	4413      	add	r3, r2
 800b876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	78fa      	ldrb	r2, [r7, #3]
 800b87e:	0151      	lsls	r1, r2, #5
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	440a      	add	r2, r1
 800b884:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b88c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b88e:	e023      	b.n	800b8d8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b890:	78fb      	ldrb	r3, [r7, #3]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	4413      	add	r3, r2
 800b898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b89c:	461a      	mov	r2, r3
 800b89e:	f240 2325 	movw	r3, #549	@ 0x225
 800b8a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b8a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	da17      	bge.n	800b8dc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	78fa      	ldrb	r2, [r7, #3]
 800b8bc:	0151      	lsls	r1, r2, #5
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	440a      	add	r2, r1
 800b8c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8c6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b8ca:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b8cc:	e006      	b.n	800b8dc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	77fb      	strb	r3, [r7, #31]
      break;
 800b8d2:	e004      	b.n	800b8de <USB_HC_Init+0x11e>
      break;
 800b8d4:	bf00      	nop
 800b8d6:	e002      	b.n	800b8de <USB_HC_Init+0x11e>
      break;
 800b8d8:	bf00      	nop
 800b8da:	e000      	b.n	800b8de <USB_HC_Init+0x11e>
      break;
 800b8dc:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b8de:	78fb      	ldrb	r3, [r7, #3]
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b8f0:	78fb      	ldrb	r3, [r7, #3]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	78fa      	ldrb	r2, [r7, #3]
 800b900:	0151      	lsls	r1, r2, #5
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	440a      	add	r2, r1
 800b906:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b90a:	f043 0302 	orr.w	r3, r3, #2
 800b90e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b916:	699a      	ldr	r2, [r3, #24]
 800b918:	78fb      	ldrb	r3, [r7, #3]
 800b91a:	f003 030f 	and.w	r3, r3, #15
 800b91e:	2101      	movs	r1, #1
 800b920:	fa01 f303 	lsl.w	r3, r1, r3
 800b924:	6939      	ldr	r1, [r7, #16]
 800b926:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b92a:	4313      	orrs	r3, r2
 800b92c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b93a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	da03      	bge.n	800b94a <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b946:	61bb      	str	r3, [r7, #24]
 800b948:	e001      	b.n	800b94e <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7ff ff0e 	bl	800b770 <USB_GetHostSpeed>
 800b954:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b956:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d106      	bne.n	800b96c <USB_HC_Init+0x1ac>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b02      	cmp	r3, #2
 800b962:	d003      	beq.n	800b96c <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b964:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	e001      	b.n	800b970 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b970:	787b      	ldrb	r3, [r7, #1]
 800b972:	059b      	lsls	r3, r3, #22
 800b974:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b978:	78bb      	ldrb	r3, [r7, #2]
 800b97a:	02db      	lsls	r3, r3, #11
 800b97c:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b980:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b982:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b986:	049b      	lsls	r3, r3, #18
 800b988:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b98c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b98e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b990:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b994:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	431a      	orrs	r2, r3
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	0151      	lsls	r1, r2, #5
 800b9a2:	693a      	ldr	r2, [r7, #16]
 800b9a4:	440a      	add	r2, r1
 800b9a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b9aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b9ae:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b9b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d003      	beq.n	800b9c0 <USB_HC_Init+0x200>
 800b9b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d10f      	bne.n	800b9e0 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	78fa      	ldrb	r2, [r7, #3]
 800b9d0:	0151      	lsls	r1, r2, #5
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	440a      	add	r2, r1
 800b9d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b9de:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b9e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3720      	adds	r7, #32
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop

0800b9ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08c      	sub	sp, #48	@ 0x30
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	785b      	ldrb	r3, [r3, #1]
 800ba02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ba04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba08:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	799b      	ldrb	r3, [r3, #6]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d158      	bne.n	800bac4 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800ba12:	2301      	movs	r3, #1
 800ba14:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	78db      	ldrb	r3, [r3, #3]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d007      	beq.n	800ba2e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	8a92      	ldrh	r2, [r2, #20]
 800ba24:	fb03 f202 	mul.w	r2, r3, r2
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	61da      	str	r2, [r3, #28]
 800ba2c:	e079      	b.n	800bb22 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	7c9b      	ldrb	r3, [r3, #18]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d130      	bne.n	800ba98 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	2bbc      	cmp	r3, #188	@ 0xbc
 800ba3c:	d918      	bls.n	800ba70 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	8a9b      	ldrh	r3, [r3, #20]
 800ba42:	461a      	mov	r2, r3
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	69da      	ldr	r2, [r3, #28]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d003      	beq.n	800ba60 <USB_HC_StartXfer+0x74>
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d103      	bne.n	800ba68 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2202      	movs	r2, #2
 800ba64:	60da      	str	r2, [r3, #12]
 800ba66:	e05c      	b.n	800bb22 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	60da      	str	r2, [r3, #12]
 800ba6e:	e058      	b.n	800bb22 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	6a1a      	ldr	r2, [r3, #32]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d007      	beq.n	800ba90 <USB_HC_StartXfer+0xa4>
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d003      	beq.n	800ba90 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2204      	movs	r2, #4
 800ba8c:	60da      	str	r2, [r3, #12]
 800ba8e:	e048      	b.n	800bb22 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	2203      	movs	r2, #3
 800ba94:	60da      	str	r2, [r3, #12]
 800ba96:	e044      	b.n	800bb22 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ba98:	79fb      	ldrb	r3, [r7, #7]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d10d      	bne.n	800baba <USB_HC_StartXfer+0xce>
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	8a92      	ldrh	r2, [r2, #20]
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d907      	bls.n	800baba <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800baaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	8a92      	ldrh	r2, [r2, #20]
 800bab0:	fb03 f202 	mul.w	r2, r3, r2
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	61da      	str	r2, [r3, #28]
 800bab8:	e033      	b.n	800bb22 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6a1a      	ldr	r2, [r3, #32]
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	61da      	str	r2, [r3, #28]
 800bac2:	e02e      	b.n	800bb22 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d018      	beq.n	800bafe <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	6a1b      	ldr	r3, [r3, #32]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	8a92      	ldrh	r2, [r2, #20]
 800bad4:	4413      	add	r3, r2
 800bad6:	3b01      	subs	r3, #1
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	8a92      	ldrh	r2, [r2, #20]
 800badc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bae0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800bae2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800bae4:	8b7b      	ldrh	r3, [r7, #26]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d90b      	bls.n	800bb02 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800baea:	8b7b      	ldrh	r3, [r7, #26]
 800baec:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800baee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	8a92      	ldrh	r2, [r2, #20]
 800baf4:	fb03 f202 	mul.w	r2, r3, r2
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	61da      	str	r2, [r3, #28]
 800bafc:	e001      	b.n	800bb02 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800bafe:	2301      	movs	r3, #1
 800bb00:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	78db      	ldrb	r3, [r3, #3]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d007      	beq.n	800bb1a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bb0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	8a92      	ldrh	r2, [r2, #20]
 800bb10:	fb03 f202 	mul.w	r2, r3, r2
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	61da      	str	r2, [r3, #28]
 800bb18:	e003      	b.n	800bb22 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	6a1a      	ldr	r2, [r3, #32]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bb2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bb2c:	04d9      	lsls	r1, r3, #19
 800bb2e:	4ba4      	ldr	r3, [pc, #656]	@ (800bdc0 <USB_HC_StartXfer+0x3d4>)
 800bb30:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bb32:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	7d9b      	ldrb	r3, [r3, #22]
 800bb38:	075b      	lsls	r3, r3, #29
 800bb3a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bb3e:	69f9      	ldr	r1, [r7, #28]
 800bb40:	0148      	lsls	r0, r1, #5
 800bb42:	6a39      	ldr	r1, [r7, #32]
 800bb44:	4401      	add	r1, r0
 800bb46:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bb4a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bb4c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bb4e:	79fb      	ldrb	r3, [r7, #7]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d009      	beq.n	800bb68 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	6999      	ldr	r1, [r3, #24]
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb64:	460a      	mov	r2, r1
 800bb66:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	bf0c      	ite	eq
 800bb78:	2301      	moveq	r3, #1
 800bb7a:	2300      	movne	r3, #0
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69fa      	ldr	r2, [r7, #28]
 800bb90:	0151      	lsls	r1, r2, #5
 800bb92:	6a3a      	ldr	r2, [r7, #32]
 800bb94:	440a      	add	r2, r1
 800bb96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb9e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	7e7b      	ldrb	r3, [r7, #25]
 800bbb0:	075b      	lsls	r3, r3, #29
 800bbb2:	69f9      	ldr	r1, [r7, #28]
 800bbb4:	0148      	lsls	r0, r1, #5
 800bbb6:	6a39      	ldr	r1, [r7, #32]
 800bbb8:	4401      	add	r1, r0
 800bbba:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	799b      	ldrb	r3, [r3, #6]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	f040 80c4 	bne.w	800bd54 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	7c5b      	ldrb	r3, [r3, #17]
 800bbd0:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	69fa      	ldr	r2, [r7, #28]
 800bbda:	0151      	lsls	r1, r2, #5
 800bbdc:	6a3a      	ldr	r2, [r7, #32]
 800bbde:	440a      	add	r2, r1
 800bbe0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800bbe4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bbe8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	015a      	lsls	r2, r3, #5
 800bbee:	6a3b      	ldr	r3, [r7, #32]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	69fa      	ldr	r2, [r7, #28]
 800bbfa:	0151      	lsls	r1, r2, #5
 800bbfc:	6a3a      	ldr	r2, [r7, #32]
 800bbfe:	440a      	add	r2, r1
 800bc00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800bc08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	79db      	ldrb	r3, [r3, #7]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d123      	bne.n	800bc5a <USB_HC_StartXfer+0x26e>
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	78db      	ldrb	r3, [r3, #3]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d11f      	bne.n	800bc5a <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	015a      	lsls	r2, r3, #5
 800bc1e:	6a3b      	ldr	r3, [r7, #32]
 800bc20:	4413      	add	r3, r2
 800bc22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	0151      	lsls	r1, r2, #5
 800bc2c:	6a3a      	ldr	r2, [r7, #32]
 800bc2e:	440a      	add	r2, r1
 800bc30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc38:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	015a      	lsls	r2, r3, #5
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	4413      	add	r3, r2
 800bc42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	69fa      	ldr	r2, [r7, #28]
 800bc4a:	0151      	lsls	r1, r2, #5
 800bc4c:	6a3a      	ldr	r2, [r7, #32]
 800bc4e:	440a      	add	r2, r1
 800bc50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc58:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	7c9b      	ldrb	r3, [r3, #18]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d003      	beq.n	800bc6a <USB_HC_StartXfer+0x27e>
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	7c9b      	ldrb	r3, [r3, #18]
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d117      	bne.n	800bc9a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d113      	bne.n	800bc9a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	78db      	ldrb	r3, [r3, #3]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d10f      	bne.n	800bc9a <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	015a      	lsls	r2, r3, #5
 800bc7e:	6a3b      	ldr	r3, [r7, #32]
 800bc80:	4413      	add	r3, r2
 800bc82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	69fa      	ldr	r2, [r7, #28]
 800bc8a:	0151      	lsls	r1, r2, #5
 800bc8c:	6a3a      	ldr	r2, [r7, #32]
 800bc8e:	440a      	add	r2, r1
 800bc90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc98:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	7c9b      	ldrb	r3, [r3, #18]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d163      	bne.n	800bd6a <USB_HC_StartXfer+0x37e>
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	78db      	ldrb	r3, [r3, #3]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d15f      	bne.n	800bd6a <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d859      	bhi.n	800bd68 <USB_HC_StartXfer+0x37c>
 800bcb4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcbc <USB_HC_StartXfer+0x2d0>)
 800bcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcba:	bf00      	nop
 800bcbc:	0800bccd 	.word	0x0800bccd
 800bcc0:	0800bcef 	.word	0x0800bcef
 800bcc4:	0800bd11 	.word	0x0800bd11
 800bcc8:	0800bd33 	.word	0x0800bd33
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	015a      	lsls	r2, r3, #5
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	69fa      	ldr	r2, [r7, #28]
 800bcdc:	0151      	lsls	r1, r2, #5
 800bcde:	6a3a      	ldr	r2, [r7, #32]
 800bce0:	440a      	add	r2, r1
 800bce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcea:	6053      	str	r3, [r2, #4]
          break;
 800bcec:	e03d      	b.n	800bd6a <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	6a3b      	ldr	r3, [r7, #32]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	69fa      	ldr	r2, [r7, #28]
 800bcfe:	0151      	lsls	r1, r2, #5
 800bd00:	6a3a      	ldr	r2, [r7, #32]
 800bd02:	440a      	add	r2, r1
 800bd04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd08:	f043 030e 	orr.w	r3, r3, #14
 800bd0c:	6053      	str	r3, [r2, #4]
          break;
 800bd0e:	e02c      	b.n	800bd6a <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	015a      	lsls	r2, r3, #5
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	4413      	add	r3, r2
 800bd18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	69fa      	ldr	r2, [r7, #28]
 800bd20:	0151      	lsls	r1, r2, #5
 800bd22:	6a3a      	ldr	r2, [r7, #32]
 800bd24:	440a      	add	r2, r1
 800bd26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bd2e:	6053      	str	r3, [r2, #4]
          break;
 800bd30:	e01b      	b.n	800bd6a <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	015a      	lsls	r2, r3, #5
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	4413      	add	r3, r2
 800bd3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	69fa      	ldr	r2, [r7, #28]
 800bd42:	0151      	lsls	r1, r2, #5
 800bd44:	6a3a      	ldr	r2, [r7, #32]
 800bd46:	440a      	add	r2, r1
 800bd48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd50:	6053      	str	r3, [r2, #4]
          break;
 800bd52:	e00a      	b.n	800bd6a <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	015a      	lsls	r2, r3, #5
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd60:	461a      	mov	r2, r3
 800bd62:	2300      	movs	r3, #0
 800bd64:	6053      	str	r3, [r2, #4]
 800bd66:	e000      	b.n	800bd6a <USB_HC_StartXfer+0x37e>
          break;
 800bd68:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	015a      	lsls	r2, r3, #5
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	4413      	add	r3, r2
 800bd72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bd80:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	78db      	ldrb	r3, [r3, #3]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d004      	beq.n	800bd94 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd90:	613b      	str	r3, [r7, #16]
 800bd92:	e003      	b.n	800bd9c <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bd9a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bda2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	015a      	lsls	r2, r3, #5
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	4413      	add	r3, r2
 800bdac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bdb6:	79fb      	ldrb	r3, [r7, #7]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	e055      	b.n	800be6c <USB_HC_StartXfer+0x480>
 800bdc0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	78db      	ldrb	r3, [r3, #3]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d14e      	bne.n	800be6a <USB_HC_StartXfer+0x47e>
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	6a1b      	ldr	r3, [r3, #32]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d04a      	beq.n	800be6a <USB_HC_StartXfer+0x47e>
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	79db      	ldrb	r3, [r3, #7]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d146      	bne.n	800be6a <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	7c9b      	ldrb	r3, [r3, #18]
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d831      	bhi.n	800be48 <USB_HC_StartXfer+0x45c>
 800bde4:	a201      	add	r2, pc, #4	@ (adr r2, 800bdec <USB_HC_StartXfer+0x400>)
 800bde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdea:	bf00      	nop
 800bdec:	0800bdfd 	.word	0x0800bdfd
 800bdf0:	0800be21 	.word	0x0800be21
 800bdf4:	0800bdfd 	.word	0x0800bdfd
 800bdf8:	0800be21 	.word	0x0800be21
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	6a1b      	ldr	r3, [r3, #32]
 800be00:	3303      	adds	r3, #3
 800be02:	089b      	lsrs	r3, r3, #2
 800be04:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800be06:	8afa      	ldrh	r2, [r7, #22]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	429a      	cmp	r2, r3
 800be10:	d91c      	bls.n	800be4c <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	f043 0220 	orr.w	r2, r3, #32
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	619a      	str	r2, [r3, #24]
        }
        break;
 800be1e:	e015      	b.n	800be4c <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	3303      	adds	r3, #3
 800be26:	089b      	lsrs	r3, r3, #2
 800be28:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800be2a:	8afa      	ldrh	r2, [r7, #22]
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	b29b      	uxth	r3, r3
 800be36:	429a      	cmp	r2, r3
 800be38:	d90a      	bls.n	800be50 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	619a      	str	r2, [r3, #24]
        }
        break;
 800be46:	e003      	b.n	800be50 <USB_HC_StartXfer+0x464>

      default:
        break;
 800be48:	bf00      	nop
 800be4a:	e002      	b.n	800be52 <USB_HC_StartXfer+0x466>
        break;
 800be4c:	bf00      	nop
 800be4e:	e000      	b.n	800be52 <USB_HC_StartXfer+0x466>
        break;
 800be50:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	6999      	ldr	r1, [r3, #24]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	785a      	ldrb	r2, [r3, #1]
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	2000      	movs	r0, #0
 800be62:	9000      	str	r0, [sp, #0]
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f7ff fa2b 	bl	800b2c0 <USB_WritePacket>
  }

  return HAL_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3728      	adds	r7, #40	@ 0x28
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	b29b      	uxth	r3, r3
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800be96:	b480      	push	{r7}
 800be98:	b089      	sub	sp, #36	@ 0x24
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	460b      	mov	r3, r1
 800bea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800bea6:	78fb      	ldrb	r3, [r7, #3]
 800bea8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	015a      	lsls	r2, r3, #5
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	4413      	add	r3, r2
 800beb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	0c9b      	lsrs	r3, r3, #18
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	015a      	lsls	r2, r3, #5
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	4413      	add	r3, r2
 800becc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	0fdb      	lsrs	r3, r3, #31
 800bed4:	f003 0301 	and.w	r3, r3, #1
 800bed8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	015a      	lsls	r2, r3, #5
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	0fdb      	lsrs	r3, r3, #31
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b20      	cmp	r3, #32
 800befa:	d10d      	bne.n	800bf18 <USB_HC_Halt+0x82>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10a      	bne.n	800bf18 <USB_HC_Halt+0x82>
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d005      	beq.n	800bf14 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d002      	beq.n	800bf14 <USB_HC_Halt+0x7e>
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d101      	bne.n	800bf18 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800bf14:	2300      	movs	r3, #0
 800bf16:	e0d8      	b.n	800c0ca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <USB_HC_Halt+0x8e>
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d173      	bne.n	800c00c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	015a      	lsls	r2, r3, #5
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	69ba      	ldr	r2, [r7, #24]
 800bf34:	0151      	lsls	r1, r2, #5
 800bf36:	69fa      	ldr	r2, [r7, #28]
 800bf38:	440a      	add	r2, r1
 800bf3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f003 0320 	and.w	r3, r3, #32
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d14a      	bne.n	800bfe6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d133      	bne.n	800bfc4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	69ba      	ldr	r2, [r7, #24]
 800bf6c:	0151      	lsls	r1, r2, #5
 800bf6e:	69fa      	ldr	r2, [r7, #28]
 800bf70:	440a      	add	r2, r1
 800bf72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf7a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	015a      	lsls	r2, r3, #5
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	4413      	add	r3, r2
 800bf84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	0151      	lsls	r1, r2, #5
 800bf8e:	69fa      	ldr	r2, [r7, #28]
 800bf90:	440a      	add	r2, r1
 800bf92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf9a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bfa8:	d82e      	bhi.n	800c008 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	015a      	lsls	r2, r3, #5
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bfbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bfc0:	d0ec      	beq.n	800bf9c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bfc2:	e081      	b.n	800c0c8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	69ba      	ldr	r2, [r7, #24]
 800bfd4:	0151      	lsls	r1, r2, #5
 800bfd6:	69fa      	ldr	r2, [r7, #28]
 800bfd8:	440a      	add	r2, r1
 800bfda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bfde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bfe2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bfe4:	e070      	b.n	800c0c8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	0151      	lsls	r1, r2, #5
 800bff8:	69fa      	ldr	r2, [r7, #28]
 800bffa:	440a      	add	r2, r1
 800bffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c000:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c004:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c006:	e05f      	b.n	800c0c8 <USB_HC_Halt+0x232>
            break;
 800c008:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c00a:	e05d      	b.n	800c0c8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	015a      	lsls	r2, r3, #5
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	4413      	add	r3, r2
 800c014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	69ba      	ldr	r2, [r7, #24]
 800c01c:	0151      	lsls	r1, r2, #5
 800c01e:	69fa      	ldr	r2, [r7, #28]
 800c020:	440a      	add	r2, r1
 800c022:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c026:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c02a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d133      	bne.n	800c0a4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	015a      	lsls	r2, r3, #5
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	4413      	add	r3, r2
 800c044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	0151      	lsls	r1, r2, #5
 800c04e:	69fa      	ldr	r2, [r7, #28]
 800c050:	440a      	add	r2, r1
 800c052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c056:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c05a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	015a      	lsls	r2, r3, #5
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	4413      	add	r3, r2
 800c064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	69ba      	ldr	r2, [r7, #24]
 800c06c:	0151      	lsls	r1, r2, #5
 800c06e:	69fa      	ldr	r2, [r7, #28]
 800c070:	440a      	add	r2, r1
 800c072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c076:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c07a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	3301      	adds	r3, #1
 800c080:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c088:	d81d      	bhi.n	800c0c6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	4413      	add	r3, r2
 800c092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c09c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0a0:	d0ec      	beq.n	800c07c <USB_HC_Halt+0x1e6>
 800c0a2:	e011      	b.n	800c0c8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	69ba      	ldr	r2, [r7, #24]
 800c0b4:	0151      	lsls	r1, r2, #5
 800c0b6:	69fa      	ldr	r2, [r7, #28]
 800c0b8:	440a      	add	r2, r1
 800c0ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c0be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	e000      	b.n	800c0c8 <USB_HC_Halt+0x232>
          break;
 800c0c6:	bf00      	nop
    }
  }

  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3724      	adds	r7, #36	@ 0x24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b088      	sub	sp, #32
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff f82b 	bl	800b146 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0f0:	2110      	movs	r1, #16
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff f884 	bl	800b200 <USB_FlushTxFifo>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff f8ae 	bl	800b264 <USB_FlushRxFifo>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d001      	beq.n	800c112 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c112:	2300      	movs	r3, #0
 800c114:	61bb      	str	r3, [r7, #24]
 800c116:	e01f      	b.n	800c158 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c12e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c136:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c13e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	4413      	add	r3, r2
 800c148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c14c:	461a      	mov	r2, r3
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	3301      	adds	r3, #1
 800c156:	61bb      	str	r3, [r7, #24]
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	2b0f      	cmp	r3, #15
 800c15c:	d9dc      	bls.n	800c118 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c15e:	2300      	movs	r3, #0
 800c160:	61bb      	str	r3, [r7, #24]
 800c162:	e034      	b.n	800c1ce <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c17a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c182:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c18a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	015a      	lsls	r2, r3, #5
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	4413      	add	r3, r2
 800c194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c198:	461a      	mov	r2, r3
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1aa:	d80c      	bhi.n	800c1c6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1c2:	d0ec      	beq.n	800c19e <USB_StopHost+0xc8>
 800c1c4:	e000      	b.n	800c1c8 <USB_StopHost+0xf2>
        break;
 800c1c6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	61bb      	str	r3, [r7, #24]
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	2b0f      	cmp	r3, #15
 800c1d2:	d9c7      	bls.n	800c164 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1da:	461a      	mov	r2, r3
 800c1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7fe ff9a 	bl	800b124 <USB_EnableGlobalInt>

  return ret;
 800c1f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3720      	adds	r7, #32
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c1fa:	b590      	push	{r4, r7, lr}
 800c1fc:	b089      	sub	sp, #36	@ 0x24
 800c1fe:	af04      	add	r7, sp, #16
 800c200:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c202:	2301      	movs	r3, #1
 800c204:	2202      	movs	r2, #2
 800c206:	2102      	movs	r1, #2
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fc86 	bl	800cb1a <USBH_FindInterface>
 800c20e:	4603      	mov	r3, r0
 800c210:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c212:	7bfb      	ldrb	r3, [r7, #15]
 800c214:	2bff      	cmp	r3, #255	@ 0xff
 800c216:	d002      	beq.n	800c21e <USBH_CDC_InterfaceInit+0x24>
 800c218:	7bfb      	ldrb	r3, [r7, #15]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d901      	bls.n	800c222 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c21e:	2302      	movs	r3, #2
 800c220:	e13d      	b.n	800c49e <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	4619      	mov	r1, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fc5b 	bl	800cae2 <USBH_SelectInterface>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c236:	2302      	movs	r3, #2
 800c238:	e131      	b.n	800c49e <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c240:	2050      	movs	r0, #80	@ 0x50
 800c242:	f002 fb57 	bl	800e8f4 <malloc>
 800c246:	4603      	mov	r3, r0
 800c248:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c250:	69db      	ldr	r3, [r3, #28]
 800c252:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c25a:	2302      	movs	r3, #2
 800c25c:	e11f      	b.n	800c49e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c25e:	2250      	movs	r2, #80	@ 0x50
 800c260:	2100      	movs	r1, #0
 800c262:	68b8      	ldr	r0, [r7, #8]
 800c264:	f003 fa86 	bl	800f774 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	211a      	movs	r1, #26
 800c26e:	fb01 f303 	mul.w	r3, r1, r3
 800c272:	4413      	add	r3, r2
 800c274:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	b25b      	sxtb	r3, r3
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	da15      	bge.n	800c2ac <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c280:	7bfb      	ldrb	r3, [r7, #15]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	211a      	movs	r1, #26
 800c286:	fb01 f303 	mul.w	r3, r1, r3
 800c28a:	4413      	add	r3, r2
 800c28c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c290:	781a      	ldrb	r2, [r3, #0]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	211a      	movs	r1, #26
 800c29c:	fb01 f303 	mul.w	r3, r1, r3
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c2a6:	881a      	ldrh	r2, [r3, #0]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	785b      	ldrb	r3, [r3, #1]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f001 ffbf 	bl	800e236 <USBH_AllocPipe>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	7819      	ldrb	r1, [r3, #0]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	7858      	ldrb	r0, [r3, #1]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	8952      	ldrh	r2, [r2, #10]
 800c2d8:	9202      	str	r2, [sp, #8]
 800c2da:	2203      	movs	r2, #3
 800c2dc:	9201      	str	r2, [sp, #4]
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f001 ff77 	bl	800e1d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f002 fa78 	bl	800e7e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	210a      	movs	r1, #10
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fc0b 	bl	800cb1a <USBH_FindInterface>
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	2bff      	cmp	r3, #255	@ 0xff
 800c30c:	d002      	beq.n	800c314 <USBH_CDC_InterfaceInit+0x11a>
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d901      	bls.n	800c318 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c314:	2302      	movs	r3, #2
 800c316:	e0c2      	b.n	800c49e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c318:	7bfb      	ldrb	r3, [r7, #15]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	211a      	movs	r1, #26
 800c31e:	fb01 f303 	mul.w	r3, r1, r3
 800c322:	4413      	add	r3, r2
 800c324:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	b25b      	sxtb	r3, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	da16      	bge.n	800c35e <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	211a      	movs	r1, #26
 800c336:	fb01 f303 	mul.w	r3, r1, r3
 800c33a:	4413      	add	r3, r2
 800c33c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c340:	781a      	ldrb	r2, [r3, #0]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	211a      	movs	r1, #26
 800c34c:	fb01 f303 	mul.w	r3, r1, r3
 800c350:	4413      	add	r3, r2
 800c352:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c356:	881a      	ldrh	r2, [r3, #0]
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	835a      	strh	r2, [r3, #26]
 800c35c:	e015      	b.n	800c38a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	211a      	movs	r1, #26
 800c364:	fb01 f303 	mul.w	r3, r1, r3
 800c368:	4413      	add	r3, r2
 800c36a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c36e:	781a      	ldrb	r2, [r3, #0]
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	211a      	movs	r1, #26
 800c37a:	fb01 f303 	mul.w	r3, r1, r3
 800c37e:	4413      	add	r3, r2
 800c380:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c384:	881a      	ldrh	r2, [r3, #0]
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	211a      	movs	r1, #26
 800c390:	fb01 f303 	mul.w	r3, r1, r3
 800c394:	4413      	add	r3, r2
 800c396:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	b25b      	sxtb	r3, r3
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	da16      	bge.n	800c3d0 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	211a      	movs	r1, #26
 800c3a8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	211a      	movs	r1, #26
 800c3be:	fb01 f303 	mul.w	r3, r1, r3
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c3c8:	881a      	ldrh	r2, [r3, #0]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	835a      	strh	r2, [r3, #26]
 800c3ce:	e015      	b.n	800c3fc <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	211a      	movs	r1, #26
 800c3d6:	fb01 f303 	mul.w	r3, r1, r3
 800c3da:	4413      	add	r3, r2
 800c3dc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c3e0:	781a      	ldrb	r2, [r3, #0]
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	211a      	movs	r1, #26
 800c3ec:	fb01 f303 	mul.w	r3, r1, r3
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c3f6:	881a      	ldrh	r2, [r3, #0]
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	7b9b      	ldrb	r3, [r3, #14]
 800c400:	4619      	mov	r1, r3
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f001 ff17 	bl	800e236 <USBH_AllocPipe>
 800c408:	4603      	mov	r3, r0
 800c40a:	461a      	mov	r2, r3
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	7bdb      	ldrb	r3, [r3, #15]
 800c414:	4619      	mov	r1, r3
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f001 ff0d 	bl	800e236 <USBH_AllocPipe>
 800c41c:	4603      	mov	r3, r0
 800c41e:	461a      	mov	r2, r3
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	7b59      	ldrb	r1, [r3, #13]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	7b98      	ldrb	r0, [r3, #14]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	8b12      	ldrh	r2, [r2, #24]
 800c43c:	9202      	str	r2, [sp, #8]
 800c43e:	2202      	movs	r2, #2
 800c440:	9201      	str	r2, [sp, #4]
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	4623      	mov	r3, r4
 800c446:	4602      	mov	r2, r0
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f001 fec5 	bl	800e1d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	7b19      	ldrb	r1, [r3, #12]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	7bd8      	ldrb	r0, [r3, #15]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	8b52      	ldrh	r2, [r2, #26]
 800c466:	9202      	str	r2, [sp, #8]
 800c468:	2202      	movs	r2, #2
 800c46a:	9201      	str	r2, [sp, #4]
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	4623      	mov	r3, r4
 800c470:	4602      	mov	r2, r0
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 feb0 	bl	800e1d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	7b5b      	ldrb	r3, [r3, #13]
 800c484:	2200      	movs	r2, #0
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f002 f9ad 	bl	800e7e8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	7b1b      	ldrb	r3, [r3, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f002 f9a6 	bl	800e7e8 <USBH_LL_SetToggle>

  return USBH_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3714      	adds	r7, #20
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd90      	pop	{r4, r7, pc}

0800c4a6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00e      	beq.n	800c4de <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f001 fea5 	bl	800e216 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f001 fed0 	bl	800e278 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	7b1b      	ldrb	r3, [r3, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00e      	beq.n	800c504 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	7b1b      	ldrb	r3, [r3, #12]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f001 fe92 	bl	800e216 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	7b1b      	ldrb	r3, [r3, #12]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f001 febd 	bl	800e278 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	7b5b      	ldrb	r3, [r3, #13]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00e      	beq.n	800c52a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	7b5b      	ldrb	r3, [r3, #13]
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f001 fe7f 	bl	800e216 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	7b5b      	ldrb	r3, [r3, #13]
 800c51c:	4619      	mov	r1, r3
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f001 feaa 	bl	800e278 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00b      	beq.n	800c54e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c53c:	69db      	ldr	r3, [r3, #28]
 800c53e:	4618      	mov	r0, r3
 800c540:	f002 f9e0 	bl	800e904 <free>
    phost->pActiveClass->pData = 0U;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c54a:	2200      	movs	r2, #0
 800c54c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3340      	adds	r3, #64	@ 0x40
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f8b2 	bl	800c6da <GetLineCoding>
 800c576:	4603      	mov	r3, r0
 800c578:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c57a:	7afb      	ldrb	r3, [r7, #11]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d105      	bne.n	800c58c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c586:	2102      	movs	r1, #2
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c58c:	7afb      	ldrb	r3, [r7, #11]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
	...

0800c598 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5ae:	69db      	ldr	r3, [r3, #28]
 800c5b0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c5b8:	2b04      	cmp	r3, #4
 800c5ba:	d877      	bhi.n	800c6ac <USBH_CDC_Process+0x114>
 800c5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c4 <USBH_CDC_Process+0x2c>)
 800c5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c2:	bf00      	nop
 800c5c4:	0800c5d9 	.word	0x0800c5d9
 800c5c8:	0800c5df 	.word	0x0800c5df
 800c5cc:	0800c60f 	.word	0x0800c60f
 800c5d0:	0800c683 	.word	0x0800c683
 800c5d4:	0800c691 	.word	0x0800c691
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73fb      	strb	r3, [r7, #15]
      break;
 800c5dc:	e06d      	b.n	800c6ba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 f897 	bl	800c718 <SetLineCoding>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c5ee:	7bbb      	ldrb	r3, [r7, #14]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d104      	bne.n	800c5fe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	2202      	movs	r2, #2
 800c5f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c5fc:	e058      	b.n	800c6b0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d055      	beq.n	800c6b0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2204      	movs	r2, #4
 800c608:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c60c:	e050      	b.n	800c6b0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	3340      	adds	r3, #64	@ 0x40
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f860 	bl	800c6da <GetLineCoding>
 800c61a:	4603      	mov	r3, r0
 800c61c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c61e:	7bbb      	ldrb	r3, [r7, #14]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d126      	bne.n	800c672 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2200      	movs	r2, #0
 800c628:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c636:	791b      	ldrb	r3, [r3, #4]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d13b      	bne.n	800c6b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c646:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c648:	429a      	cmp	r2, r3
 800c64a:	d133      	bne.n	800c6b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c656:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c658:	429a      	cmp	r2, r3
 800c65a:	d12b      	bne.n	800c6b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c664:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c666:	429a      	cmp	r2, r3
 800c668:	d124      	bne.n	800c6b4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f958 	bl	800c920 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c670:	e020      	b.n	800c6b4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c672:	7bbb      	ldrb	r3, [r7, #14]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d01d      	beq.n	800c6b4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2204      	movs	r2, #4
 800c67c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c680:	e018      	b.n	800c6b4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f867 	bl	800c756 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f8da 	bl	800c842 <CDC_ProcessReception>
      break;
 800c68e:	e014      	b.n	800c6ba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c690:	2100      	movs	r1, #0
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 f81a 	bl	800d6cc <USBH_ClrFeature>
 800c698:	4603      	mov	r3, r0
 800c69a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10a      	bne.n	800c6b8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c6aa:	e005      	b.n	800c6b8 <USBH_CDC_Process+0x120>

    default:
      break;
 800c6ac:	bf00      	nop
 800c6ae:	e004      	b.n	800c6ba <USBH_CDC_Process+0x122>
      break;
 800c6b0:	bf00      	nop
 800c6b2:	e002      	b.n	800c6ba <USBH_CDC_Process+0x122>
      break;
 800c6b4:	bf00      	nop
 800c6b6:	e000      	b.n	800c6ba <USBH_CDC_Process+0x122>
      break;
 800c6b8:	bf00      	nop

  }

  return status;
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	22a1      	movs	r2, #161	@ 0xa1
 800c6e8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2221      	movs	r2, #33	@ 0x21
 800c6ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2207      	movs	r2, #7
 800c700:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2207      	movs	r2, #7
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f001 fb14 	bl	800dd36 <USBH_CtlReq>
 800c70e:	4603      	mov	r3, r0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2221      	movs	r2, #33	@ 0x21
 800c726:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2220      	movs	r2, #32
 800c72c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2207      	movs	r2, #7
 800c73e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2207      	movs	r2, #7
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f001 faf5 	bl	800dd36 <USBH_CtlReq>
 800c74c:	4603      	mov	r3, r0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b086      	sub	sp, #24
 800c75a:	af02      	add	r7, sp, #8
 800c75c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c764:	69db      	ldr	r3, [r3, #28]
 800c766:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c768:	2300      	movs	r3, #0
 800c76a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c772:	2b01      	cmp	r3, #1
 800c774:	d002      	beq.n	800c77c <CDC_ProcessTransmission+0x26>
 800c776:	2b02      	cmp	r3, #2
 800c778:	d023      	beq.n	800c7c2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c77a:	e05e      	b.n	800c83a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	8b12      	ldrh	r2, [r2, #24]
 800c784:	4293      	cmp	r3, r2
 800c786:	d90b      	bls.n	800c7a0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	69d9      	ldr	r1, [r3, #28]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	8b1a      	ldrh	r2, [r3, #24]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	7b5b      	ldrb	r3, [r3, #13]
 800c794:	2001      	movs	r0, #1
 800c796:	9000      	str	r0, [sp, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f001 fcda 	bl	800e152 <USBH_BulkSendData>
 800c79e:	e00b      	b.n	800c7b8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	7b5b      	ldrb	r3, [r3, #13]
 800c7ae:	2001      	movs	r0, #1
 800c7b0:	9000      	str	r0, [sp, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f001 fccd 	bl	800e152 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c7c0:	e03b      	b.n	800c83a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	7b5b      	ldrb	r3, [r3, #13]
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f001 ffe3 	bl	800e794 <USBH_LL_GetURBState>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c7d2:	7afb      	ldrb	r3, [r7, #11]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d128      	bne.n	800c82a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	8b12      	ldrh	r2, [r2, #24]
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d90e      	bls.n	800c802 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	8b12      	ldrh	r2, [r2, #24]
 800c7ec:	1a9a      	subs	r2, r3, r2
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	8b12      	ldrh	r2, [r2, #24]
 800c7fa:	441a      	add	r2, r3
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	61da      	str	r2, [r3, #28]
 800c800:	e002      	b.n	800c808 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d004      	beq.n	800c81a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c818:	e00e      	b.n	800c838 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f868 	bl	800c8f8 <USBH_CDC_TransmitCallback>
      break;
 800c828:	e006      	b.n	800c838 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c82a:	7afb      	ldrb	r3, [r7, #11]
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d103      	bne.n	800c838 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c838:	bf00      	nop
  }
}
 800c83a:	bf00      	nop
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b086      	sub	sp, #24
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c850:	69db      	ldr	r3, [r3, #28]
 800c852:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c854:	2300      	movs	r3, #0
 800c856:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c85e:	2b03      	cmp	r3, #3
 800c860:	d002      	beq.n	800c868 <CDC_ProcessReception+0x26>
 800c862:	2b04      	cmp	r3, #4
 800c864:	d00e      	beq.n	800c884 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c866:	e043      	b.n	800c8f0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	6a19      	ldr	r1, [r3, #32]
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	8b5a      	ldrh	r2, [r3, #26]
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	7b1b      	ldrb	r3, [r3, #12]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f001 fc91 	bl	800e19c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	2204      	movs	r2, #4
 800c87e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c882:	e035      	b.n	800c8f0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	7b1b      	ldrb	r3, [r3, #12]
 800c888:	4619      	mov	r1, r3
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f001 ff82 	bl	800e794 <USBH_LL_GetURBState>
 800c890:	4603      	mov	r3, r0
 800c892:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c894:	7cfb      	ldrb	r3, [r7, #19]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d129      	bne.n	800c8ee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	7b1b      	ldrb	r3, [r3, #12]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 fee5 	bl	800e670 <USBH_LL_GetLastXferSize>
 800c8a6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d016      	beq.n	800c8e0 <CDC_ProcessReception+0x9e>
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	8b5b      	ldrh	r3, [r3, #26]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d110      	bne.n	800c8e0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	1ad2      	subs	r2, r2, r3
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	6a1a      	ldr	r2, [r3, #32]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	441a      	add	r2, r3
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2203      	movs	r2, #3
 800c8da:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c8de:	e006      	b.n	800c8ee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f80f 	bl	800c90c <USBH_CDC_ReceiveCallback>
      break;
 800c8ee:	bf00      	nop
  }
}
 800c8f0:	bf00      	nop
 800c8f2:	3718      	adds	r7, #24
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c914:	bf00      	nop
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	4613      	mov	r3, r2
 800c940:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c948:	2302      	movs	r3, #2
 800c94a:	e029      	b.n	800c9a0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	79fa      	ldrb	r2, [r7, #7]
 800c950:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 f81f 	bl	800c9a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d003      	beq.n	800c998 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f001 fdb5 	bl	800e508 <USBH_LL_Init>

  return USBH_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	e009      	b.n	800c9ce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	33e0      	adds	r3, #224	@ 0xe0
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	60fb      	str	r3, [r7, #12]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2b0f      	cmp	r3, #15
 800c9d2:	d9f2      	bls.n	800c9ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	60fb      	str	r3, [r7, #12]
 800c9d8:	e009      	b.n	800c9ee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	60fb      	str	r3, [r7, #12]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f4:	d3f1      	bcc.n	800c9da <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2240      	movs	r2, #64	@ 0x40
 800ca1a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	331c      	adds	r3, #28
 800ca46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f002 fe91 	bl	800f774 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ca58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f002 fe88 	bl	800f774 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ca6a:	2212      	movs	r2, #18
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f002 fe80 	bl	800f774 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ca7a:	223e      	movs	r2, #62	@ 0x3e
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f002 fe78 	bl	800f774 <memset>

  return USBH_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ca8e:	b480      	push	{r7}
 800ca90:	b085      	sub	sp, #20
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d016      	beq.n	800cad0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10e      	bne.n	800caca <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cab2:	1c59      	adds	r1, r3, #1
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	33de      	adds	r3, #222	@ 0xde
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	73fb      	strb	r3, [r7, #15]
 800cac8:	e004      	b.n	800cad4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800caca:	2302      	movs	r3, #2
 800cacc:	73fb      	strb	r3, [r7, #15]
 800cace:	e001      	b.n	800cad4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cad0:	2302      	movs	r3, #2
 800cad2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cae2:	b480      	push	{r7}
 800cae4:	b085      	sub	sp, #20
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	460b      	mov	r3, r1
 800caec:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800caf8:	78fa      	ldrb	r2, [r7, #3]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d204      	bcs.n	800cb08 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	78fa      	ldrb	r2, [r7, #3]
 800cb02:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800cb06:	e001      	b.n	800cb0c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cb08:	2302      	movs	r3, #2
 800cb0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cb1a:	b480      	push	{r7}
 800cb1c:	b087      	sub	sp, #28
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	4608      	mov	r0, r1
 800cb24:	4611      	mov	r1, r2
 800cb26:	461a      	mov	r2, r3
 800cb28:	4603      	mov	r3, r0
 800cb2a:	70fb      	strb	r3, [r7, #3]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	70bb      	strb	r3, [r7, #2]
 800cb30:	4613      	mov	r3, r2
 800cb32:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cb34:	2300      	movs	r3, #0
 800cb36:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cb42:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cb44:	e025      	b.n	800cb92 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cb46:	7dfb      	ldrb	r3, [r7, #23]
 800cb48:	221a      	movs	r2, #26
 800cb4a:	fb02 f303 	mul.w	r3, r2, r3
 800cb4e:	3308      	adds	r3, #8
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	4413      	add	r3, r2
 800cb54:	3302      	adds	r3, #2
 800cb56:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	795b      	ldrb	r3, [r3, #5]
 800cb5c:	78fa      	ldrb	r2, [r7, #3]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d002      	beq.n	800cb68 <USBH_FindInterface+0x4e>
 800cb62:	78fb      	ldrb	r3, [r7, #3]
 800cb64:	2bff      	cmp	r3, #255	@ 0xff
 800cb66:	d111      	bne.n	800cb8c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cb6c:	78ba      	ldrb	r2, [r7, #2]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d002      	beq.n	800cb78 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cb72:	78bb      	ldrb	r3, [r7, #2]
 800cb74:	2bff      	cmp	r3, #255	@ 0xff
 800cb76:	d109      	bne.n	800cb8c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cb7c:	787a      	ldrb	r2, [r7, #1]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d002      	beq.n	800cb88 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cb82:	787b      	ldrb	r3, [r7, #1]
 800cb84:	2bff      	cmp	r3, #255	@ 0xff
 800cb86:	d101      	bne.n	800cb8c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cb88:	7dfb      	ldrb	r3, [r7, #23]
 800cb8a:	e006      	b.n	800cb9a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cb8c:	7dfb      	ldrb	r3, [r7, #23]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d9d6      	bls.n	800cb46 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cb98:	23ff      	movs	r3, #255	@ 0xff
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	371c      	adds	r7, #28
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 fce6 	bl	800e580 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f001 fdff 	bl	800e7ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
	...

0800cbc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b088      	sub	sp, #32
 800cbcc:	af04      	add	r7, sp, #16
 800cbce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d102      	bne.n	800cbea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2203      	movs	r2, #3
 800cbe8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b0b      	cmp	r3, #11
 800cbf2:	f200 81bb 	bhi.w	800cf6c <USBH_Process+0x3a4>
 800cbf6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbfc <USBH_Process+0x34>)
 800cbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfc:	0800cc2d 	.word	0x0800cc2d
 800cc00:	0800cc5f 	.word	0x0800cc5f
 800cc04:	0800ccc7 	.word	0x0800ccc7
 800cc08:	0800cf07 	.word	0x0800cf07
 800cc0c:	0800cf6d 	.word	0x0800cf6d
 800cc10:	0800cd67 	.word	0x0800cd67
 800cc14:	0800cead 	.word	0x0800cead
 800cc18:	0800cd9d 	.word	0x0800cd9d
 800cc1c:	0800cdbd 	.word	0x0800cdbd
 800cc20:	0800cddb 	.word	0x0800cddb
 800cc24:	0800ce1f 	.word	0x0800ce1f
 800cc28:	0800ceef 	.word	0x0800ceef
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f000 819b 	beq.w	800cf70 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cc40:	20c8      	movs	r0, #200	@ 0xc8
 800cc42:	f001 fe04 	bl	800e84e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f001 fcf7 	bl	800e63a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cc5c:	e188      	b.n	800cf70 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d107      	bne.n	800cc78 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2202      	movs	r2, #2
 800cc74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc76:	e18a      	b.n	800cf8e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cc7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc82:	d914      	bls.n	800ccae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d903      	bls.n	800cca6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	220d      	movs	r2, #13
 800cca2:	701a      	strb	r2, [r3, #0]
      break;
 800cca4:	e173      	b.n	800cf8e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	701a      	strb	r2, [r3, #0]
      break;
 800ccac:	e16f      	b.n	800cf8e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ccb4:	f103 020a 	add.w	r2, r3, #10
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ccbe:	200a      	movs	r0, #10
 800ccc0:	f001 fdc5 	bl	800e84e <USBH_Delay>
      break;
 800ccc4:	e163      	b.n	800cf8e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ccd6:	2104      	movs	r1, #4
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ccdc:	2064      	movs	r0, #100	@ 0x64
 800ccde:	f001 fdb6 	bl	800e84e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f001 fc82 	bl	800e5ec <USBH_LL_GetSpeed>
 800cce8:	4603      	mov	r3, r0
 800ccea:	461a      	mov	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2205      	movs	r2, #5
 800ccf6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f001 fa9b 	bl	800e236 <USBH_AllocPipe>
 800cd00:	4603      	mov	r3, r0
 800cd02:	461a      	mov	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cd08:	2180      	movs	r1, #128	@ 0x80
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f001 fa93 	bl	800e236 <USBH_AllocPipe>
 800cd10:	4603      	mov	r3, r0
 800cd12:	461a      	mov	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	7919      	ldrb	r1, [r3, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cd2c:	9202      	str	r2, [sp, #8]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	9201      	str	r2, [sp, #4]
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	4603      	mov	r3, r0
 800cd36:	2280      	movs	r2, #128	@ 0x80
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f001 fa4d 	bl	800e1d8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7959      	ldrb	r1, [r3, #5]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cd52:	9202      	str	r2, [sp, #8]
 800cd54:	2200      	movs	r2, #0
 800cd56:	9201      	str	r2, [sp, #4]
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f001 fa3a 	bl	800e1d8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd64:	e113      	b.n	800cf8e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f916 	bl	800cf98 <USBH_HandleEnum>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f040 80fd 	bne.w	800cf74 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d103      	bne.n	800cd94 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2208      	movs	r2, #8
 800cd90:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cd92:	e0ef      	b.n	800cf74 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2207      	movs	r2, #7
 800cd98:	701a      	strb	r2, [r3, #0]
      break;
 800cd9a:	e0eb      	b.n	800cf74 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 80e8 	beq.w	800cf78 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cdae:	2101      	movs	r1, #1
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2208      	movs	r2, #8
 800cdb8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cdba:	e0dd      	b.n	800cf78 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fc3a 	bl	800d63e <USBH_SetCfg>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f040 80d5 	bne.w	800cf7c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2209      	movs	r2, #9
 800cdd6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cdd8:	e0d0      	b.n	800cf7c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cde0:	f003 0320 	and.w	r3, r3, #32
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d016      	beq.n	800ce16 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cde8:	2101      	movs	r1, #1
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fc4a 	bl	800d684 <USBH_SetFeature>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d103      	bne.n	800ce04 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	220a      	movs	r2, #10
 800ce00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce02:	e0bd      	b.n	800cf80 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800ce04:	7bbb      	ldrb	r3, [r7, #14]
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	2b03      	cmp	r3, #3
 800ce0a:	f040 80b9 	bne.w	800cf80 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	220a      	movs	r2, #10
 800ce12:	701a      	strb	r2, [r3, #0]
      break;
 800ce14:	e0b4      	b.n	800cf80 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	220a      	movs	r2, #10
 800ce1a:	701a      	strb	r2, [r3, #0]
      break;
 800ce1c:	e0b0      	b.n	800cf80 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 80ad 	beq.w	800cf84 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ce32:	2300      	movs	r3, #0
 800ce34:	73fb      	strb	r3, [r7, #15]
 800ce36:	e016      	b.n	800ce66 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ce38:	7bfa      	ldrb	r2, [r7, #15]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	32de      	adds	r2, #222	@ 0xde
 800ce3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce42:	791a      	ldrb	r2, [r3, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d108      	bne.n	800ce60 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ce4e:	7bfa      	ldrb	r2, [r7, #15]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	32de      	adds	r2, #222	@ 0xde
 800ce54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800ce5e:	e005      	b.n	800ce6c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
 800ce62:	3301      	adds	r3, #1
 800ce64:	73fb      	strb	r3, [r7, #15]
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d0e5      	beq.n	800ce38 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d016      	beq.n	800cea4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	4798      	blx	r3
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d109      	bne.n	800ce9c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2206      	movs	r2, #6
 800ce8c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce94:	2103      	movs	r1, #3
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce9a:	e073      	b.n	800cf84 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	220d      	movs	r2, #13
 800cea0:	701a      	strb	r2, [r3, #0]
      break;
 800cea2:	e06f      	b.n	800cf84 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	220d      	movs	r2, #13
 800cea8:	701a      	strb	r2, [r3, #0]
      break;
 800ceaa:	e06b      	b.n	800cf84 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d017      	beq.n	800cee6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	4798      	blx	r3
 800cec2:	4603      	mov	r3, r0
 800cec4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d103      	bne.n	800ced6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	220b      	movs	r2, #11
 800ced2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ced4:	e058      	b.n	800cf88 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800ced6:	7bbb      	ldrb	r3, [r7, #14]
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d154      	bne.n	800cf88 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	220d      	movs	r2, #13
 800cee2:	701a      	strb	r2, [r3, #0]
      break;
 800cee4:	e050      	b.n	800cf88 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	220d      	movs	r2, #13
 800ceea:	701a      	strb	r2, [r3, #0]
      break;
 800ceec:	e04c      	b.n	800cf88 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d049      	beq.n	800cf8c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	4798      	blx	r3
      }
      break;
 800cf04:	e042      	b.n	800cf8c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff fd4a 	bl	800c9a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d009      	beq.n	800cf32 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d005      	beq.n	800cf48 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf42:	2105      	movs	r1, #5
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d107      	bne.n	800cf64 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7ff fe22 	bl	800cba6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf62:	e014      	b.n	800cf8e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f001 fb0b 	bl	800e580 <USBH_LL_Start>
      break;
 800cf6a:	e010      	b.n	800cf8e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800cf6c:	bf00      	nop
 800cf6e:	e00e      	b.n	800cf8e <USBH_Process+0x3c6>
      break;
 800cf70:	bf00      	nop
 800cf72:	e00c      	b.n	800cf8e <USBH_Process+0x3c6>
      break;
 800cf74:	bf00      	nop
 800cf76:	e00a      	b.n	800cf8e <USBH_Process+0x3c6>
    break;
 800cf78:	bf00      	nop
 800cf7a:	e008      	b.n	800cf8e <USBH_Process+0x3c6>
      break;
 800cf7c:	bf00      	nop
 800cf7e:	e006      	b.n	800cf8e <USBH_Process+0x3c6>
      break;
 800cf80:	bf00      	nop
 800cf82:	e004      	b.n	800cf8e <USBH_Process+0x3c6>
      break;
 800cf84:	bf00      	nop
 800cf86:	e002      	b.n	800cf8e <USBH_Process+0x3c6>
      break;
 800cf88:	bf00      	nop
 800cf8a:	e000      	b.n	800cf8e <USBH_Process+0x3c6>
      break;
 800cf8c:	bf00      	nop
  }
  return USBH_OK;
 800cf8e:	2300      	movs	r3, #0
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af04      	add	r7, sp, #16
 800cf9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	785b      	ldrb	r3, [r3, #1]
 800cfac:	2b07      	cmp	r3, #7
 800cfae:	f200 81bd 	bhi.w	800d32c <USBH_HandleEnum+0x394>
 800cfb2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfb8 <USBH_HandleEnum+0x20>)
 800cfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb8:	0800cfd9 	.word	0x0800cfd9
 800cfbc:	0800d093 	.word	0x0800d093
 800cfc0:	0800d0fd 	.word	0x0800d0fd
 800cfc4:	0800d187 	.word	0x0800d187
 800cfc8:	0800d1f1 	.word	0x0800d1f1
 800cfcc:	0800d261 	.word	0x0800d261
 800cfd0:	0800d2a7 	.word	0x0800d2a7
 800cfd4:	0800d2ed 	.word	0x0800d2ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cfd8:	2108      	movs	r1, #8
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 fa4c 	bl	800d478 <USBH_Get_DevDesc>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cfe4:	7bbb      	ldrb	r3, [r7, #14]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d12e      	bne.n	800d048 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	7919      	ldrb	r1, [r3, #4]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d00e:	9202      	str	r2, [sp, #8]
 800d010:	2200      	movs	r2, #0
 800d012:	9201      	str	r2, [sp, #4]
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	4603      	mov	r3, r0
 800d018:	2280      	movs	r2, #128	@ 0x80
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f001 f8dc 	bl	800e1d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	7959      	ldrb	r1, [r3, #5]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d034:	9202      	str	r2, [sp, #8]
 800d036:	2200      	movs	r2, #0
 800d038:	9201      	str	r2, [sp, #4]
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	4603      	mov	r3, r0
 800d03e:	2200      	movs	r2, #0
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f001 f8c9 	bl	800e1d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d046:	e173      	b.n	800d330 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d048:	7bbb      	ldrb	r3, [r7, #14]
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	f040 8170 	bne.w	800d330 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d056:	3301      	adds	r3, #1
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d066:	2b03      	cmp	r3, #3
 800d068:	d903      	bls.n	800d072 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	220d      	movs	r2, #13
 800d06e:	701a      	strb	r2, [r3, #0]
      break;
 800d070:	e15e      	b.n	800d330 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	795b      	ldrb	r3, [r3, #5]
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f001 f8fd 	bl	800e278 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	791b      	ldrb	r3, [r3, #4]
 800d082:	4619      	mov	r1, r3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f001 f8f7 	bl	800e278 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	701a      	strb	r2, [r3, #0]
      break;
 800d090:	e14e      	b.n	800d330 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d092:	2112      	movs	r1, #18
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f9ef 	bl	800d478 <USBH_Get_DevDesc>
 800d09a:	4603      	mov	r3, r0
 800d09c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d09e:	7bbb      	ldrb	r3, [r7, #14]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d0aa:	e143      	b.n	800d334 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	f040 8140 	bne.w	800d334 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d0ca:	2b03      	cmp	r3, #3
 800d0cc:	d903      	bls.n	800d0d6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	220d      	movs	r2, #13
 800d0d2:	701a      	strb	r2, [r3, #0]
      break;
 800d0d4:	e12e      	b.n	800d334 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	795b      	ldrb	r3, [r3, #5]
 800d0da:	4619      	mov	r1, r3
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f001 f8cb 	bl	800e278 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	791b      	ldrb	r3, [r3, #4]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f001 f8c5 	bl	800e278 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	701a      	strb	r2, [r3, #0]
      break;
 800d0fa:	e11b      	b.n	800d334 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fa79 	bl	800d5f6 <USBH_SetAddress>
 800d104:	4603      	mov	r3, r0
 800d106:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d108:	7bbb      	ldrb	r3, [r7, #14]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d130      	bne.n	800d170 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800d10e:	2002      	movs	r0, #2
 800d110:	f001 fb9d 	bl	800e84e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2203      	movs	r2, #3
 800d120:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	7919      	ldrb	r1, [r3, #4]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d136:	9202      	str	r2, [sp, #8]
 800d138:	2200      	movs	r2, #0
 800d13a:	9201      	str	r2, [sp, #4]
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	4603      	mov	r3, r0
 800d140:	2280      	movs	r2, #128	@ 0x80
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f001 f848 	bl	800e1d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7959      	ldrb	r1, [r3, #5]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d15c:	9202      	str	r2, [sp, #8]
 800d15e:	2200      	movs	r2, #0
 800d160:	9201      	str	r2, [sp, #4]
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	4603      	mov	r3, r0
 800d166:	2200      	movs	r2, #0
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f001 f835 	bl	800e1d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d16e:	e0e3      	b.n	800d338 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d170:	7bbb      	ldrb	r3, [r7, #14]
 800d172:	2b03      	cmp	r3, #3
 800d174:	f040 80e0 	bne.w	800d338 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	220d      	movs	r2, #13
 800d17c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	705a      	strb	r2, [r3, #1]
      break;
 800d184:	e0d8      	b.n	800d338 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d186:	2109      	movs	r1, #9
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f9a1 	bl	800d4d0 <USBH_Get_CfgDesc>
 800d18e:	4603      	mov	r3, r0
 800d190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d192:	7bbb      	ldrb	r3, [r7, #14]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d103      	bne.n	800d1a0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2204      	movs	r2, #4
 800d19c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d19e:	e0cd      	b.n	800d33c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	f040 80ca 	bne.w	800d33c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d1be:	2b03      	cmp	r3, #3
 800d1c0:	d903      	bls.n	800d1ca <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	220d      	movs	r2, #13
 800d1c6:	701a      	strb	r2, [r3, #0]
      break;
 800d1c8:	e0b8      	b.n	800d33c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	795b      	ldrb	r3, [r3, #5]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f001 f851 	bl	800e278 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	791b      	ldrb	r3, [r3, #4]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f001 f84b 	bl	800e278 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	701a      	strb	r2, [r3, #0]
      break;
 800d1ee:	e0a5      	b.n	800d33c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f969 	bl	800d4d0 <USBH_Get_CfgDesc>
 800d1fe:	4603      	mov	r3, r0
 800d200:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d202:	7bbb      	ldrb	r3, [r7, #14]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d103      	bne.n	800d210 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2205      	movs	r2, #5
 800d20c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d20e:	e097      	b.n	800d340 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d210:	7bbb      	ldrb	r3, [r7, #14]
 800d212:	2b03      	cmp	r3, #3
 800d214:	f040 8094 	bne.w	800d340 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d21e:	3301      	adds	r3, #1
 800d220:	b2da      	uxtb	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d903      	bls.n	800d23a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	220d      	movs	r2, #13
 800d236:	701a      	strb	r2, [r3, #0]
      break;
 800d238:	e082      	b.n	800d340 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	795b      	ldrb	r3, [r3, #5]
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f001 f819 	bl	800e278 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	791b      	ldrb	r3, [r3, #4]
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f001 f813 	bl	800e278 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	701a      	strb	r2, [r3, #0]
      break;
 800d25e:	e06f      	b.n	800d340 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d266:	2b00      	cmp	r3, #0
 800d268:	d019      	beq.n	800d29e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d276:	23ff      	movs	r3, #255	@ 0xff
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f953 	bl	800d524 <USBH_Get_StringDesc>
 800d27e:	4603      	mov	r3, r0
 800d280:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d103      	bne.n	800d290 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2206      	movs	r2, #6
 800d28c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d28e:	e059      	b.n	800d344 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d290:	7bbb      	ldrb	r3, [r7, #14]
 800d292:	2b03      	cmp	r3, #3
 800d294:	d156      	bne.n	800d344 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2206      	movs	r2, #6
 800d29a:	705a      	strb	r2, [r3, #1]
      break;
 800d29c:	e052      	b.n	800d344 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2206      	movs	r2, #6
 800d2a2:	705a      	strb	r2, [r3, #1]
      break;
 800d2a4:	e04e      	b.n	800d344 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d019      	beq.n	800d2e4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d2bc:	23ff      	movs	r3, #255	@ 0xff
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f930 	bl	800d524 <USBH_Get_StringDesc>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d2c8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d103      	bne.n	800d2d6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2207      	movs	r2, #7
 800d2d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d2d4:	e038      	b.n	800d348 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2d6:	7bbb      	ldrb	r3, [r7, #14]
 800d2d8:	2b03      	cmp	r3, #3
 800d2da:	d135      	bne.n	800d348 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2207      	movs	r2, #7
 800d2e0:	705a      	strb	r2, [r3, #1]
      break;
 800d2e2:	e031      	b.n	800d348 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2207      	movs	r2, #7
 800d2e8:	705a      	strb	r2, [r3, #1]
      break;
 800d2ea:	e02d      	b.n	800d348 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d017      	beq.n	800d326 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d302:	23ff      	movs	r3, #255	@ 0xff
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 f90d 	bl	800d524 <USBH_Get_StringDesc>
 800d30a:	4603      	mov	r3, r0
 800d30c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d30e:	7bbb      	ldrb	r3, [r7, #14]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d102      	bne.n	800d31a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d318:	e018      	b.n	800d34c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d31a:	7bbb      	ldrb	r3, [r7, #14]
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d115      	bne.n	800d34c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
      break;
 800d324:	e012      	b.n	800d34c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	73fb      	strb	r3, [r7, #15]
      break;
 800d32a:	e00f      	b.n	800d34c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800d32c:	bf00      	nop
 800d32e:	e00e      	b.n	800d34e <USBH_HandleEnum+0x3b6>
      break;
 800d330:	bf00      	nop
 800d332:	e00c      	b.n	800d34e <USBH_HandleEnum+0x3b6>
      break;
 800d334:	bf00      	nop
 800d336:	e00a      	b.n	800d34e <USBH_HandleEnum+0x3b6>
      break;
 800d338:	bf00      	nop
 800d33a:	e008      	b.n	800d34e <USBH_HandleEnum+0x3b6>
      break;
 800d33c:	bf00      	nop
 800d33e:	e006      	b.n	800d34e <USBH_HandleEnum+0x3b6>
      break;
 800d340:	bf00      	nop
 800d342:	e004      	b.n	800d34e <USBH_HandleEnum+0x3b6>
      break;
 800d344:	bf00      	nop
 800d346:	e002      	b.n	800d34e <USBH_HandleEnum+0x3b6>
      break;
 800d348:	bf00      	nop
 800d34a:	e000      	b.n	800d34e <USBH_HandleEnum+0x3b6>
      break;
 800d34c:	bf00      	nop
  }
  return Status;
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	683a      	ldr	r2, [r7, #0]
 800d366:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b082      	sub	sp, #8
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f804 	bl	800d39a <USBH_HandleSof>
}
 800d392:	bf00      	nop
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b082      	sub	sp, #8
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b0b      	cmp	r3, #11
 800d3aa:	d10a      	bne.n	800d3c2 <USBH_HandleSof+0x28>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d005      	beq.n	800d3c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	4798      	blx	r3
  }
}
 800d3c2:	bf00      	nop
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d3ca:	b480      	push	{r7}
 800d3cc:	b083      	sub	sp, #12
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d3da:	bf00      	nop
}
 800d3dc:	370c      	adds	r7, #12
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d3e6:	b480      	push	{r7}
 800d3e8:	b083      	sub	sp, #12
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d3f6:	bf00      	nop
}
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2201      	movs	r2, #1
 800d43c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 f8b0 	bl	800e5b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	791b      	ldrb	r3, [r3, #4]
 800d45a:	4619      	mov	r1, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 ff0b 	bl	800e278 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	795b      	ldrb	r3, [r3, #5]
 800d466:	4619      	mov	r1, r3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 ff05 	bl	800e278 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af02      	add	r7, sp, #8
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	460b      	mov	r3, r1
 800d482:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d484:	887b      	ldrh	r3, [r7, #2]
 800d486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d48a:	d901      	bls.n	800d490 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d48c:	2303      	movs	r3, #3
 800d48e:	e01b      	b.n	800d4c8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d496:	887b      	ldrh	r3, [r7, #2]
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	4613      	mov	r3, r2
 800d49c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f872 	bl	800d58c <USBH_GetDescriptor>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d109      	bne.n	800d4c6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d4b8:	887a      	ldrh	r2, [r7, #2]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f929 	bl	800d714 <USBH_ParseDevDesc>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b086      	sub	sp, #24
 800d4d4:	af02      	add	r7, sp, #8
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	460b      	mov	r3, r1
 800d4da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	331c      	adds	r3, #28
 800d4e0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d4e2:	887b      	ldrh	r3, [r7, #2]
 800d4e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4e8:	d901      	bls.n	800d4ee <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	e016      	b.n	800d51c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d4ee:	887b      	ldrh	r3, [r7, #2]
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f846 	bl	800d58c <USBH_GetDescriptor>
 800d500:	4603      	mov	r3, r0
 800d502:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d504:	7bfb      	ldrb	r3, [r7, #15]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d107      	bne.n	800d51a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d50a:	887b      	ldrh	r3, [r7, #2]
 800d50c:	461a      	mov	r2, r3
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f9af 	bl	800d874 <USBH_ParseCfgDesc>
 800d516:	4603      	mov	r3, r0
 800d518:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b088      	sub	sp, #32
 800d528:	af02      	add	r7, sp, #8
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	607a      	str	r2, [r7, #4]
 800d52e:	461a      	mov	r2, r3
 800d530:	460b      	mov	r3, r1
 800d532:	72fb      	strb	r3, [r7, #11]
 800d534:	4613      	mov	r3, r2
 800d536:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d538:	893b      	ldrh	r3, [r7, #8]
 800d53a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d53e:	d802      	bhi.n	800d546 <USBH_Get_StringDesc+0x22>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d546:	2303      	movs	r3, #3
 800d548:	e01c      	b.n	800d584 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d54a:	7afb      	ldrb	r3, [r7, #11]
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d552:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d55a:	893b      	ldrh	r3, [r7, #8]
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	460b      	mov	r3, r1
 800d560:	2100      	movs	r1, #0
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f000 f812 	bl	800d58c <USBH_GetDescriptor>
 800d568:	4603      	mov	r3, r0
 800d56a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d56c:	7dfb      	ldrb	r3, [r7, #23]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d107      	bne.n	800d582 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d578:	893a      	ldrh	r2, [r7, #8]
 800d57a:	6879      	ldr	r1, [r7, #4]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f000 fb8d 	bl	800dc9c <USBH_ParseStringDesc>
  }

  return status;
 800d582:	7dfb      	ldrb	r3, [r7, #23]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	607b      	str	r3, [r7, #4]
 800d596:	460b      	mov	r3, r1
 800d598:	72fb      	strb	r3, [r7, #11]
 800d59a:	4613      	mov	r3, r2
 800d59c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	789b      	ldrb	r3, [r3, #2]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d11c      	bne.n	800d5e0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d5a6:	7afb      	ldrb	r3, [r7, #11]
 800d5a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2206      	movs	r2, #6
 800d5b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	893a      	ldrh	r2, [r7, #8]
 800d5bc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d5be:	893b      	ldrh	r3, [r7, #8]
 800d5c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d5c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d5c8:	d104      	bne.n	800d5d4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f240 4209 	movw	r2, #1033	@ 0x409
 800d5d0:	829a      	strh	r2, [r3, #20]
 800d5d2:	e002      	b.n	800d5da <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	8b3a      	ldrh	r2, [r7, #24]
 800d5de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d5e0:	8b3b      	ldrh	r3, [r7, #24]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	6879      	ldr	r1, [r7, #4]
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 fba5 	bl	800dd36 <USBH_CtlReq>
 800d5ec:	4603      	mov	r3, r0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	460b      	mov	r3, r1
 800d600:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	789b      	ldrb	r3, [r3, #2]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d10f      	bne.n	800d62a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2205      	movs	r2, #5
 800d614:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d616:	78fb      	ldrb	r3, [r7, #3]
 800d618:	b29a      	uxth	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d62a:	2200      	movs	r2, #0
 800d62c:	2100      	movs	r1, #0
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fb81 	bl	800dd36 <USBH_CtlReq>
 800d634:	4603      	mov	r3, r0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b082      	sub	sp, #8
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
 800d646:	460b      	mov	r3, r1
 800d648:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	789b      	ldrb	r3, [r3, #2]
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d10e      	bne.n	800d670 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2209      	movs	r2, #9
 800d65c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	887a      	ldrh	r2, [r7, #2]
 800d662:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d670:	2200      	movs	r2, #0
 800d672:	2100      	movs	r1, #0
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fb5e 	bl	800dd36 <USBH_CtlReq>
 800d67a:	4603      	mov	r3, r0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	460b      	mov	r3, r1
 800d68e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	789b      	ldrb	r3, [r3, #2]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d10f      	bne.n	800d6b8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2203      	movs	r2, #3
 800d6a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d6a4:	78fb      	ldrb	r3, [r7, #3]
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fb3a 	bl	800dd36 <USBH_CtlReq>
 800d6c2:	4603      	mov	r3, r0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	789b      	ldrb	r3, [r3, #2]
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d10f      	bne.n	800d700 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d6f2:	78fb      	ldrb	r3, [r7, #3]
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d700:	2200      	movs	r2, #0
 800d702:	2100      	movs	r1, #0
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fb16 	bl	800dd36 <USBH_CtlReq>
 800d70a:	4603      	mov	r3, r0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	4613      	mov	r3, r2
 800d720:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d728:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d101      	bne.n	800d738 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d734:	2302      	movs	r3, #2
 800d736:	e094      	b.n	800d862 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	781a      	ldrb	r2, [r3, #0]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	785a      	ldrb	r2, [r3, #1]
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	3302      	adds	r3, #2
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	461a      	mov	r2, r3
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	3303      	adds	r3, #3
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	021b      	lsls	r3, r3, #8
 800d758:	b29b      	uxth	r3, r3
 800d75a:	4313      	orrs	r3, r2
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	791a      	ldrb	r2, [r3, #4]
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	795a      	ldrb	r2, [r3, #5]
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	799a      	ldrb	r2, [r3, #6]
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	79da      	ldrb	r2, [r3, #7]
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d004      	beq.n	800d796 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d792:	2b01      	cmp	r3, #1
 800d794:	d11b      	bne.n	800d7ce <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	79db      	ldrb	r3, [r3, #7]
 800d79a:	2b20      	cmp	r3, #32
 800d79c:	dc0f      	bgt.n	800d7be <USBH_ParseDevDesc+0xaa>
 800d79e:	2b08      	cmp	r3, #8
 800d7a0:	db0f      	blt.n	800d7c2 <USBH_ParseDevDesc+0xae>
 800d7a2:	3b08      	subs	r3, #8
 800d7a4:	4a32      	ldr	r2, [pc, #200]	@ (800d870 <USBH_ParseDevDesc+0x15c>)
 800d7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7aa:	f003 0301 	and.w	r3, r3, #1
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	bf14      	ite	ne
 800d7b2:	2301      	movne	r3, #1
 800d7b4:	2300      	moveq	r3, #0
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <USBH_ParseDevDesc+0xb6>
 800d7bc:	e001      	b.n	800d7c2 <USBH_ParseDevDesc+0xae>
 800d7be:	2b40      	cmp	r3, #64	@ 0x40
 800d7c0:	d003      	beq.n	800d7ca <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	2208      	movs	r2, #8
 800d7c6:	71da      	strb	r2, [r3, #7]
        break;
 800d7c8:	e000      	b.n	800d7cc <USBH_ParseDevDesc+0xb8>
        break;
 800d7ca:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d7cc:	e00e      	b.n	800d7ec <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d107      	bne.n	800d7e8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	79db      	ldrb	r3, [r3, #7]
 800d7dc:	2b08      	cmp	r3, #8
 800d7de:	d005      	beq.n	800d7ec <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	2208      	movs	r2, #8
 800d7e4:	71da      	strb	r2, [r3, #7]
 800d7e6:	e001      	b.n	800d7ec <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d7ec:	88fb      	ldrh	r3, [r7, #6]
 800d7ee:	2b08      	cmp	r3, #8
 800d7f0:	d936      	bls.n	800d860 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	3309      	adds	r3, #9
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	021b      	lsls	r3, r3, #8
 800d802:	b29b      	uxth	r3, r3
 800d804:	4313      	orrs	r3, r2
 800d806:	b29a      	uxth	r2, r3
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	330a      	adds	r3, #10
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	461a      	mov	r2, r3
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	330b      	adds	r3, #11
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	021b      	lsls	r3, r3, #8
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	4313      	orrs	r3, r2
 800d820:	b29a      	uxth	r2, r3
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	330c      	adds	r3, #12
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	461a      	mov	r2, r3
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	330d      	adds	r3, #13
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	021b      	lsls	r3, r3, #8
 800d836:	b29b      	uxth	r3, r3
 800d838:	4313      	orrs	r3, r2
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	7b9a      	ldrb	r2, [r3, #14]
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	7bda      	ldrb	r2, [r3, #15]
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	7c1a      	ldrb	r2, [r3, #16]
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	7c5a      	ldrb	r2, [r3, #17]
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d860:	7dfb      	ldrb	r3, [r7, #23]
}
 800d862:	4618      	mov	r0, r3
 800d864:	371c      	adds	r7, #28
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	01000101 	.word	0x01000101

0800d874 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b08c      	sub	sp, #48	@ 0x30
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	4613      	mov	r3, r2
 800d880:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d888:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d890:	2300      	movs	r3, #0
 800d892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d896:	2300      	movs	r3, #0
 800d898:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d101      	bne.n	800d8a6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	e0da      	b.n	800da5c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	2b09      	cmp	r3, #9
 800d8b0:	d002      	beq.n	800d8b8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b4:	2209      	movs	r2, #9
 800d8b6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	781a      	ldrb	r2, [r3, #0]
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	785a      	ldrb	r2, [r3, #1]
 800d8c4:	6a3b      	ldr	r3, [r7, #32]
 800d8c6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	3302      	adds	r3, #2
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	3303      	adds	r3, #3
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	021b      	lsls	r3, r3, #8
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8e2:	bf28      	it	cs
 800d8e4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	6a3b      	ldr	r3, [r7, #32]
 800d8ec:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	791a      	ldrb	r2, [r3, #4]
 800d8f2:	6a3b      	ldr	r3, [r7, #32]
 800d8f4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	795a      	ldrb	r2, [r3, #5]
 800d8fa:	6a3b      	ldr	r3, [r7, #32]
 800d8fc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	799a      	ldrb	r2, [r3, #6]
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	79da      	ldrb	r2, [r3, #7]
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	7a1a      	ldrb	r2, [r3, #8]
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d916:	88fb      	ldrh	r3, [r7, #6]
 800d918:	2b09      	cmp	r3, #9
 800d91a:	f240 809d 	bls.w	800da58 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d91e:	2309      	movs	r3, #9
 800d920:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d926:	e081      	b.n	800da2c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d928:	f107 0316 	add.w	r3, r7, #22
 800d92c:	4619      	mov	r1, r3
 800d92e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d930:	f000 f9e7 	bl	800dd02 <USBH_GetNextDesc>
 800d934:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d938:	785b      	ldrb	r3, [r3, #1]
 800d93a:	2b04      	cmp	r3, #4
 800d93c:	d176      	bne.n	800da2c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	2b09      	cmp	r3, #9
 800d944:	d002      	beq.n	800d94c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d948:	2209      	movs	r2, #9
 800d94a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d94c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d950:	221a      	movs	r2, #26
 800d952:	fb02 f303 	mul.w	r3, r2, r3
 800d956:	3308      	adds	r3, #8
 800d958:	6a3a      	ldr	r2, [r7, #32]
 800d95a:	4413      	add	r3, r2
 800d95c:	3302      	adds	r3, #2
 800d95e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d962:	69f8      	ldr	r0, [r7, #28]
 800d964:	f000 f87e 	bl	800da64 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d968:	2300      	movs	r3, #0
 800d96a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d972:	e043      	b.n	800d9fc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d974:	f107 0316 	add.w	r3, r7, #22
 800d978:	4619      	mov	r1, r3
 800d97a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d97c:	f000 f9c1 	bl	800dd02 <USBH_GetNextDesc>
 800d980:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d984:	785b      	ldrb	r3, [r3, #1]
 800d986:	2b05      	cmp	r3, #5
 800d988:	d138      	bne.n	800d9fc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	795b      	ldrb	r3, [r3, #5]
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d113      	bne.n	800d9ba <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d996:	2b02      	cmp	r3, #2
 800d998:	d003      	beq.n	800d9a2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	799b      	ldrb	r3, [r3, #6]
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d10b      	bne.n	800d9ba <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	79db      	ldrb	r3, [r3, #7]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10b      	bne.n	800d9c2 <USBH_ParseCfgDesc+0x14e>
 800d9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b09      	cmp	r3, #9
 800d9b0:	d007      	beq.n	800d9c2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b4:	2209      	movs	r2, #9
 800d9b6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d9b8:	e003      	b.n	800d9c2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9bc:	2207      	movs	r2, #7
 800d9be:	701a      	strb	r2, [r3, #0]
 800d9c0:	e000      	b.n	800d9c4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d9c2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d9cc:	3201      	adds	r2, #1
 800d9ce:	00d2      	lsls	r2, r2, #3
 800d9d0:	211a      	movs	r1, #26
 800d9d2:	fb01 f303 	mul.w	r3, r1, r3
 800d9d6:	4413      	add	r3, r2
 800d9d8:	3308      	adds	r3, #8
 800d9da:	6a3a      	ldr	r2, [r7, #32]
 800d9dc:	4413      	add	r3, r2
 800d9de:	3304      	adds	r3, #4
 800d9e0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d9e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9e4:	69b9      	ldr	r1, [r7, #24]
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 f870 	bl	800dacc <USBH_ParseEPDesc>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d9f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	791b      	ldrb	r3, [r3, #4]
 800da00:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800da04:	429a      	cmp	r2, r3
 800da06:	d204      	bcs.n	800da12 <USBH_ParseCfgDesc+0x19e>
 800da08:	6a3b      	ldr	r3, [r7, #32]
 800da0a:	885a      	ldrh	r2, [r3, #2]
 800da0c:	8afb      	ldrh	r3, [r7, #22]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d8b0      	bhi.n	800d974 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	791b      	ldrb	r3, [r3, #4]
 800da16:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d201      	bcs.n	800da22 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800da1e:	2303      	movs	r3, #3
 800da20:	e01c      	b.n	800da5c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800da22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da26:	3301      	adds	r3, #1
 800da28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800da2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da30:	2b01      	cmp	r3, #1
 800da32:	d805      	bhi.n	800da40 <USBH_ParseCfgDesc+0x1cc>
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	885a      	ldrh	r2, [r3, #2]
 800da38:	8afb      	ldrh	r3, [r7, #22]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	f63f af74 	bhi.w	800d928 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800da40:	6a3b      	ldr	r3, [r7, #32]
 800da42:	791b      	ldrb	r3, [r3, #4]
 800da44:	2b02      	cmp	r3, #2
 800da46:	bf28      	it	cs
 800da48:	2302      	movcs	r3, #2
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800da50:	429a      	cmp	r2, r3
 800da52:	d201      	bcs.n	800da58 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800da54:	2303      	movs	r3, #3
 800da56:	e001      	b.n	800da5c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800da58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3730      	adds	r7, #48	@ 0x30
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	781a      	ldrb	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	785a      	ldrb	r2, [r3, #1]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	789a      	ldrb	r2, [r3, #2]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	78da      	ldrb	r2, [r3, #3]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	3304      	adds	r3, #4
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b02      	cmp	r3, #2
 800da96:	bf28      	it	cs
 800da98:	2302      	movcs	r3, #2
 800da9a:	b2da      	uxtb	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	795a      	ldrb	r2, [r3, #5]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	799a      	ldrb	r2, [r3, #6]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	79da      	ldrb	r2, [r3, #7]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	7a1a      	ldrb	r2, [r3, #8]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	721a      	strb	r2, [r3, #8]
}
 800dac0:	bf00      	nop
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800dacc:	b480      	push	{r7}
 800dace:	b087      	sub	sp, #28
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800dad8:	2300      	movs	r3, #0
 800dada:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	781a      	ldrb	r2, [r3, #0]
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	785a      	ldrb	r2, [r3, #1]
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	789a      	ldrb	r2, [r3, #2]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	78da      	ldrb	r2, [r3, #3]
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3304      	adds	r3, #4
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	461a      	mov	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	3305      	adds	r3, #5
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	021b      	lsls	r3, r3, #8
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	4313      	orrs	r3, r2
 800db10:	b29a      	uxth	r2, r3
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	799a      	ldrb	r2, [r3, #6]
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	889b      	ldrh	r3, [r3, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d009      	beq.n	800db3a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800db2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db2e:	d804      	bhi.n	800db3a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800db34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db38:	d901      	bls.n	800db3e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800db3a:	2303      	movs	r3, #3
 800db3c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800db44:	2b00      	cmp	r3, #0
 800db46:	d136      	bne.n	800dbb6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	78db      	ldrb	r3, [r3, #3]
 800db4c:	f003 0303 	and.w	r3, r3, #3
 800db50:	2b02      	cmp	r3, #2
 800db52:	d108      	bne.n	800db66 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	889b      	ldrh	r3, [r3, #4]
 800db58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db5c:	f240 8097 	bls.w	800dc8e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db60:	2303      	movs	r3, #3
 800db62:	75fb      	strb	r3, [r7, #23]
 800db64:	e093      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	78db      	ldrb	r3, [r3, #3]
 800db6a:	f003 0303 	and.w	r3, r3, #3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d107      	bne.n	800db82 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	889b      	ldrh	r3, [r3, #4]
 800db76:	2b40      	cmp	r3, #64	@ 0x40
 800db78:	f240 8089 	bls.w	800dc8e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db7c:	2303      	movs	r3, #3
 800db7e:	75fb      	strb	r3, [r7, #23]
 800db80:	e085      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	78db      	ldrb	r3, [r3, #3]
 800db86:	f003 0303 	and.w	r3, r3, #3
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d005      	beq.n	800db9a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	78db      	ldrb	r3, [r3, #3]
 800db92:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800db96:	2b03      	cmp	r3, #3
 800db98:	d10a      	bne.n	800dbb0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	799b      	ldrb	r3, [r3, #6]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d003      	beq.n	800dbaa <USBH_ParseEPDesc+0xde>
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	799b      	ldrb	r3, [r3, #6]
 800dba6:	2b10      	cmp	r3, #16
 800dba8:	d970      	bls.n	800dc8c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dbae:	e06d      	b.n	800dc8c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dbb0:	2303      	movs	r3, #3
 800dbb2:	75fb      	strb	r3, [r7, #23]
 800dbb4:	e06b      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d13c      	bne.n	800dc3a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	78db      	ldrb	r3, [r3, #3]
 800dbc4:	f003 0303 	and.w	r3, r3, #3
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d005      	beq.n	800dbd8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	78db      	ldrb	r3, [r3, #3]
 800dbd0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d106      	bne.n	800dbe6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	889b      	ldrh	r3, [r3, #4]
 800dbdc:	2b40      	cmp	r3, #64	@ 0x40
 800dbde:	d956      	bls.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dbe4:	e053      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	78db      	ldrb	r3, [r3, #3]
 800dbea:	f003 0303 	and.w	r3, r3, #3
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d10e      	bne.n	800dc10 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	799b      	ldrb	r3, [r3, #6]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d007      	beq.n	800dc0a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800dbfe:	2b10      	cmp	r3, #16
 800dc00:	d803      	bhi.n	800dc0a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800dc06:	2b40      	cmp	r3, #64	@ 0x40
 800dc08:	d941      	bls.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dc0a:	2303      	movs	r3, #3
 800dc0c:	75fb      	strb	r3, [r7, #23]
 800dc0e:	e03e      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	78db      	ldrb	r3, [r3, #3]
 800dc14:	f003 0303 	and.w	r3, r3, #3
 800dc18:	2b03      	cmp	r3, #3
 800dc1a:	d10b      	bne.n	800dc34 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	799b      	ldrb	r3, [r3, #6]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d004      	beq.n	800dc2e <USBH_ParseEPDesc+0x162>
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	889b      	ldrh	r3, [r3, #4]
 800dc28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc2c:	d32f      	bcc.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	75fb      	strb	r3, [r7, #23]
 800dc32:	e02c      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dc34:	2303      	movs	r3, #3
 800dc36:	75fb      	strb	r3, [r7, #23]
 800dc38:	e029      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d120      	bne.n	800dc86 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	78db      	ldrb	r3, [r3, #3]
 800dc48:	f003 0303 	and.w	r3, r3, #3
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d106      	bne.n	800dc5e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	889b      	ldrh	r3, [r3, #4]
 800dc54:	2b08      	cmp	r3, #8
 800dc56:	d01a      	beq.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dc58:	2303      	movs	r3, #3
 800dc5a:	75fb      	strb	r3, [r7, #23]
 800dc5c:	e017      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	78db      	ldrb	r3, [r3, #3]
 800dc62:	f003 0303 	and.w	r3, r3, #3
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	d10a      	bne.n	800dc80 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	799b      	ldrb	r3, [r3, #6]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d003      	beq.n	800dc7a <USBH_ParseEPDesc+0x1ae>
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	889b      	ldrh	r3, [r3, #4]
 800dc76:	2b08      	cmp	r3, #8
 800dc78:	d909      	bls.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	75fb      	strb	r3, [r7, #23]
 800dc7e:	e006      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dc80:	2303      	movs	r3, #3
 800dc82:	75fb      	strb	r3, [r7, #23]
 800dc84:	e003      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dc86:	2303      	movs	r3, #3
 800dc88:	75fb      	strb	r3, [r7, #23]
 800dc8a:	e000      	b.n	800dc8e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dc8c:	bf00      	nop
  }

  return status;
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	371c      	adds	r7, #28
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b087      	sub	sp, #28
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	4613      	mov	r3, r2
 800dca8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	3301      	adds	r3, #1
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d120      	bne.n	800dcf6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	1e9a      	subs	r2, r3, #2
 800dcba:	88fb      	ldrh	r3, [r7, #6]
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	bf28      	it	cs
 800dcc0:	4613      	movcs	r3, r2
 800dcc2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	3302      	adds	r3, #2
 800dcc8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dcca:	2300      	movs	r3, #0
 800dccc:	82fb      	strh	r3, [r7, #22]
 800dcce:	e00b      	b.n	800dce8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dcd0:	8afb      	ldrh	r3, [r7, #22]
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	781a      	ldrb	r2, [r3, #0]
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	3301      	adds	r3, #1
 800dce0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dce2:	8afb      	ldrh	r3, [r7, #22]
 800dce4:	3302      	adds	r3, #2
 800dce6:	82fb      	strh	r3, [r7, #22]
 800dce8:	8afa      	ldrh	r2, [r7, #22]
 800dcea:	8abb      	ldrh	r3, [r7, #20]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d3ef      	bcc.n	800dcd0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	701a      	strb	r2, [r3, #0]
  }
}
 800dcf6:	bf00      	nop
 800dcf8:	371c      	adds	r7, #28
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dd02:	b480      	push	{r7}
 800dd04:	b085      	sub	sp, #20
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	881b      	ldrh	r3, [r3, #0]
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	7812      	ldrb	r2, [r2, #0]
 800dd14:	4413      	add	r3, r2
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4413      	add	r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dd28:	68fb      	ldr	r3, [r7, #12]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3714      	adds	r7, #20
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr

0800dd36 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b086      	sub	sp, #24
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	60f8      	str	r0, [r7, #12]
 800dd3e:	60b9      	str	r1, [r7, #8]
 800dd40:	4613      	mov	r3, r2
 800dd42:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dd44:	2301      	movs	r3, #1
 800dd46:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	789b      	ldrb	r3, [r3, #2]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d002      	beq.n	800dd56 <USBH_CtlReq+0x20>
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d00f      	beq.n	800dd74 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800dd54:	e027      	b.n	800dda6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	88fa      	ldrh	r2, [r7, #6]
 800dd60:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	75fb      	strb	r3, [r7, #23]
      break;
 800dd72:	e018      	b.n	800dda6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f000 f81b 	bl	800ddb0 <USBH_HandleControl>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <USBH_CtlReq+0x54>
 800dd84:	7dfb      	ldrb	r3, [r7, #23]
 800dd86:	2b03      	cmp	r3, #3
 800dd88:	d106      	bne.n	800dd98 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2200      	movs	r2, #0
 800dd94:	761a      	strb	r2, [r3, #24]
      break;
 800dd96:	e005      	b.n	800dda4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800dd98:	7dfb      	ldrb	r3, [r7, #23]
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d102      	bne.n	800dda4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2201      	movs	r2, #1
 800dda2:	709a      	strb	r2, [r3, #2]
      break;
 800dda4:	bf00      	nop
  }
  return status;
 800dda6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3718      	adds	r7, #24
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af02      	add	r7, sp, #8
 800ddb6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	7e1b      	ldrb	r3, [r3, #24]
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	2b0a      	cmp	r3, #10
 800ddc8:	f200 8156 	bhi.w	800e078 <USBH_HandleControl+0x2c8>
 800ddcc:	a201      	add	r2, pc, #4	@ (adr r2, 800ddd4 <USBH_HandleControl+0x24>)
 800ddce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd2:	bf00      	nop
 800ddd4:	0800de01 	.word	0x0800de01
 800ddd8:	0800de1b 	.word	0x0800de1b
 800dddc:	0800de85 	.word	0x0800de85
 800dde0:	0800deab 	.word	0x0800deab
 800dde4:	0800dee3 	.word	0x0800dee3
 800dde8:	0800df0d 	.word	0x0800df0d
 800ddec:	0800df5f 	.word	0x0800df5f
 800ddf0:	0800df81 	.word	0x0800df81
 800ddf4:	0800dfbd 	.word	0x0800dfbd
 800ddf8:	0800dfe3 	.word	0x0800dfe3
 800ddfc:	0800e021 	.word	0x0800e021
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f103 0110 	add.w	r1, r3, #16
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	795b      	ldrb	r3, [r3, #5]
 800de0a:	461a      	mov	r2, r3
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f943 	bl	800e098 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2202      	movs	r2, #2
 800de16:	761a      	strb	r2, [r3, #24]
      break;
 800de18:	e139      	b.n	800e08e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	795b      	ldrb	r3, [r3, #5]
 800de1e:	4619      	mov	r1, r3
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fcb7 	bl	800e794 <USBH_LL_GetURBState>
 800de26:	4603      	mov	r3, r0
 800de28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800de2a:	7bbb      	ldrb	r3, [r7, #14]
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d11e      	bne.n	800de6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7c1b      	ldrb	r3, [r3, #16]
 800de34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800de38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	8adb      	ldrh	r3, [r3, #22]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00a      	beq.n	800de58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800de42:	7b7b      	ldrb	r3, [r7, #13]
 800de44:	2b80      	cmp	r3, #128	@ 0x80
 800de46:	d103      	bne.n	800de50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2203      	movs	r2, #3
 800de4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de4e:	e115      	b.n	800e07c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2205      	movs	r2, #5
 800de54:	761a      	strb	r2, [r3, #24]
      break;
 800de56:	e111      	b.n	800e07c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800de58:	7b7b      	ldrb	r3, [r7, #13]
 800de5a:	2b80      	cmp	r3, #128	@ 0x80
 800de5c:	d103      	bne.n	800de66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2209      	movs	r2, #9
 800de62:	761a      	strb	r2, [r3, #24]
      break;
 800de64:	e10a      	b.n	800e07c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2207      	movs	r2, #7
 800de6a:	761a      	strb	r2, [r3, #24]
      break;
 800de6c:	e106      	b.n	800e07c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800de6e:	7bbb      	ldrb	r3, [r7, #14]
 800de70:	2b04      	cmp	r3, #4
 800de72:	d003      	beq.n	800de7c <USBH_HandleControl+0xcc>
 800de74:	7bbb      	ldrb	r3, [r7, #14]
 800de76:	2b02      	cmp	r3, #2
 800de78:	f040 8100 	bne.w	800e07c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	220b      	movs	r2, #11
 800de80:	761a      	strb	r2, [r3, #24]
      break;
 800de82:	e0fb      	b.n	800e07c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6899      	ldr	r1, [r3, #8]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	899a      	ldrh	r2, [r3, #12]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	791b      	ldrb	r3, [r3, #4]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 f93a 	bl	800e116 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2204      	movs	r2, #4
 800dea6:	761a      	strb	r2, [r3, #24]
      break;
 800dea8:	e0f1      	b.n	800e08e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	791b      	ldrb	r3, [r3, #4]
 800deae:	4619      	mov	r1, r3
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fc6f 	bl	800e794 <USBH_LL_GetURBState>
 800deb6:	4603      	mov	r3, r0
 800deb8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800deba:	7bbb      	ldrb	r3, [r7, #14]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d102      	bne.n	800dec6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2209      	movs	r2, #9
 800dec4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
 800dec8:	2b05      	cmp	r3, #5
 800deca:	d102      	bne.n	800ded2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800decc:	2303      	movs	r3, #3
 800dece:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ded0:	e0d6      	b.n	800e080 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ded2:	7bbb      	ldrb	r3, [r7, #14]
 800ded4:	2b04      	cmp	r3, #4
 800ded6:	f040 80d3 	bne.w	800e080 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	220b      	movs	r2, #11
 800dede:	761a      	strb	r2, [r3, #24]
      break;
 800dee0:	e0ce      	b.n	800e080 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6899      	ldr	r1, [r3, #8]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	899a      	ldrh	r2, [r3, #12]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	795b      	ldrb	r3, [r3, #5]
 800deee:	2001      	movs	r0, #1
 800def0:	9000      	str	r0, [sp, #0]
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f8ea 	bl	800e0cc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800defe:	b29a      	uxth	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2206      	movs	r2, #6
 800df08:	761a      	strb	r2, [r3, #24]
      break;
 800df0a:	e0c0      	b.n	800e08e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	795b      	ldrb	r3, [r3, #5]
 800df10:	4619      	mov	r1, r3
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fc3e 	bl	800e794 <USBH_LL_GetURBState>
 800df18:	4603      	mov	r3, r0
 800df1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800df1c:	7bbb      	ldrb	r3, [r7, #14]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d103      	bne.n	800df2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2207      	movs	r2, #7
 800df26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800df28:	e0ac      	b.n	800e084 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800df2a:	7bbb      	ldrb	r3, [r7, #14]
 800df2c:	2b05      	cmp	r3, #5
 800df2e:	d105      	bne.n	800df3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	220c      	movs	r2, #12
 800df34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800df36:	2303      	movs	r3, #3
 800df38:	73fb      	strb	r3, [r7, #15]
      break;
 800df3a:	e0a3      	b.n	800e084 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d103      	bne.n	800df4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2205      	movs	r2, #5
 800df46:	761a      	strb	r2, [r3, #24]
      break;
 800df48:	e09c      	b.n	800e084 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800df4a:	7bbb      	ldrb	r3, [r7, #14]
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	f040 8099 	bne.w	800e084 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	220b      	movs	r2, #11
 800df56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800df58:	2302      	movs	r3, #2
 800df5a:	73fb      	strb	r3, [r7, #15]
      break;
 800df5c:	e092      	b.n	800e084 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	791b      	ldrb	r3, [r3, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	2100      	movs	r1, #0
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 f8d5 	bl	800e116 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800df72:	b29a      	uxth	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2208      	movs	r2, #8
 800df7c:	761a      	strb	r2, [r3, #24]

      break;
 800df7e:	e086      	b.n	800e08e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	791b      	ldrb	r3, [r3, #4]
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fc04 	bl	800e794 <USBH_LL_GetURBState>
 800df8c:	4603      	mov	r3, r0
 800df8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800df90:	7bbb      	ldrb	r3, [r7, #14]
 800df92:	2b01      	cmp	r3, #1
 800df94:	d105      	bne.n	800dfa2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	220d      	movs	r2, #13
 800df9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dfa0:	e072      	b.n	800e088 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
 800dfa4:	2b04      	cmp	r3, #4
 800dfa6:	d103      	bne.n	800dfb0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	220b      	movs	r2, #11
 800dfac:	761a      	strb	r2, [r3, #24]
      break;
 800dfae:	e06b      	b.n	800e088 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800dfb0:	7bbb      	ldrb	r3, [r7, #14]
 800dfb2:	2b05      	cmp	r3, #5
 800dfb4:	d168      	bne.n	800e088 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800dfb6:	2303      	movs	r3, #3
 800dfb8:	73fb      	strb	r3, [r7, #15]
      break;
 800dfba:	e065      	b.n	800e088 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	795b      	ldrb	r3, [r3, #5]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	9200      	str	r2, [sp, #0]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f87f 	bl	800e0cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	220a      	movs	r2, #10
 800dfde:	761a      	strb	r2, [r3, #24]
      break;
 800dfe0:	e055      	b.n	800e08e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	795b      	ldrb	r3, [r3, #5]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fbd3 	bl	800e794 <USBH_LL_GetURBState>
 800dfee:	4603      	mov	r3, r0
 800dff0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dff2:	7bbb      	ldrb	r3, [r7, #14]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d105      	bne.n	800e004 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	220d      	movs	r2, #13
 800e000:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e002:	e043      	b.n	800e08c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e004:	7bbb      	ldrb	r3, [r7, #14]
 800e006:	2b02      	cmp	r3, #2
 800e008:	d103      	bne.n	800e012 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2209      	movs	r2, #9
 800e00e:	761a      	strb	r2, [r3, #24]
      break;
 800e010:	e03c      	b.n	800e08c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e012:	7bbb      	ldrb	r3, [r7, #14]
 800e014:	2b04      	cmp	r3, #4
 800e016:	d139      	bne.n	800e08c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	220b      	movs	r2, #11
 800e01c:	761a      	strb	r2, [r3, #24]
      break;
 800e01e:	e035      	b.n	800e08c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	7e5b      	ldrb	r3, [r3, #25]
 800e024:	3301      	adds	r3, #1
 800e026:	b2da      	uxtb	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	765a      	strb	r2, [r3, #25]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	7e5b      	ldrb	r3, [r3, #25]
 800e030:	2b02      	cmp	r3, #2
 800e032:	d806      	bhi.n	800e042 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2201      	movs	r2, #1
 800e03e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e040:	e025      	b.n	800e08e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e048:	2106      	movs	r1, #6
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	795b      	ldrb	r3, [r3, #5]
 800e058:	4619      	mov	r1, r3
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f90c 	bl	800e278 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	791b      	ldrb	r3, [r3, #4]
 800e064:	4619      	mov	r1, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 f906 	bl	800e278 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e072:	2302      	movs	r3, #2
 800e074:	73fb      	strb	r3, [r7, #15]
      break;
 800e076:	e00a      	b.n	800e08e <USBH_HandleControl+0x2de>

    default:
      break;
 800e078:	bf00      	nop
 800e07a:	e008      	b.n	800e08e <USBH_HandleControl+0x2de>
      break;
 800e07c:	bf00      	nop
 800e07e:	e006      	b.n	800e08e <USBH_HandleControl+0x2de>
      break;
 800e080:	bf00      	nop
 800e082:	e004      	b.n	800e08e <USBH_HandleControl+0x2de>
      break;
 800e084:	bf00      	nop
 800e086:	e002      	b.n	800e08e <USBH_HandleControl+0x2de>
      break;
 800e088:	bf00      	nop
 800e08a:	e000      	b.n	800e08e <USBH_HandleControl+0x2de>
      break;
 800e08c:	bf00      	nop
  }

  return status;
 800e08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b088      	sub	sp, #32
 800e09c:	af04      	add	r7, sp, #16
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e0a6:	79f9      	ldrb	r1, [r7, #7]
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	9303      	str	r3, [sp, #12]
 800e0ac:	2308      	movs	r3, #8
 800e0ae:	9302      	str	r3, [sp, #8]
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	9301      	str	r3, [sp, #4]
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9300      	str	r3, [sp, #0]
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 fb38 	bl	800e732 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af04      	add	r7, sp, #16
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	461a      	mov	r2, r3
 800e0da:	460b      	mov	r3, r1
 800e0dc:	80fb      	strh	r3, [r7, #6]
 800e0de:	4613      	mov	r3, r2
 800e0e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d001      	beq.n	800e0f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e0f0:	7979      	ldrb	r1, [r7, #5]
 800e0f2:	7e3b      	ldrb	r3, [r7, #24]
 800e0f4:	9303      	str	r3, [sp, #12]
 800e0f6:	88fb      	ldrh	r3, [r7, #6]
 800e0f8:	9302      	str	r3, [sp, #8]
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	9301      	str	r3, [sp, #4]
 800e0fe:	2301      	movs	r3, #1
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	2300      	movs	r3, #0
 800e104:	2200      	movs	r2, #0
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	f000 fb13 	bl	800e732 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b088      	sub	sp, #32
 800e11a:	af04      	add	r7, sp, #16
 800e11c:	60f8      	str	r0, [r7, #12]
 800e11e:	60b9      	str	r1, [r7, #8]
 800e120:	4611      	mov	r1, r2
 800e122:	461a      	mov	r2, r3
 800e124:	460b      	mov	r3, r1
 800e126:	80fb      	strh	r3, [r7, #6]
 800e128:	4613      	mov	r3, r2
 800e12a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e12c:	7979      	ldrb	r1, [r7, #5]
 800e12e:	2300      	movs	r3, #0
 800e130:	9303      	str	r3, [sp, #12]
 800e132:	88fb      	ldrh	r3, [r7, #6]
 800e134:	9302      	str	r3, [sp, #8]
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	2301      	movs	r3, #1
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	2300      	movs	r3, #0
 800e140:	2201      	movs	r2, #1
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 faf5 	bl	800e732 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e148:	2300      	movs	r3, #0

}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b088      	sub	sp, #32
 800e156:	af04      	add	r7, sp, #16
 800e158:	60f8      	str	r0, [r7, #12]
 800e15a:	60b9      	str	r1, [r7, #8]
 800e15c:	4611      	mov	r1, r2
 800e15e:	461a      	mov	r2, r3
 800e160:	460b      	mov	r3, r1
 800e162:	80fb      	strh	r3, [r7, #6]
 800e164:	4613      	mov	r3, r2
 800e166:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e172:	2300      	movs	r3, #0
 800e174:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e176:	7979      	ldrb	r1, [r7, #5]
 800e178:	7e3b      	ldrb	r3, [r7, #24]
 800e17a:	9303      	str	r3, [sp, #12]
 800e17c:	88fb      	ldrh	r3, [r7, #6]
 800e17e:	9302      	str	r3, [sp, #8]
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	9301      	str	r3, [sp, #4]
 800e184:	2301      	movs	r3, #1
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	2302      	movs	r3, #2
 800e18a:	2200      	movs	r2, #0
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f000 fad0 	bl	800e732 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b088      	sub	sp, #32
 800e1a0:	af04      	add	r7, sp, #16
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	80fb      	strh	r3, [r7, #6]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e1b2:	7979      	ldrb	r1, [r7, #5]
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	9303      	str	r3, [sp, #12]
 800e1b8:	88fb      	ldrh	r3, [r7, #6]
 800e1ba:	9302      	str	r3, [sp, #8]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	9301      	str	r3, [sp, #4]
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 fab2 	bl	800e732 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e1ce:	2300      	movs	r3, #0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af04      	add	r7, sp, #16
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	4608      	mov	r0, r1
 800e1e2:	4611      	mov	r1, r2
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	70fb      	strb	r3, [r7, #3]
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	70bb      	strb	r3, [r7, #2]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e1f2:	7878      	ldrb	r0, [r7, #1]
 800e1f4:	78ba      	ldrb	r2, [r7, #2]
 800e1f6:	78f9      	ldrb	r1, [r7, #3]
 800e1f8:	8b3b      	ldrh	r3, [r7, #24]
 800e1fa:	9302      	str	r3, [sp, #8]
 800e1fc:	7d3b      	ldrb	r3, [r7, #20]
 800e1fe:	9301      	str	r3, [sp, #4]
 800e200:	7c3b      	ldrb	r3, [r7, #16]
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	4603      	mov	r3, r0
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fa45 	bl	800e696 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e20c:	2300      	movs	r3, #0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b082      	sub	sp, #8
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	460b      	mov	r3, r1
 800e220:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e222:	78fb      	ldrb	r3, [r7, #3]
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 fa64 	bl	800e6f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b084      	sub	sp, #16
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	460b      	mov	r3, r1
 800e240:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 f836 	bl	800e2b4 <USBH_GetFreePipe>
 800e248:	4603      	mov	r3, r0
 800e24a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e24c:	89fb      	ldrh	r3, [r7, #14]
 800e24e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e252:	4293      	cmp	r3, r2
 800e254:	d00a      	beq.n	800e26c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e256:	78fa      	ldrb	r2, [r7, #3]
 800e258:	89fb      	ldrh	r3, [r7, #14]
 800e25a:	f003 030f 	and.w	r3, r3, #15
 800e25e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e262:	6879      	ldr	r1, [r7, #4]
 800e264:	33e0      	adds	r3, #224	@ 0xe0
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e26c:	89fb      	ldrh	r3, [r7, #14]
 800e26e:	b2db      	uxtb	r3, r3
}
 800e270:	4618      	mov	r0, r3
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	460b      	mov	r3, r1
 800e282:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	2b0f      	cmp	r3, #15
 800e288:	d80d      	bhi.n	800e2a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e28a:	78fb      	ldrb	r3, [r7, #3]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	33e0      	adds	r3, #224	@ 0xe0
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	685a      	ldr	r2, [r3, #4]
 800e296:	78fb      	ldrb	r3, [r7, #3]
 800e298:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e29c:	6879      	ldr	r1, [r7, #4]
 800e29e:	33e0      	adds	r3, #224	@ 0xe0
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	440b      	add	r3, r1
 800e2a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73fb      	strb	r3, [r7, #15]
 800e2c4:	e00f      	b.n	800e2e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	33e0      	adds	r3, #224	@ 0xe0
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d102      	bne.n	800e2e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	e007      	b.n	800e2f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	73fb      	strb	r3, [r7, #15]
 800e2e6:	7bfb      	ldrb	r3, [r7, #15]
 800e2e8:	2b0f      	cmp	r3, #15
 800e2ea:	d9ec      	bls.n	800e2c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e2ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3714      	adds	r7, #20
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e300:	2201      	movs	r2, #1
 800e302:	490e      	ldr	r1, [pc, #56]	@ (800e33c <MX_USB_HOST_Init+0x40>)
 800e304:	480e      	ldr	r0, [pc, #56]	@ (800e340 <MX_USB_HOST_Init+0x44>)
 800e306:	f7fe fb15 	bl	800c934 <USBH_Init>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e310:	f7f4 fea2 	bl	8003058 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e314:	490b      	ldr	r1, [pc, #44]	@ (800e344 <MX_USB_HOST_Init+0x48>)
 800e316:	480a      	ldr	r0, [pc, #40]	@ (800e340 <MX_USB_HOST_Init+0x44>)
 800e318:	f7fe fbb9 	bl	800ca8e <USBH_RegisterClass>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e322:	f7f4 fe99 	bl	8003058 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e326:	4806      	ldr	r0, [pc, #24]	@ (800e340 <MX_USB_HOST_Init+0x44>)
 800e328:	f7fe fc3d 	bl	800cba6 <USBH_Start>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d001      	beq.n	800e336 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e332:	f7f4 fe91 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e336:	bf00      	nop
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	0800e35d 	.word	0x0800e35d
 800e340:	20000478 	.word	0x20000478
 800e344:	2000000c 	.word	0x2000000c

0800e348 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e34c:	4802      	ldr	r0, [pc, #8]	@ (800e358 <MX_USB_HOST_Process+0x10>)
 800e34e:	f7fe fc3b 	bl	800cbc8 <USBH_Process>
}
 800e352:	bf00      	nop
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	20000478 	.word	0x20000478

0800e35c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	460b      	mov	r3, r1
 800e366:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e368:	78fb      	ldrb	r3, [r7, #3]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	2b04      	cmp	r3, #4
 800e36e:	d819      	bhi.n	800e3a4 <USBH_UserProcess+0x48>
 800e370:	a201      	add	r2, pc, #4	@ (adr r2, 800e378 <USBH_UserProcess+0x1c>)
 800e372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e376:	bf00      	nop
 800e378:	0800e3a5 	.word	0x0800e3a5
 800e37c:	0800e395 	.word	0x0800e395
 800e380:	0800e3a5 	.word	0x0800e3a5
 800e384:	0800e39d 	.word	0x0800e39d
 800e388:	0800e38d 	.word	0x0800e38d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e38c:	4b09      	ldr	r3, [pc, #36]	@ (800e3b4 <USBH_UserProcess+0x58>)
 800e38e:	2203      	movs	r2, #3
 800e390:	701a      	strb	r2, [r3, #0]
  break;
 800e392:	e008      	b.n	800e3a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e394:	4b07      	ldr	r3, [pc, #28]	@ (800e3b4 <USBH_UserProcess+0x58>)
 800e396:	2202      	movs	r2, #2
 800e398:	701a      	strb	r2, [r3, #0]
  break;
 800e39a:	e004      	b.n	800e3a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e39c:	4b05      	ldr	r3, [pc, #20]	@ (800e3b4 <USBH_UserProcess+0x58>)
 800e39e:	2201      	movs	r2, #1
 800e3a0:	701a      	strb	r2, [r3, #0]
  break;
 800e3a2:	e000      	b.n	800e3a6 <USBH_UserProcess+0x4a>

  default:
  break;
 800e3a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e3a6:	bf00      	nop
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	20000850 	.word	0x20000850

0800e3b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08a      	sub	sp, #40	@ 0x28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3c0:	f107 0314 	add.w	r3, r7, #20
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	605a      	str	r2, [r3, #4]
 800e3ca:	609a      	str	r2, [r3, #8]
 800e3cc:	60da      	str	r2, [r3, #12]
 800e3ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e3d8:	d13a      	bne.n	800e450 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3da:	2300      	movs	r3, #0
 800e3dc:	613b      	str	r3, [r7, #16]
 800e3de:	4b1e      	ldr	r3, [pc, #120]	@ (800e458 <HAL_HCD_MspInit+0xa0>)
 800e3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3e2:	4a1d      	ldr	r2, [pc, #116]	@ (800e458 <HAL_HCD_MspInit+0xa0>)
 800e3e4:	f043 0301 	orr.w	r3, r3, #1
 800e3e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800e3ea:	4b1b      	ldr	r3, [pc, #108]	@ (800e458 <HAL_HCD_MspInit+0xa0>)
 800e3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	613b      	str	r3, [r7, #16]
 800e3f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e3f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e3fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e400:	2300      	movs	r3, #0
 800e402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e404:	2303      	movs	r3, #3
 800e406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e408:	230a      	movs	r3, #10
 800e40a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e40c:	f107 0314 	add.w	r3, r7, #20
 800e410:	4619      	mov	r1, r3
 800e412:	4812      	ldr	r0, [pc, #72]	@ (800e45c <HAL_HCD_MspInit+0xa4>)
 800e414:	f7f6 f8b6 	bl	8004584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e418:	4b0f      	ldr	r3, [pc, #60]	@ (800e458 <HAL_HCD_MspInit+0xa0>)
 800e41a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e41c:	4a0e      	ldr	r2, [pc, #56]	@ (800e458 <HAL_HCD_MspInit+0xa0>)
 800e41e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e422:	6353      	str	r3, [r2, #52]	@ 0x34
 800e424:	2300      	movs	r3, #0
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	4b0b      	ldr	r3, [pc, #44]	@ (800e458 <HAL_HCD_MspInit+0xa0>)
 800e42a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e42c:	4a0a      	ldr	r2, [pc, #40]	@ (800e458 <HAL_HCD_MspInit+0xa0>)
 800e42e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e432:	6453      	str	r3, [r2, #68]	@ 0x44
 800e434:	4b08      	ldr	r3, [pc, #32]	@ (800e458 <HAL_HCD_MspInit+0xa0>)
 800e436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e440:	2200      	movs	r2, #0
 800e442:	2100      	movs	r1, #0
 800e444:	2043      	movs	r0, #67	@ 0x43
 800e446:	f7f5 fad1 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e44a:	2043      	movs	r0, #67	@ 0x43
 800e44c:	f7f5 fafa 	bl	8003a44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e450:	bf00      	nop
 800e452:	3728      	adds	r7, #40	@ 0x28
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	40023800 	.word	0x40023800
 800e45c:	40020000 	.word	0x40020000

0800e460 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fe ff81 	bl	800d376 <USBH_LL_IncTimer>
}
 800e474:	bf00      	nop
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe ffb9 	bl	800d402 <USBH_LL_Connect>
}
 800e490:	bf00      	nop
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe ffc2 	bl	800d430 <USBH_LL_Disconnect>
}
 800e4ac:	bf00      	nop
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	460b      	mov	r3, r1
 800e4be:	70fb      	strb	r3, [r7, #3]
 800e4c0:	4613      	mov	r3, r2
 800e4c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe ff73 	bl	800d3ca <USBH_LL_PortEnabled>
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fe ff73 	bl	800d3e6 <USBH_LL_PortDisabled>
}
 800e500:	bf00      	nop
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e516:	2b01      	cmp	r3, #1
 800e518:	d12a      	bne.n	800e570 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e51a:	4a18      	ldr	r2, [pc, #96]	@ (800e57c <USBH_LL_Init+0x74>)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a15      	ldr	r2, [pc, #84]	@ (800e57c <USBH_LL_Init+0x74>)
 800e526:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e52a:	4b14      	ldr	r3, [pc, #80]	@ (800e57c <USBH_LL_Init+0x74>)
 800e52c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e530:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e532:	4b12      	ldr	r3, [pc, #72]	@ (800e57c <USBH_LL_Init+0x74>)
 800e534:	2208      	movs	r2, #8
 800e536:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e538:	4b10      	ldr	r3, [pc, #64]	@ (800e57c <USBH_LL_Init+0x74>)
 800e53a:	2201      	movs	r2, #1
 800e53c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e53e:	4b0f      	ldr	r3, [pc, #60]	@ (800e57c <USBH_LL_Init+0x74>)
 800e540:	2200      	movs	r2, #0
 800e542:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e544:	4b0d      	ldr	r3, [pc, #52]	@ (800e57c <USBH_LL_Init+0x74>)
 800e546:	2202      	movs	r2, #2
 800e548:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e54a:	4b0c      	ldr	r3, [pc, #48]	@ (800e57c <USBH_LL_Init+0x74>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e550:	480a      	ldr	r0, [pc, #40]	@ (800e57c <USBH_LL_Init+0x74>)
 800e552:	f7f6 fafb 	bl	8004b4c <HAL_HCD_Init>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d001      	beq.n	800e560 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e55c:	f7f4 fd7c 	bl	8003058 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e560:	4806      	ldr	r0, [pc, #24]	@ (800e57c <USBH_LL_Init+0x74>)
 800e562:	f7f6 ff67 	bl	8005434 <HAL_HCD_GetCurrentFrame>
 800e566:	4603      	mov	r3, r0
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7fe fef4 	bl	800d358 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	20000854 	.word	0x20000854

0800e580 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e596:	4618      	mov	r0, r3
 800e598:	f7f6 fed4 	bl	8005344 <HAL_HCD_Start>
 800e59c:	4603      	mov	r3, r0
 800e59e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f000 f95e 	bl	800e864 <USBH_Get_USB_Status>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b084      	sub	sp, #16
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7f6 fedc 	bl	800538a <HAL_HCD_Stop>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 f943 	bl	800e864 <USBH_Get_USB_Status>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7f6 ff26 	bl	8005450 <HAL_HCD_GetCurrentSpeed>
 800e604:	4603      	mov	r3, r0
 800e606:	2b02      	cmp	r3, #2
 800e608:	d00c      	beq.n	800e624 <USBH_LL_GetSpeed+0x38>
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	d80d      	bhi.n	800e62a <USBH_LL_GetSpeed+0x3e>
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d002      	beq.n	800e618 <USBH_LL_GetSpeed+0x2c>
 800e612:	2b01      	cmp	r3, #1
 800e614:	d003      	beq.n	800e61e <USBH_LL_GetSpeed+0x32>
 800e616:	e008      	b.n	800e62a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e618:	2300      	movs	r3, #0
 800e61a:	73fb      	strb	r3, [r7, #15]
    break;
 800e61c:	e008      	b.n	800e630 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e61e:	2301      	movs	r3, #1
 800e620:	73fb      	strb	r3, [r7, #15]
    break;
 800e622:	e005      	b.n	800e630 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e624:	2302      	movs	r3, #2
 800e626:	73fb      	strb	r3, [r7, #15]
    break;
 800e628:	e002      	b.n	800e630 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e62a:	2301      	movs	r3, #1
 800e62c:	73fb      	strb	r3, [r7, #15]
    break;
 800e62e:	bf00      	nop
  }
  return  speed;
 800e630:	7bfb      	ldrb	r3, [r7, #15]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e642:	2300      	movs	r3, #0
 800e644:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e650:	4618      	mov	r0, r3
 800e652:	f7f6 feb7 	bl	80053c4 <HAL_HCD_ResetPort>
 800e656:	4603      	mov	r3, r0
 800e658:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 f901 	bl	800e864 <USBH_Get_USB_Status>
 800e662:	4603      	mov	r3, r0
 800e664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e666:	7bbb      	ldrb	r3, [r7, #14]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	460b      	mov	r3, r1
 800e67a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e682:	78fa      	ldrb	r2, [r7, #3]
 800e684:	4611      	mov	r1, r2
 800e686:	4618      	mov	r0, r3
 800e688:	f7f6 febf 	bl	800540a <HAL_HCD_HC_GetXferCount>
 800e68c:	4603      	mov	r3, r0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e696:	b590      	push	{r4, r7, lr}
 800e698:	b089      	sub	sp, #36	@ 0x24
 800e69a:	af04      	add	r7, sp, #16
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	4608      	mov	r0, r1
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	70fb      	strb	r3, [r7, #3]
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	70bb      	strb	r3, [r7, #2]
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800e6be:	787c      	ldrb	r4, [r7, #1]
 800e6c0:	78ba      	ldrb	r2, [r7, #2]
 800e6c2:	78f9      	ldrb	r1, [r7, #3]
 800e6c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e6c6:	9302      	str	r3, [sp, #8]
 800e6c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e6cc:	9301      	str	r3, [sp, #4]
 800e6ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	4623      	mov	r3, r4
 800e6d6:	f7f6 faab 	bl	8004c30 <HAL_HCD_HC_Init>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f000 f8bf 	bl	800e864 <USBH_Get_USB_Status>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3714      	adds	r7, #20
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd90      	pop	{r4, r7, pc}

0800e6f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e704:	2300      	movs	r3, #0
 800e706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e70e:	78fa      	ldrb	r2, [r7, #3]
 800e710:	4611      	mov	r1, r2
 800e712:	4618      	mov	r0, r3
 800e714:	f7f6 fb44 	bl	8004da0 <HAL_HCD_HC_Halt>
 800e718:	4603      	mov	r3, r0
 800e71a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	4618      	mov	r0, r3
 800e720:	f000 f8a0 	bl	800e864 <USBH_Get_USB_Status>
 800e724:	4603      	mov	r3, r0
 800e726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e728:	7bbb      	ldrb	r3, [r7, #14]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e732:	b590      	push	{r4, r7, lr}
 800e734:	b089      	sub	sp, #36	@ 0x24
 800e736:	af04      	add	r7, sp, #16
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	4608      	mov	r0, r1
 800e73c:	4611      	mov	r1, r2
 800e73e:	461a      	mov	r2, r3
 800e740:	4603      	mov	r3, r0
 800e742:	70fb      	strb	r3, [r7, #3]
 800e744:	460b      	mov	r3, r1
 800e746:	70bb      	strb	r3, [r7, #2]
 800e748:	4613      	mov	r3, r2
 800e74a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800e75a:	787c      	ldrb	r4, [r7, #1]
 800e75c:	78ba      	ldrb	r2, [r7, #2]
 800e75e:	78f9      	ldrb	r1, [r7, #3]
 800e760:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e764:	9303      	str	r3, [sp, #12]
 800e766:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e768:	9302      	str	r3, [sp, #8]
 800e76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76c:	9301      	str	r3, [sp, #4]
 800e76e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	4623      	mov	r3, r4
 800e776:	f7f6 fb37 	bl	8004de8 <HAL_HCD_HC_SubmitRequest>
 800e77a:	4603      	mov	r3, r0
 800e77c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
 800e780:	4618      	mov	r0, r3
 800e782:	f000 f86f 	bl	800e864 <USBH_Get_USB_Status>
 800e786:	4603      	mov	r3, r0
 800e788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3714      	adds	r7, #20
 800e790:	46bd      	mov	sp, r7
 800e792:	bd90      	pop	{r4, r7, pc}

0800e794 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	460b      	mov	r3, r1
 800e79e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e7a6:	78fa      	ldrb	r2, [r7, #3]
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7f6 fe18 	bl	80053e0 <HAL_HCD_HC_GetURBState>
 800e7b0:	4603      	mov	r3, r0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b082      	sub	sp, #8
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d103      	bne.n	800e7d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e7d0:	78fb      	ldrb	r3, [r7, #3]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f000 f872 	bl	800e8bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e7d8:	20c8      	movs	r0, #200	@ 0xc8
 800e7da:	f7f4 fff3 	bl	80037c4 <HAL_Delay>
  return USBH_OK;
 800e7de:	2300      	movs	r3, #0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	70fb      	strb	r3, [r7, #3]
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e7fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e800:	78fa      	ldrb	r2, [r7, #3]
 800e802:	68f9      	ldr	r1, [r7, #12]
 800e804:	4613      	mov	r3, r2
 800e806:	011b      	lsls	r3, r3, #4
 800e808:	1a9b      	subs	r3, r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	440b      	add	r3, r1
 800e80e:	3317      	adds	r3, #23
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00a      	beq.n	800e82c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e816:	78fa      	ldrb	r2, [r7, #3]
 800e818:	68f9      	ldr	r1, [r7, #12]
 800e81a:	4613      	mov	r3, r2
 800e81c:	011b      	lsls	r3, r3, #4
 800e81e:	1a9b      	subs	r3, r3, r2
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	440b      	add	r3, r1
 800e824:	333c      	adds	r3, #60	@ 0x3c
 800e826:	78ba      	ldrb	r2, [r7, #2]
 800e828:	701a      	strb	r2, [r3, #0]
 800e82a:	e009      	b.n	800e840 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e82c:	78fa      	ldrb	r2, [r7, #3]
 800e82e:	68f9      	ldr	r1, [r7, #12]
 800e830:	4613      	mov	r3, r2
 800e832:	011b      	lsls	r3, r3, #4
 800e834:	1a9b      	subs	r3, r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	440b      	add	r3, r1
 800e83a:	333d      	adds	r3, #61	@ 0x3d
 800e83c:	78ba      	ldrb	r2, [r7, #2]
 800e83e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr

0800e84e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b082      	sub	sp, #8
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7f4 ffb4 	bl	80037c4 <HAL_Delay>
}
 800e85c:	bf00      	nop
 800e85e:	3708      	adds	r7, #8
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e864:	b480      	push	{r7}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e86e:	2300      	movs	r3, #0
 800e870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e872:	79fb      	ldrb	r3, [r7, #7]
 800e874:	2b03      	cmp	r3, #3
 800e876:	d817      	bhi.n	800e8a8 <USBH_Get_USB_Status+0x44>
 800e878:	a201      	add	r2, pc, #4	@ (adr r2, 800e880 <USBH_Get_USB_Status+0x1c>)
 800e87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e87e:	bf00      	nop
 800e880:	0800e891 	.word	0x0800e891
 800e884:	0800e897 	.word	0x0800e897
 800e888:	0800e89d 	.word	0x0800e89d
 800e88c:	0800e8a3 	.word	0x0800e8a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	73fb      	strb	r3, [r7, #15]
    break;
 800e894:	e00b      	b.n	800e8ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e896:	2302      	movs	r3, #2
 800e898:	73fb      	strb	r3, [r7, #15]
    break;
 800e89a:	e008      	b.n	800e8ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e89c:	2301      	movs	r3, #1
 800e89e:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a0:	e005      	b.n	800e8ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e8a2:	2302      	movs	r3, #2
 800e8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a6:	e002      	b.n	800e8ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ac:	bf00      	nop
  }
  return usb_status;
 800e8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3714      	adds	r7, #20
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e8c6:	79fb      	ldrb	r3, [r7, #7]
 800e8c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d102      	bne.n	800e8d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	73fb      	strb	r3, [r7, #15]
 800e8d4:	e001      	b.n	800e8da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e8da:	7bfb      	ldrb	r3, [r7, #15]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	2101      	movs	r1, #1
 800e8e0:	4803      	ldr	r0, [pc, #12]	@ (800e8f0 <MX_DriverVbusFS+0x34>)
 800e8e2:	f7f6 f907 	bl	8004af4 <HAL_GPIO_WritePin>
}
 800e8e6:	bf00      	nop
 800e8e8:	3710      	adds	r7, #16
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	40020800 	.word	0x40020800

0800e8f4 <malloc>:
 800e8f4:	4b02      	ldr	r3, [pc, #8]	@ (800e900 <malloc+0xc>)
 800e8f6:	4601      	mov	r1, r0
 800e8f8:	6818      	ldr	r0, [r3, #0]
 800e8fa:	f000 b82d 	b.w	800e958 <_malloc_r>
 800e8fe:	bf00      	nop
 800e900:	20000038 	.word	0x20000038

0800e904 <free>:
 800e904:	4b02      	ldr	r3, [pc, #8]	@ (800e910 <free+0xc>)
 800e906:	4601      	mov	r1, r0
 800e908:	6818      	ldr	r0, [r3, #0]
 800e90a:	f001 be1d 	b.w	8010548 <_free_r>
 800e90e:	bf00      	nop
 800e910:	20000038 	.word	0x20000038

0800e914 <sbrk_aligned>:
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	4e0f      	ldr	r6, [pc, #60]	@ (800e954 <sbrk_aligned+0x40>)
 800e918:	460c      	mov	r4, r1
 800e91a:	6831      	ldr	r1, [r6, #0]
 800e91c:	4605      	mov	r5, r0
 800e91e:	b911      	cbnz	r1, 800e926 <sbrk_aligned+0x12>
 800e920:	f000 ff68 	bl	800f7f4 <_sbrk_r>
 800e924:	6030      	str	r0, [r6, #0]
 800e926:	4621      	mov	r1, r4
 800e928:	4628      	mov	r0, r5
 800e92a:	f000 ff63 	bl	800f7f4 <_sbrk_r>
 800e92e:	1c43      	adds	r3, r0, #1
 800e930:	d103      	bne.n	800e93a <sbrk_aligned+0x26>
 800e932:	f04f 34ff 	mov.w	r4, #4294967295
 800e936:	4620      	mov	r0, r4
 800e938:	bd70      	pop	{r4, r5, r6, pc}
 800e93a:	1cc4      	adds	r4, r0, #3
 800e93c:	f024 0403 	bic.w	r4, r4, #3
 800e940:	42a0      	cmp	r0, r4
 800e942:	d0f8      	beq.n	800e936 <sbrk_aligned+0x22>
 800e944:	1a21      	subs	r1, r4, r0
 800e946:	4628      	mov	r0, r5
 800e948:	f000 ff54 	bl	800f7f4 <_sbrk_r>
 800e94c:	3001      	adds	r0, #1
 800e94e:	d1f2      	bne.n	800e936 <sbrk_aligned+0x22>
 800e950:	e7ef      	b.n	800e932 <sbrk_aligned+0x1e>
 800e952:	bf00      	nop
 800e954:	20000c34 	.word	0x20000c34

0800e958 <_malloc_r>:
 800e958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e95c:	1ccd      	adds	r5, r1, #3
 800e95e:	f025 0503 	bic.w	r5, r5, #3
 800e962:	3508      	adds	r5, #8
 800e964:	2d0c      	cmp	r5, #12
 800e966:	bf38      	it	cc
 800e968:	250c      	movcc	r5, #12
 800e96a:	2d00      	cmp	r5, #0
 800e96c:	4606      	mov	r6, r0
 800e96e:	db01      	blt.n	800e974 <_malloc_r+0x1c>
 800e970:	42a9      	cmp	r1, r5
 800e972:	d904      	bls.n	800e97e <_malloc_r+0x26>
 800e974:	230c      	movs	r3, #12
 800e976:	6033      	str	r3, [r6, #0]
 800e978:	2000      	movs	r0, #0
 800e97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e97e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea54 <_malloc_r+0xfc>
 800e982:	f000 f869 	bl	800ea58 <__malloc_lock>
 800e986:	f8d8 3000 	ldr.w	r3, [r8]
 800e98a:	461c      	mov	r4, r3
 800e98c:	bb44      	cbnz	r4, 800e9e0 <_malloc_r+0x88>
 800e98e:	4629      	mov	r1, r5
 800e990:	4630      	mov	r0, r6
 800e992:	f7ff ffbf 	bl	800e914 <sbrk_aligned>
 800e996:	1c43      	adds	r3, r0, #1
 800e998:	4604      	mov	r4, r0
 800e99a:	d158      	bne.n	800ea4e <_malloc_r+0xf6>
 800e99c:	f8d8 4000 	ldr.w	r4, [r8]
 800e9a0:	4627      	mov	r7, r4
 800e9a2:	2f00      	cmp	r7, #0
 800e9a4:	d143      	bne.n	800ea2e <_malloc_r+0xd6>
 800e9a6:	2c00      	cmp	r4, #0
 800e9a8:	d04b      	beq.n	800ea42 <_malloc_r+0xea>
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	4639      	mov	r1, r7
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	eb04 0903 	add.w	r9, r4, r3
 800e9b4:	f000 ff1e 	bl	800f7f4 <_sbrk_r>
 800e9b8:	4581      	cmp	r9, r0
 800e9ba:	d142      	bne.n	800ea42 <_malloc_r+0xea>
 800e9bc:	6821      	ldr	r1, [r4, #0]
 800e9be:	1a6d      	subs	r5, r5, r1
 800e9c0:	4629      	mov	r1, r5
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	f7ff ffa6 	bl	800e914 <sbrk_aligned>
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	d03a      	beq.n	800ea42 <_malloc_r+0xea>
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	442b      	add	r3, r5
 800e9d0:	6023      	str	r3, [r4, #0]
 800e9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800e9d6:	685a      	ldr	r2, [r3, #4]
 800e9d8:	bb62      	cbnz	r2, 800ea34 <_malloc_r+0xdc>
 800e9da:	f8c8 7000 	str.w	r7, [r8]
 800e9de:	e00f      	b.n	800ea00 <_malloc_r+0xa8>
 800e9e0:	6822      	ldr	r2, [r4, #0]
 800e9e2:	1b52      	subs	r2, r2, r5
 800e9e4:	d420      	bmi.n	800ea28 <_malloc_r+0xd0>
 800e9e6:	2a0b      	cmp	r2, #11
 800e9e8:	d917      	bls.n	800ea1a <_malloc_r+0xc2>
 800e9ea:	1961      	adds	r1, r4, r5
 800e9ec:	42a3      	cmp	r3, r4
 800e9ee:	6025      	str	r5, [r4, #0]
 800e9f0:	bf18      	it	ne
 800e9f2:	6059      	strne	r1, [r3, #4]
 800e9f4:	6863      	ldr	r3, [r4, #4]
 800e9f6:	bf08      	it	eq
 800e9f8:	f8c8 1000 	streq.w	r1, [r8]
 800e9fc:	5162      	str	r2, [r4, r5]
 800e9fe:	604b      	str	r3, [r1, #4]
 800ea00:	4630      	mov	r0, r6
 800ea02:	f000 f82f 	bl	800ea64 <__malloc_unlock>
 800ea06:	f104 000b 	add.w	r0, r4, #11
 800ea0a:	1d23      	adds	r3, r4, #4
 800ea0c:	f020 0007 	bic.w	r0, r0, #7
 800ea10:	1ac2      	subs	r2, r0, r3
 800ea12:	bf1c      	itt	ne
 800ea14:	1a1b      	subne	r3, r3, r0
 800ea16:	50a3      	strne	r3, [r4, r2]
 800ea18:	e7af      	b.n	800e97a <_malloc_r+0x22>
 800ea1a:	6862      	ldr	r2, [r4, #4]
 800ea1c:	42a3      	cmp	r3, r4
 800ea1e:	bf0c      	ite	eq
 800ea20:	f8c8 2000 	streq.w	r2, [r8]
 800ea24:	605a      	strne	r2, [r3, #4]
 800ea26:	e7eb      	b.n	800ea00 <_malloc_r+0xa8>
 800ea28:	4623      	mov	r3, r4
 800ea2a:	6864      	ldr	r4, [r4, #4]
 800ea2c:	e7ae      	b.n	800e98c <_malloc_r+0x34>
 800ea2e:	463c      	mov	r4, r7
 800ea30:	687f      	ldr	r7, [r7, #4]
 800ea32:	e7b6      	b.n	800e9a2 <_malloc_r+0x4a>
 800ea34:	461a      	mov	r2, r3
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	42a3      	cmp	r3, r4
 800ea3a:	d1fb      	bne.n	800ea34 <_malloc_r+0xdc>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	6053      	str	r3, [r2, #4]
 800ea40:	e7de      	b.n	800ea00 <_malloc_r+0xa8>
 800ea42:	230c      	movs	r3, #12
 800ea44:	6033      	str	r3, [r6, #0]
 800ea46:	4630      	mov	r0, r6
 800ea48:	f000 f80c 	bl	800ea64 <__malloc_unlock>
 800ea4c:	e794      	b.n	800e978 <_malloc_r+0x20>
 800ea4e:	6005      	str	r5, [r0, #0]
 800ea50:	e7d6      	b.n	800ea00 <_malloc_r+0xa8>
 800ea52:	bf00      	nop
 800ea54:	20000c38 	.word	0x20000c38

0800ea58 <__malloc_lock>:
 800ea58:	4801      	ldr	r0, [pc, #4]	@ (800ea60 <__malloc_lock+0x8>)
 800ea5a:	f000 bf18 	b.w	800f88e <__retarget_lock_acquire_recursive>
 800ea5e:	bf00      	nop
 800ea60:	20000d7c 	.word	0x20000d7c

0800ea64 <__malloc_unlock>:
 800ea64:	4801      	ldr	r0, [pc, #4]	@ (800ea6c <__malloc_unlock+0x8>)
 800ea66:	f000 bf13 	b.w	800f890 <__retarget_lock_release_recursive>
 800ea6a:	bf00      	nop
 800ea6c:	20000d7c 	.word	0x20000d7c

0800ea70 <__cvt>:
 800ea70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea74:	ec57 6b10 	vmov	r6, r7, d0
 800ea78:	2f00      	cmp	r7, #0
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	463b      	mov	r3, r7
 800ea80:	bfbb      	ittet	lt
 800ea82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ea86:	461f      	movlt	r7, r3
 800ea88:	2300      	movge	r3, #0
 800ea8a:	232d      	movlt	r3, #45	@ 0x2d
 800ea8c:	700b      	strb	r3, [r1, #0]
 800ea8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ea94:	4691      	mov	r9, r2
 800ea96:	f023 0820 	bic.w	r8, r3, #32
 800ea9a:	bfbc      	itt	lt
 800ea9c:	4632      	movlt	r2, r6
 800ea9e:	4616      	movlt	r6, r2
 800eaa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eaa4:	d005      	beq.n	800eab2 <__cvt+0x42>
 800eaa6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eaaa:	d100      	bne.n	800eaae <__cvt+0x3e>
 800eaac:	3401      	adds	r4, #1
 800eaae:	2102      	movs	r1, #2
 800eab0:	e000      	b.n	800eab4 <__cvt+0x44>
 800eab2:	2103      	movs	r1, #3
 800eab4:	ab03      	add	r3, sp, #12
 800eab6:	9301      	str	r3, [sp, #4]
 800eab8:	ab02      	add	r3, sp, #8
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	ec47 6b10 	vmov	d0, r6, r7
 800eac0:	4653      	mov	r3, sl
 800eac2:	4622      	mov	r2, r4
 800eac4:	f000 ff7c 	bl	800f9c0 <_dtoa_r>
 800eac8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800eacc:	4605      	mov	r5, r0
 800eace:	d119      	bne.n	800eb04 <__cvt+0x94>
 800ead0:	f019 0f01 	tst.w	r9, #1
 800ead4:	d00e      	beq.n	800eaf4 <__cvt+0x84>
 800ead6:	eb00 0904 	add.w	r9, r0, r4
 800eada:	2200      	movs	r2, #0
 800eadc:	2300      	movs	r3, #0
 800eade:	4630      	mov	r0, r6
 800eae0:	4639      	mov	r1, r7
 800eae2:	f7f1 fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 800eae6:	b108      	cbz	r0, 800eaec <__cvt+0x7c>
 800eae8:	f8cd 900c 	str.w	r9, [sp, #12]
 800eaec:	2230      	movs	r2, #48	@ 0x30
 800eaee:	9b03      	ldr	r3, [sp, #12]
 800eaf0:	454b      	cmp	r3, r9
 800eaf2:	d31e      	bcc.n	800eb32 <__cvt+0xc2>
 800eaf4:	9b03      	ldr	r3, [sp, #12]
 800eaf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eaf8:	1b5b      	subs	r3, r3, r5
 800eafa:	4628      	mov	r0, r5
 800eafc:	6013      	str	r3, [r2, #0]
 800eafe:	b004      	add	sp, #16
 800eb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eb08:	eb00 0904 	add.w	r9, r0, r4
 800eb0c:	d1e5      	bne.n	800eada <__cvt+0x6a>
 800eb0e:	7803      	ldrb	r3, [r0, #0]
 800eb10:	2b30      	cmp	r3, #48	@ 0x30
 800eb12:	d10a      	bne.n	800eb2a <__cvt+0xba>
 800eb14:	2200      	movs	r2, #0
 800eb16:	2300      	movs	r3, #0
 800eb18:	4630      	mov	r0, r6
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	f7f1 ffdc 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb20:	b918      	cbnz	r0, 800eb2a <__cvt+0xba>
 800eb22:	f1c4 0401 	rsb	r4, r4, #1
 800eb26:	f8ca 4000 	str.w	r4, [sl]
 800eb2a:	f8da 3000 	ldr.w	r3, [sl]
 800eb2e:	4499      	add	r9, r3
 800eb30:	e7d3      	b.n	800eada <__cvt+0x6a>
 800eb32:	1c59      	adds	r1, r3, #1
 800eb34:	9103      	str	r1, [sp, #12]
 800eb36:	701a      	strb	r2, [r3, #0]
 800eb38:	e7d9      	b.n	800eaee <__cvt+0x7e>

0800eb3a <__exponent>:
 800eb3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb3c:	2900      	cmp	r1, #0
 800eb3e:	bfba      	itte	lt
 800eb40:	4249      	neglt	r1, r1
 800eb42:	232d      	movlt	r3, #45	@ 0x2d
 800eb44:	232b      	movge	r3, #43	@ 0x2b
 800eb46:	2909      	cmp	r1, #9
 800eb48:	7002      	strb	r2, [r0, #0]
 800eb4a:	7043      	strb	r3, [r0, #1]
 800eb4c:	dd29      	ble.n	800eba2 <__exponent+0x68>
 800eb4e:	f10d 0307 	add.w	r3, sp, #7
 800eb52:	461d      	mov	r5, r3
 800eb54:	270a      	movs	r7, #10
 800eb56:	461a      	mov	r2, r3
 800eb58:	fbb1 f6f7 	udiv	r6, r1, r7
 800eb5c:	fb07 1416 	mls	r4, r7, r6, r1
 800eb60:	3430      	adds	r4, #48	@ 0x30
 800eb62:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eb66:	460c      	mov	r4, r1
 800eb68:	2c63      	cmp	r4, #99	@ 0x63
 800eb6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb6e:	4631      	mov	r1, r6
 800eb70:	dcf1      	bgt.n	800eb56 <__exponent+0x1c>
 800eb72:	3130      	adds	r1, #48	@ 0x30
 800eb74:	1e94      	subs	r4, r2, #2
 800eb76:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eb7a:	1c41      	adds	r1, r0, #1
 800eb7c:	4623      	mov	r3, r4
 800eb7e:	42ab      	cmp	r3, r5
 800eb80:	d30a      	bcc.n	800eb98 <__exponent+0x5e>
 800eb82:	f10d 0309 	add.w	r3, sp, #9
 800eb86:	1a9b      	subs	r3, r3, r2
 800eb88:	42ac      	cmp	r4, r5
 800eb8a:	bf88      	it	hi
 800eb8c:	2300      	movhi	r3, #0
 800eb8e:	3302      	adds	r3, #2
 800eb90:	4403      	add	r3, r0
 800eb92:	1a18      	subs	r0, r3, r0
 800eb94:	b003      	add	sp, #12
 800eb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb98:	f813 6b01 	ldrb.w	r6, [r3], #1
 800eb9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800eba0:	e7ed      	b.n	800eb7e <__exponent+0x44>
 800eba2:	2330      	movs	r3, #48	@ 0x30
 800eba4:	3130      	adds	r1, #48	@ 0x30
 800eba6:	7083      	strb	r3, [r0, #2]
 800eba8:	70c1      	strb	r1, [r0, #3]
 800ebaa:	1d03      	adds	r3, r0, #4
 800ebac:	e7f1      	b.n	800eb92 <__exponent+0x58>
	...

0800ebb0 <_printf_float>:
 800ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb4:	b08d      	sub	sp, #52	@ 0x34
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ebbc:	4616      	mov	r6, r2
 800ebbe:	461f      	mov	r7, r3
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	f000 fddf 	bl	800f784 <_localeconv_r>
 800ebc6:	6803      	ldr	r3, [r0, #0]
 800ebc8:	9304      	str	r3, [sp, #16]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7f1 fb58 	bl	8000280 <strlen>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebd4:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd8:	9005      	str	r0, [sp, #20]
 800ebda:	3307      	adds	r3, #7
 800ebdc:	f023 0307 	bic.w	r3, r3, #7
 800ebe0:	f103 0208 	add.w	r2, r3, #8
 800ebe4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ebe8:	f8d4 b000 	ldr.w	fp, [r4]
 800ebec:	f8c8 2000 	str.w	r2, [r8]
 800ebf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebf4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ebf8:	9307      	str	r3, [sp, #28]
 800ebfa:	f8cd 8018 	str.w	r8, [sp, #24]
 800ebfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ec02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec06:	4b9c      	ldr	r3, [pc, #624]	@ (800ee78 <_printf_float+0x2c8>)
 800ec08:	f04f 32ff 	mov.w	r2, #4294967295
 800ec0c:	f7f1 ff96 	bl	8000b3c <__aeabi_dcmpun>
 800ec10:	bb70      	cbnz	r0, 800ec70 <_printf_float+0xc0>
 800ec12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec16:	4b98      	ldr	r3, [pc, #608]	@ (800ee78 <_printf_float+0x2c8>)
 800ec18:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1c:	f7f1 ff70 	bl	8000b00 <__aeabi_dcmple>
 800ec20:	bb30      	cbnz	r0, 800ec70 <_printf_float+0xc0>
 800ec22:	2200      	movs	r2, #0
 800ec24:	2300      	movs	r3, #0
 800ec26:	4640      	mov	r0, r8
 800ec28:	4649      	mov	r1, r9
 800ec2a:	f7f1 ff5f 	bl	8000aec <__aeabi_dcmplt>
 800ec2e:	b110      	cbz	r0, 800ec36 <_printf_float+0x86>
 800ec30:	232d      	movs	r3, #45	@ 0x2d
 800ec32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec36:	4a91      	ldr	r2, [pc, #580]	@ (800ee7c <_printf_float+0x2cc>)
 800ec38:	4b91      	ldr	r3, [pc, #580]	@ (800ee80 <_printf_float+0x2d0>)
 800ec3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ec3e:	bf94      	ite	ls
 800ec40:	4690      	movls	r8, r2
 800ec42:	4698      	movhi	r8, r3
 800ec44:	2303      	movs	r3, #3
 800ec46:	6123      	str	r3, [r4, #16]
 800ec48:	f02b 0304 	bic.w	r3, fp, #4
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	f04f 0900 	mov.w	r9, #0
 800ec52:	9700      	str	r7, [sp, #0]
 800ec54:	4633      	mov	r3, r6
 800ec56:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ec58:	4621      	mov	r1, r4
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f000 f9d2 	bl	800f004 <_printf_common>
 800ec60:	3001      	adds	r0, #1
 800ec62:	f040 808d 	bne.w	800ed80 <_printf_float+0x1d0>
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6a:	b00d      	add	sp, #52	@ 0x34
 800ec6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec70:	4642      	mov	r2, r8
 800ec72:	464b      	mov	r3, r9
 800ec74:	4640      	mov	r0, r8
 800ec76:	4649      	mov	r1, r9
 800ec78:	f7f1 ff60 	bl	8000b3c <__aeabi_dcmpun>
 800ec7c:	b140      	cbz	r0, 800ec90 <_printf_float+0xe0>
 800ec7e:	464b      	mov	r3, r9
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	bfbc      	itt	lt
 800ec84:	232d      	movlt	r3, #45	@ 0x2d
 800ec86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ec8a:	4a7e      	ldr	r2, [pc, #504]	@ (800ee84 <_printf_float+0x2d4>)
 800ec8c:	4b7e      	ldr	r3, [pc, #504]	@ (800ee88 <_printf_float+0x2d8>)
 800ec8e:	e7d4      	b.n	800ec3a <_printf_float+0x8a>
 800ec90:	6863      	ldr	r3, [r4, #4]
 800ec92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ec96:	9206      	str	r2, [sp, #24]
 800ec98:	1c5a      	adds	r2, r3, #1
 800ec9a:	d13b      	bne.n	800ed14 <_printf_float+0x164>
 800ec9c:	2306      	movs	r3, #6
 800ec9e:	6063      	str	r3, [r4, #4]
 800eca0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eca4:	2300      	movs	r3, #0
 800eca6:	6022      	str	r2, [r4, #0]
 800eca8:	9303      	str	r3, [sp, #12]
 800ecaa:	ab0a      	add	r3, sp, #40	@ 0x28
 800ecac:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ecb0:	ab09      	add	r3, sp, #36	@ 0x24
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	6861      	ldr	r1, [r4, #4]
 800ecb6:	ec49 8b10 	vmov	d0, r8, r9
 800ecba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	f7ff fed6 	bl	800ea70 <__cvt>
 800ecc4:	9b06      	ldr	r3, [sp, #24]
 800ecc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecc8:	2b47      	cmp	r3, #71	@ 0x47
 800ecca:	4680      	mov	r8, r0
 800eccc:	d129      	bne.n	800ed22 <_printf_float+0x172>
 800ecce:	1cc8      	adds	r0, r1, #3
 800ecd0:	db02      	blt.n	800ecd8 <_printf_float+0x128>
 800ecd2:	6863      	ldr	r3, [r4, #4]
 800ecd4:	4299      	cmp	r1, r3
 800ecd6:	dd41      	ble.n	800ed5c <_printf_float+0x1ac>
 800ecd8:	f1aa 0a02 	sub.w	sl, sl, #2
 800ecdc:	fa5f fa8a 	uxtb.w	sl, sl
 800ece0:	3901      	subs	r1, #1
 800ece2:	4652      	mov	r2, sl
 800ece4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ece8:	9109      	str	r1, [sp, #36]	@ 0x24
 800ecea:	f7ff ff26 	bl	800eb3a <__exponent>
 800ecee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecf0:	1813      	adds	r3, r2, r0
 800ecf2:	2a01      	cmp	r2, #1
 800ecf4:	4681      	mov	r9, r0
 800ecf6:	6123      	str	r3, [r4, #16]
 800ecf8:	dc02      	bgt.n	800ed00 <_printf_float+0x150>
 800ecfa:	6822      	ldr	r2, [r4, #0]
 800ecfc:	07d2      	lsls	r2, r2, #31
 800ecfe:	d501      	bpl.n	800ed04 <_printf_float+0x154>
 800ed00:	3301      	adds	r3, #1
 800ed02:	6123      	str	r3, [r4, #16]
 800ed04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d0a2      	beq.n	800ec52 <_printf_float+0xa2>
 800ed0c:	232d      	movs	r3, #45	@ 0x2d
 800ed0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed12:	e79e      	b.n	800ec52 <_printf_float+0xa2>
 800ed14:	9a06      	ldr	r2, [sp, #24]
 800ed16:	2a47      	cmp	r2, #71	@ 0x47
 800ed18:	d1c2      	bne.n	800eca0 <_printf_float+0xf0>
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d1c0      	bne.n	800eca0 <_printf_float+0xf0>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e7bd      	b.n	800ec9e <_printf_float+0xee>
 800ed22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ed26:	d9db      	bls.n	800ece0 <_printf_float+0x130>
 800ed28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ed2c:	d118      	bne.n	800ed60 <_printf_float+0x1b0>
 800ed2e:	2900      	cmp	r1, #0
 800ed30:	6863      	ldr	r3, [r4, #4]
 800ed32:	dd0b      	ble.n	800ed4c <_printf_float+0x19c>
 800ed34:	6121      	str	r1, [r4, #16]
 800ed36:	b913      	cbnz	r3, 800ed3e <_printf_float+0x18e>
 800ed38:	6822      	ldr	r2, [r4, #0]
 800ed3a:	07d0      	lsls	r0, r2, #31
 800ed3c:	d502      	bpl.n	800ed44 <_printf_float+0x194>
 800ed3e:	3301      	adds	r3, #1
 800ed40:	440b      	add	r3, r1
 800ed42:	6123      	str	r3, [r4, #16]
 800ed44:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ed46:	f04f 0900 	mov.w	r9, #0
 800ed4a:	e7db      	b.n	800ed04 <_printf_float+0x154>
 800ed4c:	b913      	cbnz	r3, 800ed54 <_printf_float+0x1a4>
 800ed4e:	6822      	ldr	r2, [r4, #0]
 800ed50:	07d2      	lsls	r2, r2, #31
 800ed52:	d501      	bpl.n	800ed58 <_printf_float+0x1a8>
 800ed54:	3302      	adds	r3, #2
 800ed56:	e7f4      	b.n	800ed42 <_printf_float+0x192>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e7f2      	b.n	800ed42 <_printf_float+0x192>
 800ed5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ed60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed62:	4299      	cmp	r1, r3
 800ed64:	db05      	blt.n	800ed72 <_printf_float+0x1c2>
 800ed66:	6823      	ldr	r3, [r4, #0]
 800ed68:	6121      	str	r1, [r4, #16]
 800ed6a:	07d8      	lsls	r0, r3, #31
 800ed6c:	d5ea      	bpl.n	800ed44 <_printf_float+0x194>
 800ed6e:	1c4b      	adds	r3, r1, #1
 800ed70:	e7e7      	b.n	800ed42 <_printf_float+0x192>
 800ed72:	2900      	cmp	r1, #0
 800ed74:	bfd4      	ite	le
 800ed76:	f1c1 0202 	rsble	r2, r1, #2
 800ed7a:	2201      	movgt	r2, #1
 800ed7c:	4413      	add	r3, r2
 800ed7e:	e7e0      	b.n	800ed42 <_printf_float+0x192>
 800ed80:	6823      	ldr	r3, [r4, #0]
 800ed82:	055a      	lsls	r2, r3, #21
 800ed84:	d407      	bmi.n	800ed96 <_printf_float+0x1e6>
 800ed86:	6923      	ldr	r3, [r4, #16]
 800ed88:	4642      	mov	r2, r8
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	47b8      	blx	r7
 800ed90:	3001      	adds	r0, #1
 800ed92:	d12b      	bne.n	800edec <_printf_float+0x23c>
 800ed94:	e767      	b.n	800ec66 <_printf_float+0xb6>
 800ed96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ed9a:	f240 80dd 	bls.w	800ef58 <_printf_float+0x3a8>
 800ed9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eda2:	2200      	movs	r2, #0
 800eda4:	2300      	movs	r3, #0
 800eda6:	f7f1 fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d033      	beq.n	800ee16 <_printf_float+0x266>
 800edae:	4a37      	ldr	r2, [pc, #220]	@ (800ee8c <_printf_float+0x2dc>)
 800edb0:	2301      	movs	r3, #1
 800edb2:	4631      	mov	r1, r6
 800edb4:	4628      	mov	r0, r5
 800edb6:	47b8      	blx	r7
 800edb8:	3001      	adds	r0, #1
 800edba:	f43f af54 	beq.w	800ec66 <_printf_float+0xb6>
 800edbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800edc2:	4543      	cmp	r3, r8
 800edc4:	db02      	blt.n	800edcc <_printf_float+0x21c>
 800edc6:	6823      	ldr	r3, [r4, #0]
 800edc8:	07d8      	lsls	r0, r3, #31
 800edca:	d50f      	bpl.n	800edec <_printf_float+0x23c>
 800edcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edd0:	4631      	mov	r1, r6
 800edd2:	4628      	mov	r0, r5
 800edd4:	47b8      	blx	r7
 800edd6:	3001      	adds	r0, #1
 800edd8:	f43f af45 	beq.w	800ec66 <_printf_float+0xb6>
 800eddc:	f04f 0900 	mov.w	r9, #0
 800ede0:	f108 38ff 	add.w	r8, r8, #4294967295
 800ede4:	f104 0a1a 	add.w	sl, r4, #26
 800ede8:	45c8      	cmp	r8, r9
 800edea:	dc09      	bgt.n	800ee00 <_printf_float+0x250>
 800edec:	6823      	ldr	r3, [r4, #0]
 800edee:	079b      	lsls	r3, r3, #30
 800edf0:	f100 8103 	bmi.w	800effa <_printf_float+0x44a>
 800edf4:	68e0      	ldr	r0, [r4, #12]
 800edf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edf8:	4298      	cmp	r0, r3
 800edfa:	bfb8      	it	lt
 800edfc:	4618      	movlt	r0, r3
 800edfe:	e734      	b.n	800ec6a <_printf_float+0xba>
 800ee00:	2301      	movs	r3, #1
 800ee02:	4652      	mov	r2, sl
 800ee04:	4631      	mov	r1, r6
 800ee06:	4628      	mov	r0, r5
 800ee08:	47b8      	blx	r7
 800ee0a:	3001      	adds	r0, #1
 800ee0c:	f43f af2b 	beq.w	800ec66 <_printf_float+0xb6>
 800ee10:	f109 0901 	add.w	r9, r9, #1
 800ee14:	e7e8      	b.n	800ede8 <_printf_float+0x238>
 800ee16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	dc39      	bgt.n	800ee90 <_printf_float+0x2e0>
 800ee1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ee8c <_printf_float+0x2dc>)
 800ee1e:	2301      	movs	r3, #1
 800ee20:	4631      	mov	r1, r6
 800ee22:	4628      	mov	r0, r5
 800ee24:	47b8      	blx	r7
 800ee26:	3001      	adds	r0, #1
 800ee28:	f43f af1d 	beq.w	800ec66 <_printf_float+0xb6>
 800ee2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ee30:	ea59 0303 	orrs.w	r3, r9, r3
 800ee34:	d102      	bne.n	800ee3c <_printf_float+0x28c>
 800ee36:	6823      	ldr	r3, [r4, #0]
 800ee38:	07d9      	lsls	r1, r3, #31
 800ee3a:	d5d7      	bpl.n	800edec <_printf_float+0x23c>
 800ee3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee40:	4631      	mov	r1, r6
 800ee42:	4628      	mov	r0, r5
 800ee44:	47b8      	blx	r7
 800ee46:	3001      	adds	r0, #1
 800ee48:	f43f af0d 	beq.w	800ec66 <_printf_float+0xb6>
 800ee4c:	f04f 0a00 	mov.w	sl, #0
 800ee50:	f104 0b1a 	add.w	fp, r4, #26
 800ee54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee56:	425b      	negs	r3, r3
 800ee58:	4553      	cmp	r3, sl
 800ee5a:	dc01      	bgt.n	800ee60 <_printf_float+0x2b0>
 800ee5c:	464b      	mov	r3, r9
 800ee5e:	e793      	b.n	800ed88 <_printf_float+0x1d8>
 800ee60:	2301      	movs	r3, #1
 800ee62:	465a      	mov	r2, fp
 800ee64:	4631      	mov	r1, r6
 800ee66:	4628      	mov	r0, r5
 800ee68:	47b8      	blx	r7
 800ee6a:	3001      	adds	r0, #1
 800ee6c:	f43f aefb 	beq.w	800ec66 <_printf_float+0xb6>
 800ee70:	f10a 0a01 	add.w	sl, sl, #1
 800ee74:	e7ee      	b.n	800ee54 <_printf_float+0x2a4>
 800ee76:	bf00      	nop
 800ee78:	7fefffff 	.word	0x7fefffff
 800ee7c:	08011c6c 	.word	0x08011c6c
 800ee80:	08011c70 	.word	0x08011c70
 800ee84:	08011c74 	.word	0x08011c74
 800ee88:	08011c78 	.word	0x08011c78
 800ee8c:	08011c7c 	.word	0x08011c7c
 800ee90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ee92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ee96:	4553      	cmp	r3, sl
 800ee98:	bfa8      	it	ge
 800ee9a:	4653      	movge	r3, sl
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	4699      	mov	r9, r3
 800eea0:	dc36      	bgt.n	800ef10 <_printf_float+0x360>
 800eea2:	f04f 0b00 	mov.w	fp, #0
 800eea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eeaa:	f104 021a 	add.w	r2, r4, #26
 800eeae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eeb0:	9306      	str	r3, [sp, #24]
 800eeb2:	eba3 0309 	sub.w	r3, r3, r9
 800eeb6:	455b      	cmp	r3, fp
 800eeb8:	dc31      	bgt.n	800ef1e <_printf_float+0x36e>
 800eeba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eebc:	459a      	cmp	sl, r3
 800eebe:	dc3a      	bgt.n	800ef36 <_printf_float+0x386>
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	07da      	lsls	r2, r3, #31
 800eec4:	d437      	bmi.n	800ef36 <_printf_float+0x386>
 800eec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eec8:	ebaa 0903 	sub.w	r9, sl, r3
 800eecc:	9b06      	ldr	r3, [sp, #24]
 800eece:	ebaa 0303 	sub.w	r3, sl, r3
 800eed2:	4599      	cmp	r9, r3
 800eed4:	bfa8      	it	ge
 800eed6:	4699      	movge	r9, r3
 800eed8:	f1b9 0f00 	cmp.w	r9, #0
 800eedc:	dc33      	bgt.n	800ef46 <_printf_float+0x396>
 800eede:	f04f 0800 	mov.w	r8, #0
 800eee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eee6:	f104 0b1a 	add.w	fp, r4, #26
 800eeea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeec:	ebaa 0303 	sub.w	r3, sl, r3
 800eef0:	eba3 0309 	sub.w	r3, r3, r9
 800eef4:	4543      	cmp	r3, r8
 800eef6:	f77f af79 	ble.w	800edec <_printf_float+0x23c>
 800eefa:	2301      	movs	r3, #1
 800eefc:	465a      	mov	r2, fp
 800eefe:	4631      	mov	r1, r6
 800ef00:	4628      	mov	r0, r5
 800ef02:	47b8      	blx	r7
 800ef04:	3001      	adds	r0, #1
 800ef06:	f43f aeae 	beq.w	800ec66 <_printf_float+0xb6>
 800ef0a:	f108 0801 	add.w	r8, r8, #1
 800ef0e:	e7ec      	b.n	800eeea <_printf_float+0x33a>
 800ef10:	4642      	mov	r2, r8
 800ef12:	4631      	mov	r1, r6
 800ef14:	4628      	mov	r0, r5
 800ef16:	47b8      	blx	r7
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d1c2      	bne.n	800eea2 <_printf_float+0x2f2>
 800ef1c:	e6a3      	b.n	800ec66 <_printf_float+0xb6>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	4631      	mov	r1, r6
 800ef22:	4628      	mov	r0, r5
 800ef24:	9206      	str	r2, [sp, #24]
 800ef26:	47b8      	blx	r7
 800ef28:	3001      	adds	r0, #1
 800ef2a:	f43f ae9c 	beq.w	800ec66 <_printf_float+0xb6>
 800ef2e:	9a06      	ldr	r2, [sp, #24]
 800ef30:	f10b 0b01 	add.w	fp, fp, #1
 800ef34:	e7bb      	b.n	800eeae <_printf_float+0x2fe>
 800ef36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	47b8      	blx	r7
 800ef40:	3001      	adds	r0, #1
 800ef42:	d1c0      	bne.n	800eec6 <_printf_float+0x316>
 800ef44:	e68f      	b.n	800ec66 <_printf_float+0xb6>
 800ef46:	9a06      	ldr	r2, [sp, #24]
 800ef48:	464b      	mov	r3, r9
 800ef4a:	4442      	add	r2, r8
 800ef4c:	4631      	mov	r1, r6
 800ef4e:	4628      	mov	r0, r5
 800ef50:	47b8      	blx	r7
 800ef52:	3001      	adds	r0, #1
 800ef54:	d1c3      	bne.n	800eede <_printf_float+0x32e>
 800ef56:	e686      	b.n	800ec66 <_printf_float+0xb6>
 800ef58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ef5c:	f1ba 0f01 	cmp.w	sl, #1
 800ef60:	dc01      	bgt.n	800ef66 <_printf_float+0x3b6>
 800ef62:	07db      	lsls	r3, r3, #31
 800ef64:	d536      	bpl.n	800efd4 <_printf_float+0x424>
 800ef66:	2301      	movs	r3, #1
 800ef68:	4642      	mov	r2, r8
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	47b8      	blx	r7
 800ef70:	3001      	adds	r0, #1
 800ef72:	f43f ae78 	beq.w	800ec66 <_printf_float+0xb6>
 800ef76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef7a:	4631      	mov	r1, r6
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	47b8      	blx	r7
 800ef80:	3001      	adds	r0, #1
 800ef82:	f43f ae70 	beq.w	800ec66 <_printf_float+0xb6>
 800ef86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef92:	f7f1 fda1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef96:	b9c0      	cbnz	r0, 800efca <_printf_float+0x41a>
 800ef98:	4653      	mov	r3, sl
 800ef9a:	f108 0201 	add.w	r2, r8, #1
 800ef9e:	4631      	mov	r1, r6
 800efa0:	4628      	mov	r0, r5
 800efa2:	47b8      	blx	r7
 800efa4:	3001      	adds	r0, #1
 800efa6:	d10c      	bne.n	800efc2 <_printf_float+0x412>
 800efa8:	e65d      	b.n	800ec66 <_printf_float+0xb6>
 800efaa:	2301      	movs	r3, #1
 800efac:	465a      	mov	r2, fp
 800efae:	4631      	mov	r1, r6
 800efb0:	4628      	mov	r0, r5
 800efb2:	47b8      	blx	r7
 800efb4:	3001      	adds	r0, #1
 800efb6:	f43f ae56 	beq.w	800ec66 <_printf_float+0xb6>
 800efba:	f108 0801 	add.w	r8, r8, #1
 800efbe:	45d0      	cmp	r8, sl
 800efc0:	dbf3      	blt.n	800efaa <_printf_float+0x3fa>
 800efc2:	464b      	mov	r3, r9
 800efc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800efc8:	e6df      	b.n	800ed8a <_printf_float+0x1da>
 800efca:	f04f 0800 	mov.w	r8, #0
 800efce:	f104 0b1a 	add.w	fp, r4, #26
 800efd2:	e7f4      	b.n	800efbe <_printf_float+0x40e>
 800efd4:	2301      	movs	r3, #1
 800efd6:	4642      	mov	r2, r8
 800efd8:	e7e1      	b.n	800ef9e <_printf_float+0x3ee>
 800efda:	2301      	movs	r3, #1
 800efdc:	464a      	mov	r2, r9
 800efde:	4631      	mov	r1, r6
 800efe0:	4628      	mov	r0, r5
 800efe2:	47b8      	blx	r7
 800efe4:	3001      	adds	r0, #1
 800efe6:	f43f ae3e 	beq.w	800ec66 <_printf_float+0xb6>
 800efea:	f108 0801 	add.w	r8, r8, #1
 800efee:	68e3      	ldr	r3, [r4, #12]
 800eff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eff2:	1a5b      	subs	r3, r3, r1
 800eff4:	4543      	cmp	r3, r8
 800eff6:	dcf0      	bgt.n	800efda <_printf_float+0x42a>
 800eff8:	e6fc      	b.n	800edf4 <_printf_float+0x244>
 800effa:	f04f 0800 	mov.w	r8, #0
 800effe:	f104 0919 	add.w	r9, r4, #25
 800f002:	e7f4      	b.n	800efee <_printf_float+0x43e>

0800f004 <_printf_common>:
 800f004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f008:	4616      	mov	r6, r2
 800f00a:	4698      	mov	r8, r3
 800f00c:	688a      	ldr	r2, [r1, #8]
 800f00e:	690b      	ldr	r3, [r1, #16]
 800f010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f014:	4293      	cmp	r3, r2
 800f016:	bfb8      	it	lt
 800f018:	4613      	movlt	r3, r2
 800f01a:	6033      	str	r3, [r6, #0]
 800f01c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f020:	4607      	mov	r7, r0
 800f022:	460c      	mov	r4, r1
 800f024:	b10a      	cbz	r2, 800f02a <_printf_common+0x26>
 800f026:	3301      	adds	r3, #1
 800f028:	6033      	str	r3, [r6, #0]
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	0699      	lsls	r1, r3, #26
 800f02e:	bf42      	ittt	mi
 800f030:	6833      	ldrmi	r3, [r6, #0]
 800f032:	3302      	addmi	r3, #2
 800f034:	6033      	strmi	r3, [r6, #0]
 800f036:	6825      	ldr	r5, [r4, #0]
 800f038:	f015 0506 	ands.w	r5, r5, #6
 800f03c:	d106      	bne.n	800f04c <_printf_common+0x48>
 800f03e:	f104 0a19 	add.w	sl, r4, #25
 800f042:	68e3      	ldr	r3, [r4, #12]
 800f044:	6832      	ldr	r2, [r6, #0]
 800f046:	1a9b      	subs	r3, r3, r2
 800f048:	42ab      	cmp	r3, r5
 800f04a:	dc26      	bgt.n	800f09a <_printf_common+0x96>
 800f04c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f050:	6822      	ldr	r2, [r4, #0]
 800f052:	3b00      	subs	r3, #0
 800f054:	bf18      	it	ne
 800f056:	2301      	movne	r3, #1
 800f058:	0692      	lsls	r2, r2, #26
 800f05a:	d42b      	bmi.n	800f0b4 <_printf_common+0xb0>
 800f05c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f060:	4641      	mov	r1, r8
 800f062:	4638      	mov	r0, r7
 800f064:	47c8      	blx	r9
 800f066:	3001      	adds	r0, #1
 800f068:	d01e      	beq.n	800f0a8 <_printf_common+0xa4>
 800f06a:	6823      	ldr	r3, [r4, #0]
 800f06c:	6922      	ldr	r2, [r4, #16]
 800f06e:	f003 0306 	and.w	r3, r3, #6
 800f072:	2b04      	cmp	r3, #4
 800f074:	bf02      	ittt	eq
 800f076:	68e5      	ldreq	r5, [r4, #12]
 800f078:	6833      	ldreq	r3, [r6, #0]
 800f07a:	1aed      	subeq	r5, r5, r3
 800f07c:	68a3      	ldr	r3, [r4, #8]
 800f07e:	bf0c      	ite	eq
 800f080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f084:	2500      	movne	r5, #0
 800f086:	4293      	cmp	r3, r2
 800f088:	bfc4      	itt	gt
 800f08a:	1a9b      	subgt	r3, r3, r2
 800f08c:	18ed      	addgt	r5, r5, r3
 800f08e:	2600      	movs	r6, #0
 800f090:	341a      	adds	r4, #26
 800f092:	42b5      	cmp	r5, r6
 800f094:	d11a      	bne.n	800f0cc <_printf_common+0xc8>
 800f096:	2000      	movs	r0, #0
 800f098:	e008      	b.n	800f0ac <_printf_common+0xa8>
 800f09a:	2301      	movs	r3, #1
 800f09c:	4652      	mov	r2, sl
 800f09e:	4641      	mov	r1, r8
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	47c8      	blx	r9
 800f0a4:	3001      	adds	r0, #1
 800f0a6:	d103      	bne.n	800f0b0 <_printf_common+0xac>
 800f0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b0:	3501      	adds	r5, #1
 800f0b2:	e7c6      	b.n	800f042 <_printf_common+0x3e>
 800f0b4:	18e1      	adds	r1, r4, r3
 800f0b6:	1c5a      	adds	r2, r3, #1
 800f0b8:	2030      	movs	r0, #48	@ 0x30
 800f0ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0be:	4422      	add	r2, r4
 800f0c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0c8:	3302      	adds	r3, #2
 800f0ca:	e7c7      	b.n	800f05c <_printf_common+0x58>
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	4622      	mov	r2, r4
 800f0d0:	4641      	mov	r1, r8
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	47c8      	blx	r9
 800f0d6:	3001      	adds	r0, #1
 800f0d8:	d0e6      	beq.n	800f0a8 <_printf_common+0xa4>
 800f0da:	3601      	adds	r6, #1
 800f0dc:	e7d9      	b.n	800f092 <_printf_common+0x8e>
	...

0800f0e0 <_printf_i>:
 800f0e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e4:	7e0f      	ldrb	r7, [r1, #24]
 800f0e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0e8:	2f78      	cmp	r7, #120	@ 0x78
 800f0ea:	4691      	mov	r9, r2
 800f0ec:	4680      	mov	r8, r0
 800f0ee:	460c      	mov	r4, r1
 800f0f0:	469a      	mov	sl, r3
 800f0f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f0f6:	d807      	bhi.n	800f108 <_printf_i+0x28>
 800f0f8:	2f62      	cmp	r7, #98	@ 0x62
 800f0fa:	d80a      	bhi.n	800f112 <_printf_i+0x32>
 800f0fc:	2f00      	cmp	r7, #0
 800f0fe:	f000 80d2 	beq.w	800f2a6 <_printf_i+0x1c6>
 800f102:	2f58      	cmp	r7, #88	@ 0x58
 800f104:	f000 80b9 	beq.w	800f27a <_printf_i+0x19a>
 800f108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f10c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f110:	e03a      	b.n	800f188 <_printf_i+0xa8>
 800f112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f116:	2b15      	cmp	r3, #21
 800f118:	d8f6      	bhi.n	800f108 <_printf_i+0x28>
 800f11a:	a101      	add	r1, pc, #4	@ (adr r1, 800f120 <_printf_i+0x40>)
 800f11c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f120:	0800f179 	.word	0x0800f179
 800f124:	0800f18d 	.word	0x0800f18d
 800f128:	0800f109 	.word	0x0800f109
 800f12c:	0800f109 	.word	0x0800f109
 800f130:	0800f109 	.word	0x0800f109
 800f134:	0800f109 	.word	0x0800f109
 800f138:	0800f18d 	.word	0x0800f18d
 800f13c:	0800f109 	.word	0x0800f109
 800f140:	0800f109 	.word	0x0800f109
 800f144:	0800f109 	.word	0x0800f109
 800f148:	0800f109 	.word	0x0800f109
 800f14c:	0800f28d 	.word	0x0800f28d
 800f150:	0800f1b7 	.word	0x0800f1b7
 800f154:	0800f247 	.word	0x0800f247
 800f158:	0800f109 	.word	0x0800f109
 800f15c:	0800f109 	.word	0x0800f109
 800f160:	0800f2af 	.word	0x0800f2af
 800f164:	0800f109 	.word	0x0800f109
 800f168:	0800f1b7 	.word	0x0800f1b7
 800f16c:	0800f109 	.word	0x0800f109
 800f170:	0800f109 	.word	0x0800f109
 800f174:	0800f24f 	.word	0x0800f24f
 800f178:	6833      	ldr	r3, [r6, #0]
 800f17a:	1d1a      	adds	r2, r3, #4
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	6032      	str	r2, [r6, #0]
 800f180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f188:	2301      	movs	r3, #1
 800f18a:	e09d      	b.n	800f2c8 <_printf_i+0x1e8>
 800f18c:	6833      	ldr	r3, [r6, #0]
 800f18e:	6820      	ldr	r0, [r4, #0]
 800f190:	1d19      	adds	r1, r3, #4
 800f192:	6031      	str	r1, [r6, #0]
 800f194:	0606      	lsls	r6, r0, #24
 800f196:	d501      	bpl.n	800f19c <_printf_i+0xbc>
 800f198:	681d      	ldr	r5, [r3, #0]
 800f19a:	e003      	b.n	800f1a4 <_printf_i+0xc4>
 800f19c:	0645      	lsls	r5, r0, #25
 800f19e:	d5fb      	bpl.n	800f198 <_printf_i+0xb8>
 800f1a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1a4:	2d00      	cmp	r5, #0
 800f1a6:	da03      	bge.n	800f1b0 <_printf_i+0xd0>
 800f1a8:	232d      	movs	r3, #45	@ 0x2d
 800f1aa:	426d      	negs	r5, r5
 800f1ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1b0:	4859      	ldr	r0, [pc, #356]	@ (800f318 <_printf_i+0x238>)
 800f1b2:	230a      	movs	r3, #10
 800f1b4:	e011      	b.n	800f1da <_printf_i+0xfa>
 800f1b6:	6821      	ldr	r1, [r4, #0]
 800f1b8:	6833      	ldr	r3, [r6, #0]
 800f1ba:	0608      	lsls	r0, r1, #24
 800f1bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1c0:	d402      	bmi.n	800f1c8 <_printf_i+0xe8>
 800f1c2:	0649      	lsls	r1, r1, #25
 800f1c4:	bf48      	it	mi
 800f1c6:	b2ad      	uxthmi	r5, r5
 800f1c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1ca:	4853      	ldr	r0, [pc, #332]	@ (800f318 <_printf_i+0x238>)
 800f1cc:	6033      	str	r3, [r6, #0]
 800f1ce:	bf14      	ite	ne
 800f1d0:	230a      	movne	r3, #10
 800f1d2:	2308      	moveq	r3, #8
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1da:	6866      	ldr	r6, [r4, #4]
 800f1dc:	60a6      	str	r6, [r4, #8]
 800f1de:	2e00      	cmp	r6, #0
 800f1e0:	bfa2      	ittt	ge
 800f1e2:	6821      	ldrge	r1, [r4, #0]
 800f1e4:	f021 0104 	bicge.w	r1, r1, #4
 800f1e8:	6021      	strge	r1, [r4, #0]
 800f1ea:	b90d      	cbnz	r5, 800f1f0 <_printf_i+0x110>
 800f1ec:	2e00      	cmp	r6, #0
 800f1ee:	d04b      	beq.n	800f288 <_printf_i+0x1a8>
 800f1f0:	4616      	mov	r6, r2
 800f1f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1f6:	fb03 5711 	mls	r7, r3, r1, r5
 800f1fa:	5dc7      	ldrb	r7, [r0, r7]
 800f1fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f200:	462f      	mov	r7, r5
 800f202:	42bb      	cmp	r3, r7
 800f204:	460d      	mov	r5, r1
 800f206:	d9f4      	bls.n	800f1f2 <_printf_i+0x112>
 800f208:	2b08      	cmp	r3, #8
 800f20a:	d10b      	bne.n	800f224 <_printf_i+0x144>
 800f20c:	6823      	ldr	r3, [r4, #0]
 800f20e:	07df      	lsls	r7, r3, #31
 800f210:	d508      	bpl.n	800f224 <_printf_i+0x144>
 800f212:	6923      	ldr	r3, [r4, #16]
 800f214:	6861      	ldr	r1, [r4, #4]
 800f216:	4299      	cmp	r1, r3
 800f218:	bfde      	ittt	le
 800f21a:	2330      	movle	r3, #48	@ 0x30
 800f21c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f220:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f224:	1b92      	subs	r2, r2, r6
 800f226:	6122      	str	r2, [r4, #16]
 800f228:	f8cd a000 	str.w	sl, [sp]
 800f22c:	464b      	mov	r3, r9
 800f22e:	aa03      	add	r2, sp, #12
 800f230:	4621      	mov	r1, r4
 800f232:	4640      	mov	r0, r8
 800f234:	f7ff fee6 	bl	800f004 <_printf_common>
 800f238:	3001      	adds	r0, #1
 800f23a:	d14a      	bne.n	800f2d2 <_printf_i+0x1f2>
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295
 800f240:	b004      	add	sp, #16
 800f242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f246:	6823      	ldr	r3, [r4, #0]
 800f248:	f043 0320 	orr.w	r3, r3, #32
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	4833      	ldr	r0, [pc, #204]	@ (800f31c <_printf_i+0x23c>)
 800f250:	2778      	movs	r7, #120	@ 0x78
 800f252:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	6831      	ldr	r1, [r6, #0]
 800f25a:	061f      	lsls	r7, r3, #24
 800f25c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f260:	d402      	bmi.n	800f268 <_printf_i+0x188>
 800f262:	065f      	lsls	r7, r3, #25
 800f264:	bf48      	it	mi
 800f266:	b2ad      	uxthmi	r5, r5
 800f268:	6031      	str	r1, [r6, #0]
 800f26a:	07d9      	lsls	r1, r3, #31
 800f26c:	bf44      	itt	mi
 800f26e:	f043 0320 	orrmi.w	r3, r3, #32
 800f272:	6023      	strmi	r3, [r4, #0]
 800f274:	b11d      	cbz	r5, 800f27e <_printf_i+0x19e>
 800f276:	2310      	movs	r3, #16
 800f278:	e7ac      	b.n	800f1d4 <_printf_i+0xf4>
 800f27a:	4827      	ldr	r0, [pc, #156]	@ (800f318 <_printf_i+0x238>)
 800f27c:	e7e9      	b.n	800f252 <_printf_i+0x172>
 800f27e:	6823      	ldr	r3, [r4, #0]
 800f280:	f023 0320 	bic.w	r3, r3, #32
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	e7f6      	b.n	800f276 <_printf_i+0x196>
 800f288:	4616      	mov	r6, r2
 800f28a:	e7bd      	b.n	800f208 <_printf_i+0x128>
 800f28c:	6833      	ldr	r3, [r6, #0]
 800f28e:	6825      	ldr	r5, [r4, #0]
 800f290:	6961      	ldr	r1, [r4, #20]
 800f292:	1d18      	adds	r0, r3, #4
 800f294:	6030      	str	r0, [r6, #0]
 800f296:	062e      	lsls	r6, r5, #24
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	d501      	bpl.n	800f2a0 <_printf_i+0x1c0>
 800f29c:	6019      	str	r1, [r3, #0]
 800f29e:	e002      	b.n	800f2a6 <_printf_i+0x1c6>
 800f2a0:	0668      	lsls	r0, r5, #25
 800f2a2:	d5fb      	bpl.n	800f29c <_printf_i+0x1bc>
 800f2a4:	8019      	strh	r1, [r3, #0]
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	6123      	str	r3, [r4, #16]
 800f2aa:	4616      	mov	r6, r2
 800f2ac:	e7bc      	b.n	800f228 <_printf_i+0x148>
 800f2ae:	6833      	ldr	r3, [r6, #0]
 800f2b0:	1d1a      	adds	r2, r3, #4
 800f2b2:	6032      	str	r2, [r6, #0]
 800f2b4:	681e      	ldr	r6, [r3, #0]
 800f2b6:	6862      	ldr	r2, [r4, #4]
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	f7f0 ff90 	bl	80001e0 <memchr>
 800f2c0:	b108      	cbz	r0, 800f2c6 <_printf_i+0x1e6>
 800f2c2:	1b80      	subs	r0, r0, r6
 800f2c4:	6060      	str	r0, [r4, #4]
 800f2c6:	6863      	ldr	r3, [r4, #4]
 800f2c8:	6123      	str	r3, [r4, #16]
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2d0:	e7aa      	b.n	800f228 <_printf_i+0x148>
 800f2d2:	6923      	ldr	r3, [r4, #16]
 800f2d4:	4632      	mov	r2, r6
 800f2d6:	4649      	mov	r1, r9
 800f2d8:	4640      	mov	r0, r8
 800f2da:	47d0      	blx	sl
 800f2dc:	3001      	adds	r0, #1
 800f2de:	d0ad      	beq.n	800f23c <_printf_i+0x15c>
 800f2e0:	6823      	ldr	r3, [r4, #0]
 800f2e2:	079b      	lsls	r3, r3, #30
 800f2e4:	d413      	bmi.n	800f30e <_printf_i+0x22e>
 800f2e6:	68e0      	ldr	r0, [r4, #12]
 800f2e8:	9b03      	ldr	r3, [sp, #12]
 800f2ea:	4298      	cmp	r0, r3
 800f2ec:	bfb8      	it	lt
 800f2ee:	4618      	movlt	r0, r3
 800f2f0:	e7a6      	b.n	800f240 <_printf_i+0x160>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	4640      	mov	r0, r8
 800f2fa:	47d0      	blx	sl
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	d09d      	beq.n	800f23c <_printf_i+0x15c>
 800f300:	3501      	adds	r5, #1
 800f302:	68e3      	ldr	r3, [r4, #12]
 800f304:	9903      	ldr	r1, [sp, #12]
 800f306:	1a5b      	subs	r3, r3, r1
 800f308:	42ab      	cmp	r3, r5
 800f30a:	dcf2      	bgt.n	800f2f2 <_printf_i+0x212>
 800f30c:	e7eb      	b.n	800f2e6 <_printf_i+0x206>
 800f30e:	2500      	movs	r5, #0
 800f310:	f104 0619 	add.w	r6, r4, #25
 800f314:	e7f5      	b.n	800f302 <_printf_i+0x222>
 800f316:	bf00      	nop
 800f318:	08011c7e 	.word	0x08011c7e
 800f31c:	08011c8f 	.word	0x08011c8f

0800f320 <std>:
 800f320:	2300      	movs	r3, #0
 800f322:	b510      	push	{r4, lr}
 800f324:	4604      	mov	r4, r0
 800f326:	e9c0 3300 	strd	r3, r3, [r0]
 800f32a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f32e:	6083      	str	r3, [r0, #8]
 800f330:	8181      	strh	r1, [r0, #12]
 800f332:	6643      	str	r3, [r0, #100]	@ 0x64
 800f334:	81c2      	strh	r2, [r0, #14]
 800f336:	6183      	str	r3, [r0, #24]
 800f338:	4619      	mov	r1, r3
 800f33a:	2208      	movs	r2, #8
 800f33c:	305c      	adds	r0, #92	@ 0x5c
 800f33e:	f000 fa19 	bl	800f774 <memset>
 800f342:	4b0d      	ldr	r3, [pc, #52]	@ (800f378 <std+0x58>)
 800f344:	6263      	str	r3, [r4, #36]	@ 0x24
 800f346:	4b0d      	ldr	r3, [pc, #52]	@ (800f37c <std+0x5c>)
 800f348:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f34a:	4b0d      	ldr	r3, [pc, #52]	@ (800f380 <std+0x60>)
 800f34c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f34e:	4b0d      	ldr	r3, [pc, #52]	@ (800f384 <std+0x64>)
 800f350:	6323      	str	r3, [r4, #48]	@ 0x30
 800f352:	4b0d      	ldr	r3, [pc, #52]	@ (800f388 <std+0x68>)
 800f354:	6224      	str	r4, [r4, #32]
 800f356:	429c      	cmp	r4, r3
 800f358:	d006      	beq.n	800f368 <std+0x48>
 800f35a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f35e:	4294      	cmp	r4, r2
 800f360:	d002      	beq.n	800f368 <std+0x48>
 800f362:	33d0      	adds	r3, #208	@ 0xd0
 800f364:	429c      	cmp	r4, r3
 800f366:	d105      	bne.n	800f374 <std+0x54>
 800f368:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f370:	f000 ba8c 	b.w	800f88c <__retarget_lock_init_recursive>
 800f374:	bd10      	pop	{r4, pc}
 800f376:	bf00      	nop
 800f378:	0800f5c5 	.word	0x0800f5c5
 800f37c:	0800f5e7 	.word	0x0800f5e7
 800f380:	0800f61f 	.word	0x0800f61f
 800f384:	0800f643 	.word	0x0800f643
 800f388:	20000c3c 	.word	0x20000c3c

0800f38c <stdio_exit_handler>:
 800f38c:	4a02      	ldr	r2, [pc, #8]	@ (800f398 <stdio_exit_handler+0xc>)
 800f38e:	4903      	ldr	r1, [pc, #12]	@ (800f39c <stdio_exit_handler+0x10>)
 800f390:	4803      	ldr	r0, [pc, #12]	@ (800f3a0 <stdio_exit_handler+0x14>)
 800f392:	f000 b869 	b.w	800f468 <_fwalk_sglue>
 800f396:	bf00      	nop
 800f398:	2000002c 	.word	0x2000002c
 800f39c:	0801131d 	.word	0x0801131d
 800f3a0:	2000003c 	.word	0x2000003c

0800f3a4 <cleanup_stdio>:
 800f3a4:	6841      	ldr	r1, [r0, #4]
 800f3a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f3d8 <cleanup_stdio+0x34>)
 800f3a8:	4299      	cmp	r1, r3
 800f3aa:	b510      	push	{r4, lr}
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	d001      	beq.n	800f3b4 <cleanup_stdio+0x10>
 800f3b0:	f001 ffb4 	bl	801131c <_fflush_r>
 800f3b4:	68a1      	ldr	r1, [r4, #8]
 800f3b6:	4b09      	ldr	r3, [pc, #36]	@ (800f3dc <cleanup_stdio+0x38>)
 800f3b8:	4299      	cmp	r1, r3
 800f3ba:	d002      	beq.n	800f3c2 <cleanup_stdio+0x1e>
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f001 ffad 	bl	801131c <_fflush_r>
 800f3c2:	68e1      	ldr	r1, [r4, #12]
 800f3c4:	4b06      	ldr	r3, [pc, #24]	@ (800f3e0 <cleanup_stdio+0x3c>)
 800f3c6:	4299      	cmp	r1, r3
 800f3c8:	d004      	beq.n	800f3d4 <cleanup_stdio+0x30>
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3d0:	f001 bfa4 	b.w	801131c <_fflush_r>
 800f3d4:	bd10      	pop	{r4, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20000c3c 	.word	0x20000c3c
 800f3dc:	20000ca4 	.word	0x20000ca4
 800f3e0:	20000d0c 	.word	0x20000d0c

0800f3e4 <global_stdio_init.part.0>:
 800f3e4:	b510      	push	{r4, lr}
 800f3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f414 <global_stdio_init.part.0+0x30>)
 800f3e8:	4c0b      	ldr	r4, [pc, #44]	@ (800f418 <global_stdio_init.part.0+0x34>)
 800f3ea:	4a0c      	ldr	r2, [pc, #48]	@ (800f41c <global_stdio_init.part.0+0x38>)
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	2104      	movs	r1, #4
 800f3f4:	f7ff ff94 	bl	800f320 <std>
 800f3f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	2109      	movs	r1, #9
 800f400:	f7ff ff8e 	bl	800f320 <std>
 800f404:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f408:	2202      	movs	r2, #2
 800f40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f40e:	2112      	movs	r1, #18
 800f410:	f7ff bf86 	b.w	800f320 <std>
 800f414:	20000d74 	.word	0x20000d74
 800f418:	20000c3c 	.word	0x20000c3c
 800f41c:	0800f38d 	.word	0x0800f38d

0800f420 <__sfp_lock_acquire>:
 800f420:	4801      	ldr	r0, [pc, #4]	@ (800f428 <__sfp_lock_acquire+0x8>)
 800f422:	f000 ba34 	b.w	800f88e <__retarget_lock_acquire_recursive>
 800f426:	bf00      	nop
 800f428:	20000d7d 	.word	0x20000d7d

0800f42c <__sfp_lock_release>:
 800f42c:	4801      	ldr	r0, [pc, #4]	@ (800f434 <__sfp_lock_release+0x8>)
 800f42e:	f000 ba2f 	b.w	800f890 <__retarget_lock_release_recursive>
 800f432:	bf00      	nop
 800f434:	20000d7d 	.word	0x20000d7d

0800f438 <__sinit>:
 800f438:	b510      	push	{r4, lr}
 800f43a:	4604      	mov	r4, r0
 800f43c:	f7ff fff0 	bl	800f420 <__sfp_lock_acquire>
 800f440:	6a23      	ldr	r3, [r4, #32]
 800f442:	b11b      	cbz	r3, 800f44c <__sinit+0x14>
 800f444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f448:	f7ff bff0 	b.w	800f42c <__sfp_lock_release>
 800f44c:	4b04      	ldr	r3, [pc, #16]	@ (800f460 <__sinit+0x28>)
 800f44e:	6223      	str	r3, [r4, #32]
 800f450:	4b04      	ldr	r3, [pc, #16]	@ (800f464 <__sinit+0x2c>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d1f5      	bne.n	800f444 <__sinit+0xc>
 800f458:	f7ff ffc4 	bl	800f3e4 <global_stdio_init.part.0>
 800f45c:	e7f2      	b.n	800f444 <__sinit+0xc>
 800f45e:	bf00      	nop
 800f460:	0800f3a5 	.word	0x0800f3a5
 800f464:	20000d74 	.word	0x20000d74

0800f468 <_fwalk_sglue>:
 800f468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f46c:	4607      	mov	r7, r0
 800f46e:	4688      	mov	r8, r1
 800f470:	4614      	mov	r4, r2
 800f472:	2600      	movs	r6, #0
 800f474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f478:	f1b9 0901 	subs.w	r9, r9, #1
 800f47c:	d505      	bpl.n	800f48a <_fwalk_sglue+0x22>
 800f47e:	6824      	ldr	r4, [r4, #0]
 800f480:	2c00      	cmp	r4, #0
 800f482:	d1f7      	bne.n	800f474 <_fwalk_sglue+0xc>
 800f484:	4630      	mov	r0, r6
 800f486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f48a:	89ab      	ldrh	r3, [r5, #12]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d907      	bls.n	800f4a0 <_fwalk_sglue+0x38>
 800f490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f494:	3301      	adds	r3, #1
 800f496:	d003      	beq.n	800f4a0 <_fwalk_sglue+0x38>
 800f498:	4629      	mov	r1, r5
 800f49a:	4638      	mov	r0, r7
 800f49c:	47c0      	blx	r8
 800f49e:	4306      	orrs	r6, r0
 800f4a0:	3568      	adds	r5, #104	@ 0x68
 800f4a2:	e7e9      	b.n	800f478 <_fwalk_sglue+0x10>

0800f4a4 <iprintf>:
 800f4a4:	b40f      	push	{r0, r1, r2, r3}
 800f4a6:	b507      	push	{r0, r1, r2, lr}
 800f4a8:	4906      	ldr	r1, [pc, #24]	@ (800f4c4 <iprintf+0x20>)
 800f4aa:	ab04      	add	r3, sp, #16
 800f4ac:	6808      	ldr	r0, [r1, #0]
 800f4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b2:	6881      	ldr	r1, [r0, #8]
 800f4b4:	9301      	str	r3, [sp, #4]
 800f4b6:	f001 fd95 	bl	8010fe4 <_vfiprintf_r>
 800f4ba:	b003      	add	sp, #12
 800f4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4c0:	b004      	add	sp, #16
 800f4c2:	4770      	bx	lr
 800f4c4:	20000038 	.word	0x20000038

0800f4c8 <_puts_r>:
 800f4c8:	6a03      	ldr	r3, [r0, #32]
 800f4ca:	b570      	push	{r4, r5, r6, lr}
 800f4cc:	6884      	ldr	r4, [r0, #8]
 800f4ce:	4605      	mov	r5, r0
 800f4d0:	460e      	mov	r6, r1
 800f4d2:	b90b      	cbnz	r3, 800f4d8 <_puts_r+0x10>
 800f4d4:	f7ff ffb0 	bl	800f438 <__sinit>
 800f4d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4da:	07db      	lsls	r3, r3, #31
 800f4dc:	d405      	bmi.n	800f4ea <_puts_r+0x22>
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	0598      	lsls	r0, r3, #22
 800f4e2:	d402      	bmi.n	800f4ea <_puts_r+0x22>
 800f4e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4e6:	f000 f9d2 	bl	800f88e <__retarget_lock_acquire_recursive>
 800f4ea:	89a3      	ldrh	r3, [r4, #12]
 800f4ec:	0719      	lsls	r1, r3, #28
 800f4ee:	d502      	bpl.n	800f4f6 <_puts_r+0x2e>
 800f4f0:	6923      	ldr	r3, [r4, #16]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d135      	bne.n	800f562 <_puts_r+0x9a>
 800f4f6:	4621      	mov	r1, r4
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	f000 f8e5 	bl	800f6c8 <__swsetup_r>
 800f4fe:	b380      	cbz	r0, 800f562 <_puts_r+0x9a>
 800f500:	f04f 35ff 	mov.w	r5, #4294967295
 800f504:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f506:	07da      	lsls	r2, r3, #31
 800f508:	d405      	bmi.n	800f516 <_puts_r+0x4e>
 800f50a:	89a3      	ldrh	r3, [r4, #12]
 800f50c:	059b      	lsls	r3, r3, #22
 800f50e:	d402      	bmi.n	800f516 <_puts_r+0x4e>
 800f510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f512:	f000 f9bd 	bl	800f890 <__retarget_lock_release_recursive>
 800f516:	4628      	mov	r0, r5
 800f518:	bd70      	pop	{r4, r5, r6, pc}
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	da04      	bge.n	800f528 <_puts_r+0x60>
 800f51e:	69a2      	ldr	r2, [r4, #24]
 800f520:	429a      	cmp	r2, r3
 800f522:	dc17      	bgt.n	800f554 <_puts_r+0x8c>
 800f524:	290a      	cmp	r1, #10
 800f526:	d015      	beq.n	800f554 <_puts_r+0x8c>
 800f528:	6823      	ldr	r3, [r4, #0]
 800f52a:	1c5a      	adds	r2, r3, #1
 800f52c:	6022      	str	r2, [r4, #0]
 800f52e:	7019      	strb	r1, [r3, #0]
 800f530:	68a3      	ldr	r3, [r4, #8]
 800f532:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f536:	3b01      	subs	r3, #1
 800f538:	60a3      	str	r3, [r4, #8]
 800f53a:	2900      	cmp	r1, #0
 800f53c:	d1ed      	bne.n	800f51a <_puts_r+0x52>
 800f53e:	2b00      	cmp	r3, #0
 800f540:	da11      	bge.n	800f566 <_puts_r+0x9e>
 800f542:	4622      	mov	r2, r4
 800f544:	210a      	movs	r1, #10
 800f546:	4628      	mov	r0, r5
 800f548:	f000 f87f 	bl	800f64a <__swbuf_r>
 800f54c:	3001      	adds	r0, #1
 800f54e:	d0d7      	beq.n	800f500 <_puts_r+0x38>
 800f550:	250a      	movs	r5, #10
 800f552:	e7d7      	b.n	800f504 <_puts_r+0x3c>
 800f554:	4622      	mov	r2, r4
 800f556:	4628      	mov	r0, r5
 800f558:	f000 f877 	bl	800f64a <__swbuf_r>
 800f55c:	3001      	adds	r0, #1
 800f55e:	d1e7      	bne.n	800f530 <_puts_r+0x68>
 800f560:	e7ce      	b.n	800f500 <_puts_r+0x38>
 800f562:	3e01      	subs	r6, #1
 800f564:	e7e4      	b.n	800f530 <_puts_r+0x68>
 800f566:	6823      	ldr	r3, [r4, #0]
 800f568:	1c5a      	adds	r2, r3, #1
 800f56a:	6022      	str	r2, [r4, #0]
 800f56c:	220a      	movs	r2, #10
 800f56e:	701a      	strb	r2, [r3, #0]
 800f570:	e7ee      	b.n	800f550 <_puts_r+0x88>
	...

0800f574 <puts>:
 800f574:	4b02      	ldr	r3, [pc, #8]	@ (800f580 <puts+0xc>)
 800f576:	4601      	mov	r1, r0
 800f578:	6818      	ldr	r0, [r3, #0]
 800f57a:	f7ff bfa5 	b.w	800f4c8 <_puts_r>
 800f57e:	bf00      	nop
 800f580:	20000038 	.word	0x20000038

0800f584 <siprintf>:
 800f584:	b40e      	push	{r1, r2, r3}
 800f586:	b500      	push	{lr}
 800f588:	b09c      	sub	sp, #112	@ 0x70
 800f58a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f58c:	9002      	str	r0, [sp, #8]
 800f58e:	9006      	str	r0, [sp, #24]
 800f590:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f594:	4809      	ldr	r0, [pc, #36]	@ (800f5bc <siprintf+0x38>)
 800f596:	9107      	str	r1, [sp, #28]
 800f598:	9104      	str	r1, [sp, #16]
 800f59a:	4909      	ldr	r1, [pc, #36]	@ (800f5c0 <siprintf+0x3c>)
 800f59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5a0:	9105      	str	r1, [sp, #20]
 800f5a2:	6800      	ldr	r0, [r0, #0]
 800f5a4:	9301      	str	r3, [sp, #4]
 800f5a6:	a902      	add	r1, sp, #8
 800f5a8:	f001 fbf6 	bl	8010d98 <_svfiprintf_r>
 800f5ac:	9b02      	ldr	r3, [sp, #8]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	701a      	strb	r2, [r3, #0]
 800f5b2:	b01c      	add	sp, #112	@ 0x70
 800f5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5b8:	b003      	add	sp, #12
 800f5ba:	4770      	bx	lr
 800f5bc:	20000038 	.word	0x20000038
 800f5c0:	ffff0208 	.word	0xffff0208

0800f5c4 <__sread>:
 800f5c4:	b510      	push	{r4, lr}
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5cc:	f000 f900 	bl	800f7d0 <_read_r>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	bfab      	itete	ge
 800f5d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f5d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f5d8:	181b      	addge	r3, r3, r0
 800f5da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f5de:	bfac      	ite	ge
 800f5e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f5e2:	81a3      	strhlt	r3, [r4, #12]
 800f5e4:	bd10      	pop	{r4, pc}

0800f5e6 <__swrite>:
 800f5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ea:	461f      	mov	r7, r3
 800f5ec:	898b      	ldrh	r3, [r1, #12]
 800f5ee:	05db      	lsls	r3, r3, #23
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	460c      	mov	r4, r1
 800f5f4:	4616      	mov	r6, r2
 800f5f6:	d505      	bpl.n	800f604 <__swrite+0x1e>
 800f5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	2200      	movs	r2, #0
 800f600:	f000 f8d4 	bl	800f7ac <_lseek_r>
 800f604:	89a3      	ldrh	r3, [r4, #12]
 800f606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f60a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f60e:	81a3      	strh	r3, [r4, #12]
 800f610:	4632      	mov	r2, r6
 800f612:	463b      	mov	r3, r7
 800f614:	4628      	mov	r0, r5
 800f616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f61a:	f000 b8fb 	b.w	800f814 <_write_r>

0800f61e <__sseek>:
 800f61e:	b510      	push	{r4, lr}
 800f620:	460c      	mov	r4, r1
 800f622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f626:	f000 f8c1 	bl	800f7ac <_lseek_r>
 800f62a:	1c43      	adds	r3, r0, #1
 800f62c:	89a3      	ldrh	r3, [r4, #12]
 800f62e:	bf15      	itete	ne
 800f630:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f632:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f636:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f63a:	81a3      	strheq	r3, [r4, #12]
 800f63c:	bf18      	it	ne
 800f63e:	81a3      	strhne	r3, [r4, #12]
 800f640:	bd10      	pop	{r4, pc}

0800f642 <__sclose>:
 800f642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f646:	f000 b8a1 	b.w	800f78c <_close_r>

0800f64a <__swbuf_r>:
 800f64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64c:	460e      	mov	r6, r1
 800f64e:	4614      	mov	r4, r2
 800f650:	4605      	mov	r5, r0
 800f652:	b118      	cbz	r0, 800f65c <__swbuf_r+0x12>
 800f654:	6a03      	ldr	r3, [r0, #32]
 800f656:	b90b      	cbnz	r3, 800f65c <__swbuf_r+0x12>
 800f658:	f7ff feee 	bl	800f438 <__sinit>
 800f65c:	69a3      	ldr	r3, [r4, #24]
 800f65e:	60a3      	str	r3, [r4, #8]
 800f660:	89a3      	ldrh	r3, [r4, #12]
 800f662:	071a      	lsls	r2, r3, #28
 800f664:	d501      	bpl.n	800f66a <__swbuf_r+0x20>
 800f666:	6923      	ldr	r3, [r4, #16]
 800f668:	b943      	cbnz	r3, 800f67c <__swbuf_r+0x32>
 800f66a:	4621      	mov	r1, r4
 800f66c:	4628      	mov	r0, r5
 800f66e:	f000 f82b 	bl	800f6c8 <__swsetup_r>
 800f672:	b118      	cbz	r0, 800f67c <__swbuf_r+0x32>
 800f674:	f04f 37ff 	mov.w	r7, #4294967295
 800f678:	4638      	mov	r0, r7
 800f67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f67c:	6823      	ldr	r3, [r4, #0]
 800f67e:	6922      	ldr	r2, [r4, #16]
 800f680:	1a98      	subs	r0, r3, r2
 800f682:	6963      	ldr	r3, [r4, #20]
 800f684:	b2f6      	uxtb	r6, r6
 800f686:	4283      	cmp	r3, r0
 800f688:	4637      	mov	r7, r6
 800f68a:	dc05      	bgt.n	800f698 <__swbuf_r+0x4e>
 800f68c:	4621      	mov	r1, r4
 800f68e:	4628      	mov	r0, r5
 800f690:	f001 fe44 	bl	801131c <_fflush_r>
 800f694:	2800      	cmp	r0, #0
 800f696:	d1ed      	bne.n	800f674 <__swbuf_r+0x2a>
 800f698:	68a3      	ldr	r3, [r4, #8]
 800f69a:	3b01      	subs	r3, #1
 800f69c:	60a3      	str	r3, [r4, #8]
 800f69e:	6823      	ldr	r3, [r4, #0]
 800f6a0:	1c5a      	adds	r2, r3, #1
 800f6a2:	6022      	str	r2, [r4, #0]
 800f6a4:	701e      	strb	r6, [r3, #0]
 800f6a6:	6962      	ldr	r2, [r4, #20]
 800f6a8:	1c43      	adds	r3, r0, #1
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d004      	beq.n	800f6b8 <__swbuf_r+0x6e>
 800f6ae:	89a3      	ldrh	r3, [r4, #12]
 800f6b0:	07db      	lsls	r3, r3, #31
 800f6b2:	d5e1      	bpl.n	800f678 <__swbuf_r+0x2e>
 800f6b4:	2e0a      	cmp	r6, #10
 800f6b6:	d1df      	bne.n	800f678 <__swbuf_r+0x2e>
 800f6b8:	4621      	mov	r1, r4
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f001 fe2e 	bl	801131c <_fflush_r>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d0d9      	beq.n	800f678 <__swbuf_r+0x2e>
 800f6c4:	e7d6      	b.n	800f674 <__swbuf_r+0x2a>
	...

0800f6c8 <__swsetup_r>:
 800f6c8:	b538      	push	{r3, r4, r5, lr}
 800f6ca:	4b29      	ldr	r3, [pc, #164]	@ (800f770 <__swsetup_r+0xa8>)
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	460c      	mov	r4, r1
 800f6d2:	b118      	cbz	r0, 800f6dc <__swsetup_r+0x14>
 800f6d4:	6a03      	ldr	r3, [r0, #32]
 800f6d6:	b90b      	cbnz	r3, 800f6dc <__swsetup_r+0x14>
 800f6d8:	f7ff feae 	bl	800f438 <__sinit>
 800f6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6e0:	0719      	lsls	r1, r3, #28
 800f6e2:	d422      	bmi.n	800f72a <__swsetup_r+0x62>
 800f6e4:	06da      	lsls	r2, r3, #27
 800f6e6:	d407      	bmi.n	800f6f8 <__swsetup_r+0x30>
 800f6e8:	2209      	movs	r2, #9
 800f6ea:	602a      	str	r2, [r5, #0]
 800f6ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6f0:	81a3      	strh	r3, [r4, #12]
 800f6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f6:	e033      	b.n	800f760 <__swsetup_r+0x98>
 800f6f8:	0758      	lsls	r0, r3, #29
 800f6fa:	d512      	bpl.n	800f722 <__swsetup_r+0x5a>
 800f6fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6fe:	b141      	cbz	r1, 800f712 <__swsetup_r+0x4a>
 800f700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f704:	4299      	cmp	r1, r3
 800f706:	d002      	beq.n	800f70e <__swsetup_r+0x46>
 800f708:	4628      	mov	r0, r5
 800f70a:	f000 ff1d 	bl	8010548 <_free_r>
 800f70e:	2300      	movs	r3, #0
 800f710:	6363      	str	r3, [r4, #52]	@ 0x34
 800f712:	89a3      	ldrh	r3, [r4, #12]
 800f714:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f718:	81a3      	strh	r3, [r4, #12]
 800f71a:	2300      	movs	r3, #0
 800f71c:	6063      	str	r3, [r4, #4]
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	6023      	str	r3, [r4, #0]
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	f043 0308 	orr.w	r3, r3, #8
 800f728:	81a3      	strh	r3, [r4, #12]
 800f72a:	6923      	ldr	r3, [r4, #16]
 800f72c:	b94b      	cbnz	r3, 800f742 <__swsetup_r+0x7a>
 800f72e:	89a3      	ldrh	r3, [r4, #12]
 800f730:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f738:	d003      	beq.n	800f742 <__swsetup_r+0x7a>
 800f73a:	4621      	mov	r1, r4
 800f73c:	4628      	mov	r0, r5
 800f73e:	f001 fe3b 	bl	80113b8 <__smakebuf_r>
 800f742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f746:	f013 0201 	ands.w	r2, r3, #1
 800f74a:	d00a      	beq.n	800f762 <__swsetup_r+0x9a>
 800f74c:	2200      	movs	r2, #0
 800f74e:	60a2      	str	r2, [r4, #8]
 800f750:	6962      	ldr	r2, [r4, #20]
 800f752:	4252      	negs	r2, r2
 800f754:	61a2      	str	r2, [r4, #24]
 800f756:	6922      	ldr	r2, [r4, #16]
 800f758:	b942      	cbnz	r2, 800f76c <__swsetup_r+0xa4>
 800f75a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f75e:	d1c5      	bne.n	800f6ec <__swsetup_r+0x24>
 800f760:	bd38      	pop	{r3, r4, r5, pc}
 800f762:	0799      	lsls	r1, r3, #30
 800f764:	bf58      	it	pl
 800f766:	6962      	ldrpl	r2, [r4, #20]
 800f768:	60a2      	str	r2, [r4, #8]
 800f76a:	e7f4      	b.n	800f756 <__swsetup_r+0x8e>
 800f76c:	2000      	movs	r0, #0
 800f76e:	e7f7      	b.n	800f760 <__swsetup_r+0x98>
 800f770:	20000038 	.word	0x20000038

0800f774 <memset>:
 800f774:	4402      	add	r2, r0
 800f776:	4603      	mov	r3, r0
 800f778:	4293      	cmp	r3, r2
 800f77a:	d100      	bne.n	800f77e <memset+0xa>
 800f77c:	4770      	bx	lr
 800f77e:	f803 1b01 	strb.w	r1, [r3], #1
 800f782:	e7f9      	b.n	800f778 <memset+0x4>

0800f784 <_localeconv_r>:
 800f784:	4800      	ldr	r0, [pc, #0]	@ (800f788 <_localeconv_r+0x4>)
 800f786:	4770      	bx	lr
 800f788:	20000178 	.word	0x20000178

0800f78c <_close_r>:
 800f78c:	b538      	push	{r3, r4, r5, lr}
 800f78e:	4d06      	ldr	r5, [pc, #24]	@ (800f7a8 <_close_r+0x1c>)
 800f790:	2300      	movs	r3, #0
 800f792:	4604      	mov	r4, r0
 800f794:	4608      	mov	r0, r1
 800f796:	602b      	str	r3, [r5, #0]
 800f798:	f7f3 fdbc 	bl	8003314 <_close>
 800f79c:	1c43      	adds	r3, r0, #1
 800f79e:	d102      	bne.n	800f7a6 <_close_r+0x1a>
 800f7a0:	682b      	ldr	r3, [r5, #0]
 800f7a2:	b103      	cbz	r3, 800f7a6 <_close_r+0x1a>
 800f7a4:	6023      	str	r3, [r4, #0]
 800f7a6:	bd38      	pop	{r3, r4, r5, pc}
 800f7a8:	20000d78 	.word	0x20000d78

0800f7ac <_lseek_r>:
 800f7ac:	b538      	push	{r3, r4, r5, lr}
 800f7ae:	4d07      	ldr	r5, [pc, #28]	@ (800f7cc <_lseek_r+0x20>)
 800f7b0:	4604      	mov	r4, r0
 800f7b2:	4608      	mov	r0, r1
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	602a      	str	r2, [r5, #0]
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	f7f3 fdd1 	bl	8003362 <_lseek>
 800f7c0:	1c43      	adds	r3, r0, #1
 800f7c2:	d102      	bne.n	800f7ca <_lseek_r+0x1e>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	b103      	cbz	r3, 800f7ca <_lseek_r+0x1e>
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	bd38      	pop	{r3, r4, r5, pc}
 800f7cc:	20000d78 	.word	0x20000d78

0800f7d0 <_read_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	4d07      	ldr	r5, [pc, #28]	@ (800f7f0 <_read_r+0x20>)
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	4608      	mov	r0, r1
 800f7d8:	4611      	mov	r1, r2
 800f7da:	2200      	movs	r2, #0
 800f7dc:	602a      	str	r2, [r5, #0]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	f7f3 fd7b 	bl	80032da <_read>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d102      	bne.n	800f7ee <_read_r+0x1e>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	b103      	cbz	r3, 800f7ee <_read_r+0x1e>
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	bd38      	pop	{r3, r4, r5, pc}
 800f7f0:	20000d78 	.word	0x20000d78

0800f7f4 <_sbrk_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4d06      	ldr	r5, [pc, #24]	@ (800f810 <_sbrk_r+0x1c>)
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	4608      	mov	r0, r1
 800f7fe:	602b      	str	r3, [r5, #0]
 800f800:	f7f3 fdbc 	bl	800337c <_sbrk>
 800f804:	1c43      	adds	r3, r0, #1
 800f806:	d102      	bne.n	800f80e <_sbrk_r+0x1a>
 800f808:	682b      	ldr	r3, [r5, #0]
 800f80a:	b103      	cbz	r3, 800f80e <_sbrk_r+0x1a>
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	20000d78 	.word	0x20000d78

0800f814 <_write_r>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	4d07      	ldr	r5, [pc, #28]	@ (800f834 <_write_r+0x20>)
 800f818:	4604      	mov	r4, r0
 800f81a:	4608      	mov	r0, r1
 800f81c:	4611      	mov	r1, r2
 800f81e:	2200      	movs	r2, #0
 800f820:	602a      	str	r2, [r5, #0]
 800f822:	461a      	mov	r2, r3
 800f824:	f7f3 f95a 	bl	8002adc <_write>
 800f828:	1c43      	adds	r3, r0, #1
 800f82a:	d102      	bne.n	800f832 <_write_r+0x1e>
 800f82c:	682b      	ldr	r3, [r5, #0]
 800f82e:	b103      	cbz	r3, 800f832 <_write_r+0x1e>
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	bd38      	pop	{r3, r4, r5, pc}
 800f834:	20000d78 	.word	0x20000d78

0800f838 <__errno>:
 800f838:	4b01      	ldr	r3, [pc, #4]	@ (800f840 <__errno+0x8>)
 800f83a:	6818      	ldr	r0, [r3, #0]
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	20000038 	.word	0x20000038

0800f844 <__libc_init_array>:
 800f844:	b570      	push	{r4, r5, r6, lr}
 800f846:	4d0d      	ldr	r5, [pc, #52]	@ (800f87c <__libc_init_array+0x38>)
 800f848:	4c0d      	ldr	r4, [pc, #52]	@ (800f880 <__libc_init_array+0x3c>)
 800f84a:	1b64      	subs	r4, r4, r5
 800f84c:	10a4      	asrs	r4, r4, #2
 800f84e:	2600      	movs	r6, #0
 800f850:	42a6      	cmp	r6, r4
 800f852:	d109      	bne.n	800f868 <__libc_init_array+0x24>
 800f854:	4d0b      	ldr	r5, [pc, #44]	@ (800f884 <__libc_init_array+0x40>)
 800f856:	4c0c      	ldr	r4, [pc, #48]	@ (800f888 <__libc_init_array+0x44>)
 800f858:	f001 ff0c 	bl	8011674 <_init>
 800f85c:	1b64      	subs	r4, r4, r5
 800f85e:	10a4      	asrs	r4, r4, #2
 800f860:	2600      	movs	r6, #0
 800f862:	42a6      	cmp	r6, r4
 800f864:	d105      	bne.n	800f872 <__libc_init_array+0x2e>
 800f866:	bd70      	pop	{r4, r5, r6, pc}
 800f868:	f855 3b04 	ldr.w	r3, [r5], #4
 800f86c:	4798      	blx	r3
 800f86e:	3601      	adds	r6, #1
 800f870:	e7ee      	b.n	800f850 <__libc_init_array+0xc>
 800f872:	f855 3b04 	ldr.w	r3, [r5], #4
 800f876:	4798      	blx	r3
 800f878:	3601      	adds	r6, #1
 800f87a:	e7f2      	b.n	800f862 <__libc_init_array+0x1e>
 800f87c:	08011fe8 	.word	0x08011fe8
 800f880:	08011fe8 	.word	0x08011fe8
 800f884:	08011fe8 	.word	0x08011fe8
 800f888:	08011fec 	.word	0x08011fec

0800f88c <__retarget_lock_init_recursive>:
 800f88c:	4770      	bx	lr

0800f88e <__retarget_lock_acquire_recursive>:
 800f88e:	4770      	bx	lr

0800f890 <__retarget_lock_release_recursive>:
 800f890:	4770      	bx	lr

0800f892 <memcpy>:
 800f892:	440a      	add	r2, r1
 800f894:	4291      	cmp	r1, r2
 800f896:	f100 33ff 	add.w	r3, r0, #4294967295
 800f89a:	d100      	bne.n	800f89e <memcpy+0xc>
 800f89c:	4770      	bx	lr
 800f89e:	b510      	push	{r4, lr}
 800f8a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8a8:	4291      	cmp	r1, r2
 800f8aa:	d1f9      	bne.n	800f8a0 <memcpy+0xe>
 800f8ac:	bd10      	pop	{r4, pc}

0800f8ae <quorem>:
 800f8ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b2:	6903      	ldr	r3, [r0, #16]
 800f8b4:	690c      	ldr	r4, [r1, #16]
 800f8b6:	42a3      	cmp	r3, r4
 800f8b8:	4607      	mov	r7, r0
 800f8ba:	db7e      	blt.n	800f9ba <quorem+0x10c>
 800f8bc:	3c01      	subs	r4, #1
 800f8be:	f101 0814 	add.w	r8, r1, #20
 800f8c2:	00a3      	lsls	r3, r4, #2
 800f8c4:	f100 0514 	add.w	r5, r0, #20
 800f8c8:	9300      	str	r3, [sp, #0]
 800f8ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8ce:	9301      	str	r3, [sp, #4]
 800f8d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8e4:	d32e      	bcc.n	800f944 <quorem+0x96>
 800f8e6:	f04f 0a00 	mov.w	sl, #0
 800f8ea:	46c4      	mov	ip, r8
 800f8ec:	46ae      	mov	lr, r5
 800f8ee:	46d3      	mov	fp, sl
 800f8f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f8f4:	b298      	uxth	r0, r3
 800f8f6:	fb06 a000 	mla	r0, r6, r0, sl
 800f8fa:	0c02      	lsrs	r2, r0, #16
 800f8fc:	0c1b      	lsrs	r3, r3, #16
 800f8fe:	fb06 2303 	mla	r3, r6, r3, r2
 800f902:	f8de 2000 	ldr.w	r2, [lr]
 800f906:	b280      	uxth	r0, r0
 800f908:	b292      	uxth	r2, r2
 800f90a:	1a12      	subs	r2, r2, r0
 800f90c:	445a      	add	r2, fp
 800f90e:	f8de 0000 	ldr.w	r0, [lr]
 800f912:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f916:	b29b      	uxth	r3, r3
 800f918:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f91c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f920:	b292      	uxth	r2, r2
 800f922:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f926:	45e1      	cmp	r9, ip
 800f928:	f84e 2b04 	str.w	r2, [lr], #4
 800f92c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f930:	d2de      	bcs.n	800f8f0 <quorem+0x42>
 800f932:	9b00      	ldr	r3, [sp, #0]
 800f934:	58eb      	ldr	r3, [r5, r3]
 800f936:	b92b      	cbnz	r3, 800f944 <quorem+0x96>
 800f938:	9b01      	ldr	r3, [sp, #4]
 800f93a:	3b04      	subs	r3, #4
 800f93c:	429d      	cmp	r5, r3
 800f93e:	461a      	mov	r2, r3
 800f940:	d32f      	bcc.n	800f9a2 <quorem+0xf4>
 800f942:	613c      	str	r4, [r7, #16]
 800f944:	4638      	mov	r0, r7
 800f946:	f001 f8c3 	bl	8010ad0 <__mcmp>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	db25      	blt.n	800f99a <quorem+0xec>
 800f94e:	4629      	mov	r1, r5
 800f950:	2000      	movs	r0, #0
 800f952:	f858 2b04 	ldr.w	r2, [r8], #4
 800f956:	f8d1 c000 	ldr.w	ip, [r1]
 800f95a:	fa1f fe82 	uxth.w	lr, r2
 800f95e:	fa1f f38c 	uxth.w	r3, ip
 800f962:	eba3 030e 	sub.w	r3, r3, lr
 800f966:	4403      	add	r3, r0
 800f968:	0c12      	lsrs	r2, r2, #16
 800f96a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f96e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f972:	b29b      	uxth	r3, r3
 800f974:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f978:	45c1      	cmp	r9, r8
 800f97a:	f841 3b04 	str.w	r3, [r1], #4
 800f97e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f982:	d2e6      	bcs.n	800f952 <quorem+0xa4>
 800f984:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f988:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f98c:	b922      	cbnz	r2, 800f998 <quorem+0xea>
 800f98e:	3b04      	subs	r3, #4
 800f990:	429d      	cmp	r5, r3
 800f992:	461a      	mov	r2, r3
 800f994:	d30b      	bcc.n	800f9ae <quorem+0x100>
 800f996:	613c      	str	r4, [r7, #16]
 800f998:	3601      	adds	r6, #1
 800f99a:	4630      	mov	r0, r6
 800f99c:	b003      	add	sp, #12
 800f99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a2:	6812      	ldr	r2, [r2, #0]
 800f9a4:	3b04      	subs	r3, #4
 800f9a6:	2a00      	cmp	r2, #0
 800f9a8:	d1cb      	bne.n	800f942 <quorem+0x94>
 800f9aa:	3c01      	subs	r4, #1
 800f9ac:	e7c6      	b.n	800f93c <quorem+0x8e>
 800f9ae:	6812      	ldr	r2, [r2, #0]
 800f9b0:	3b04      	subs	r3, #4
 800f9b2:	2a00      	cmp	r2, #0
 800f9b4:	d1ef      	bne.n	800f996 <quorem+0xe8>
 800f9b6:	3c01      	subs	r4, #1
 800f9b8:	e7ea      	b.n	800f990 <quorem+0xe2>
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	e7ee      	b.n	800f99c <quorem+0xee>
	...

0800f9c0 <_dtoa_r>:
 800f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	69c7      	ldr	r7, [r0, #28]
 800f9c6:	b099      	sub	sp, #100	@ 0x64
 800f9c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f9cc:	ec55 4b10 	vmov	r4, r5, d0
 800f9d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f9d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f9d4:	4683      	mov	fp, r0
 800f9d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f9da:	b97f      	cbnz	r7, 800f9fc <_dtoa_r+0x3c>
 800f9dc:	2010      	movs	r0, #16
 800f9de:	f7fe ff89 	bl	800e8f4 <malloc>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800f9e8:	b920      	cbnz	r0, 800f9f4 <_dtoa_r+0x34>
 800f9ea:	4ba7      	ldr	r3, [pc, #668]	@ (800fc88 <_dtoa_r+0x2c8>)
 800f9ec:	21ef      	movs	r1, #239	@ 0xef
 800f9ee:	48a7      	ldr	r0, [pc, #668]	@ (800fc8c <_dtoa_r+0x2cc>)
 800f9f0:	f001 fd5a 	bl	80114a8 <__assert_func>
 800f9f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f9f8:	6007      	str	r7, [r0, #0]
 800f9fa:	60c7      	str	r7, [r0, #12]
 800f9fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa00:	6819      	ldr	r1, [r3, #0]
 800fa02:	b159      	cbz	r1, 800fa1c <_dtoa_r+0x5c>
 800fa04:	685a      	ldr	r2, [r3, #4]
 800fa06:	604a      	str	r2, [r1, #4]
 800fa08:	2301      	movs	r3, #1
 800fa0a:	4093      	lsls	r3, r2
 800fa0c:	608b      	str	r3, [r1, #8]
 800fa0e:	4658      	mov	r0, fp
 800fa10:	f000 fe24 	bl	801065c <_Bfree>
 800fa14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	601a      	str	r2, [r3, #0]
 800fa1c:	1e2b      	subs	r3, r5, #0
 800fa1e:	bfb9      	ittee	lt
 800fa20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa24:	9303      	strlt	r3, [sp, #12]
 800fa26:	2300      	movge	r3, #0
 800fa28:	6033      	strge	r3, [r6, #0]
 800fa2a:	9f03      	ldr	r7, [sp, #12]
 800fa2c:	4b98      	ldr	r3, [pc, #608]	@ (800fc90 <_dtoa_r+0x2d0>)
 800fa2e:	bfbc      	itt	lt
 800fa30:	2201      	movlt	r2, #1
 800fa32:	6032      	strlt	r2, [r6, #0]
 800fa34:	43bb      	bics	r3, r7
 800fa36:	d112      	bne.n	800fa5e <_dtoa_r+0x9e>
 800fa38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa44:	4323      	orrs	r3, r4
 800fa46:	f000 854d 	beq.w	80104e4 <_dtoa_r+0xb24>
 800fa4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fca4 <_dtoa_r+0x2e4>
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f000 854f 	beq.w	80104f4 <_dtoa_r+0xb34>
 800fa56:	f10a 0303 	add.w	r3, sl, #3
 800fa5a:	f000 bd49 	b.w	80104f0 <_dtoa_r+0xb30>
 800fa5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa62:	2200      	movs	r2, #0
 800fa64:	ec51 0b17 	vmov	r0, r1, d7
 800fa68:	2300      	movs	r3, #0
 800fa6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fa6e:	f7f1 f833 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa72:	4680      	mov	r8, r0
 800fa74:	b158      	cbz	r0, 800fa8e <_dtoa_r+0xce>
 800fa76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa78:	2301      	movs	r3, #1
 800fa7a:	6013      	str	r3, [r2, #0]
 800fa7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa7e:	b113      	cbz	r3, 800fa86 <_dtoa_r+0xc6>
 800fa80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa82:	4b84      	ldr	r3, [pc, #528]	@ (800fc94 <_dtoa_r+0x2d4>)
 800fa84:	6013      	str	r3, [r2, #0]
 800fa86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fca8 <_dtoa_r+0x2e8>
 800fa8a:	f000 bd33 	b.w	80104f4 <_dtoa_r+0xb34>
 800fa8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fa92:	aa16      	add	r2, sp, #88	@ 0x58
 800fa94:	a917      	add	r1, sp, #92	@ 0x5c
 800fa96:	4658      	mov	r0, fp
 800fa98:	f001 f8ca 	bl	8010c30 <__d2b>
 800fa9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800faa0:	4681      	mov	r9, r0
 800faa2:	2e00      	cmp	r6, #0
 800faa4:	d077      	beq.n	800fb96 <_dtoa_r+0x1d6>
 800faa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800faa8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800faac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fab4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fab8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fabc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fac0:	4619      	mov	r1, r3
 800fac2:	2200      	movs	r2, #0
 800fac4:	4b74      	ldr	r3, [pc, #464]	@ (800fc98 <_dtoa_r+0x2d8>)
 800fac6:	f7f0 fbe7 	bl	8000298 <__aeabi_dsub>
 800faca:	a369      	add	r3, pc, #420	@ (adr r3, 800fc70 <_dtoa_r+0x2b0>)
 800facc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad0:	f7f0 fd9a 	bl	8000608 <__aeabi_dmul>
 800fad4:	a368      	add	r3, pc, #416	@ (adr r3, 800fc78 <_dtoa_r+0x2b8>)
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	f7f0 fbdf 	bl	800029c <__adddf3>
 800fade:	4604      	mov	r4, r0
 800fae0:	4630      	mov	r0, r6
 800fae2:	460d      	mov	r5, r1
 800fae4:	f7f0 fd26 	bl	8000534 <__aeabi_i2d>
 800fae8:	a365      	add	r3, pc, #404	@ (adr r3, 800fc80 <_dtoa_r+0x2c0>)
 800faea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faee:	f7f0 fd8b 	bl	8000608 <__aeabi_dmul>
 800faf2:	4602      	mov	r2, r0
 800faf4:	460b      	mov	r3, r1
 800faf6:	4620      	mov	r0, r4
 800faf8:	4629      	mov	r1, r5
 800fafa:	f7f0 fbcf 	bl	800029c <__adddf3>
 800fafe:	4604      	mov	r4, r0
 800fb00:	460d      	mov	r5, r1
 800fb02:	f7f1 f831 	bl	8000b68 <__aeabi_d2iz>
 800fb06:	2200      	movs	r2, #0
 800fb08:	4607      	mov	r7, r0
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	4629      	mov	r1, r5
 800fb10:	f7f0 ffec 	bl	8000aec <__aeabi_dcmplt>
 800fb14:	b140      	cbz	r0, 800fb28 <_dtoa_r+0x168>
 800fb16:	4638      	mov	r0, r7
 800fb18:	f7f0 fd0c 	bl	8000534 <__aeabi_i2d>
 800fb1c:	4622      	mov	r2, r4
 800fb1e:	462b      	mov	r3, r5
 800fb20:	f7f0 ffda 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb24:	b900      	cbnz	r0, 800fb28 <_dtoa_r+0x168>
 800fb26:	3f01      	subs	r7, #1
 800fb28:	2f16      	cmp	r7, #22
 800fb2a:	d851      	bhi.n	800fbd0 <_dtoa_r+0x210>
 800fb2c:	4b5b      	ldr	r3, [pc, #364]	@ (800fc9c <_dtoa_r+0x2dc>)
 800fb2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb3a:	f7f0 ffd7 	bl	8000aec <__aeabi_dcmplt>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d048      	beq.n	800fbd4 <_dtoa_r+0x214>
 800fb42:	3f01      	subs	r7, #1
 800fb44:	2300      	movs	r3, #0
 800fb46:	9312      	str	r3, [sp, #72]	@ 0x48
 800fb48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb4a:	1b9b      	subs	r3, r3, r6
 800fb4c:	1e5a      	subs	r2, r3, #1
 800fb4e:	bf44      	itt	mi
 800fb50:	f1c3 0801 	rsbmi	r8, r3, #1
 800fb54:	2300      	movmi	r3, #0
 800fb56:	9208      	str	r2, [sp, #32]
 800fb58:	bf54      	ite	pl
 800fb5a:	f04f 0800 	movpl.w	r8, #0
 800fb5e:	9308      	strmi	r3, [sp, #32]
 800fb60:	2f00      	cmp	r7, #0
 800fb62:	db39      	blt.n	800fbd8 <_dtoa_r+0x218>
 800fb64:	9b08      	ldr	r3, [sp, #32]
 800fb66:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fb68:	443b      	add	r3, r7
 800fb6a:	9308      	str	r3, [sp, #32]
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb72:	2b09      	cmp	r3, #9
 800fb74:	d864      	bhi.n	800fc40 <_dtoa_r+0x280>
 800fb76:	2b05      	cmp	r3, #5
 800fb78:	bfc4      	itt	gt
 800fb7a:	3b04      	subgt	r3, #4
 800fb7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb80:	f1a3 0302 	sub.w	r3, r3, #2
 800fb84:	bfcc      	ite	gt
 800fb86:	2400      	movgt	r4, #0
 800fb88:	2401      	movle	r4, #1
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d863      	bhi.n	800fc56 <_dtoa_r+0x296>
 800fb8e:	e8df f003 	tbb	[pc, r3]
 800fb92:	372a      	.short	0x372a
 800fb94:	5535      	.short	0x5535
 800fb96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fb9a:	441e      	add	r6, r3
 800fb9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fba0:	2b20      	cmp	r3, #32
 800fba2:	bfc1      	itttt	gt
 800fba4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fba8:	409f      	lslgt	r7, r3
 800fbaa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fbae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fbb2:	bfd6      	itet	le
 800fbb4:	f1c3 0320 	rsble	r3, r3, #32
 800fbb8:	ea47 0003 	orrgt.w	r0, r7, r3
 800fbbc:	fa04 f003 	lslle.w	r0, r4, r3
 800fbc0:	f7f0 fca8 	bl	8000514 <__aeabi_ui2d>
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fbca:	3e01      	subs	r6, #1
 800fbcc:	9214      	str	r2, [sp, #80]	@ 0x50
 800fbce:	e777      	b.n	800fac0 <_dtoa_r+0x100>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e7b8      	b.n	800fb46 <_dtoa_r+0x186>
 800fbd4:	9012      	str	r0, [sp, #72]	@ 0x48
 800fbd6:	e7b7      	b.n	800fb48 <_dtoa_r+0x188>
 800fbd8:	427b      	negs	r3, r7
 800fbda:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbdc:	2300      	movs	r3, #0
 800fbde:	eba8 0807 	sub.w	r8, r8, r7
 800fbe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fbe4:	e7c4      	b.n	800fb70 <_dtoa_r+0x1b0>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	dc35      	bgt.n	800fc5c <_dtoa_r+0x29c>
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	9307      	str	r3, [sp, #28]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	920e      	str	r2, [sp, #56]	@ 0x38
 800fbfa:	e00b      	b.n	800fc14 <_dtoa_r+0x254>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	e7f3      	b.n	800fbe8 <_dtoa_r+0x228>
 800fc00:	2300      	movs	r3, #0
 800fc02:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc06:	18fb      	adds	r3, r7, r3
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	9307      	str	r3, [sp, #28]
 800fc10:	bfb8      	it	lt
 800fc12:	2301      	movlt	r3, #1
 800fc14:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fc18:	2100      	movs	r1, #0
 800fc1a:	2204      	movs	r2, #4
 800fc1c:	f102 0514 	add.w	r5, r2, #20
 800fc20:	429d      	cmp	r5, r3
 800fc22:	d91f      	bls.n	800fc64 <_dtoa_r+0x2a4>
 800fc24:	6041      	str	r1, [r0, #4]
 800fc26:	4658      	mov	r0, fp
 800fc28:	f000 fcd8 	bl	80105dc <_Balloc>
 800fc2c:	4682      	mov	sl, r0
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	d13c      	bne.n	800fcac <_dtoa_r+0x2ec>
 800fc32:	4b1b      	ldr	r3, [pc, #108]	@ (800fca0 <_dtoa_r+0x2e0>)
 800fc34:	4602      	mov	r2, r0
 800fc36:	f240 11af 	movw	r1, #431	@ 0x1af
 800fc3a:	e6d8      	b.n	800f9ee <_dtoa_r+0x2e>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e7e0      	b.n	800fc02 <_dtoa_r+0x242>
 800fc40:	2401      	movs	r4, #1
 800fc42:	2300      	movs	r3, #0
 800fc44:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc46:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fc48:	f04f 33ff 	mov.w	r3, #4294967295
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	9307      	str	r3, [sp, #28]
 800fc50:	2200      	movs	r2, #0
 800fc52:	2312      	movs	r3, #18
 800fc54:	e7d0      	b.n	800fbf8 <_dtoa_r+0x238>
 800fc56:	2301      	movs	r3, #1
 800fc58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc5a:	e7f5      	b.n	800fc48 <_dtoa_r+0x288>
 800fc5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	9307      	str	r3, [sp, #28]
 800fc62:	e7d7      	b.n	800fc14 <_dtoa_r+0x254>
 800fc64:	3101      	adds	r1, #1
 800fc66:	0052      	lsls	r2, r2, #1
 800fc68:	e7d8      	b.n	800fc1c <_dtoa_r+0x25c>
 800fc6a:	bf00      	nop
 800fc6c:	f3af 8000 	nop.w
 800fc70:	636f4361 	.word	0x636f4361
 800fc74:	3fd287a7 	.word	0x3fd287a7
 800fc78:	8b60c8b3 	.word	0x8b60c8b3
 800fc7c:	3fc68a28 	.word	0x3fc68a28
 800fc80:	509f79fb 	.word	0x509f79fb
 800fc84:	3fd34413 	.word	0x3fd34413
 800fc88:	08011cad 	.word	0x08011cad
 800fc8c:	08011cc4 	.word	0x08011cc4
 800fc90:	7ff00000 	.word	0x7ff00000
 800fc94:	08011c7d 	.word	0x08011c7d
 800fc98:	3ff80000 	.word	0x3ff80000
 800fc9c:	08011dc0 	.word	0x08011dc0
 800fca0:	08011d1c 	.word	0x08011d1c
 800fca4:	08011ca9 	.word	0x08011ca9
 800fca8:	08011c7c 	.word	0x08011c7c
 800fcac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fcb0:	6018      	str	r0, [r3, #0]
 800fcb2:	9b07      	ldr	r3, [sp, #28]
 800fcb4:	2b0e      	cmp	r3, #14
 800fcb6:	f200 80a4 	bhi.w	800fe02 <_dtoa_r+0x442>
 800fcba:	2c00      	cmp	r4, #0
 800fcbc:	f000 80a1 	beq.w	800fe02 <_dtoa_r+0x442>
 800fcc0:	2f00      	cmp	r7, #0
 800fcc2:	dd33      	ble.n	800fd2c <_dtoa_r+0x36c>
 800fcc4:	4bad      	ldr	r3, [pc, #692]	@ (800ff7c <_dtoa_r+0x5bc>)
 800fcc6:	f007 020f 	and.w	r2, r7, #15
 800fcca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcce:	ed93 7b00 	vldr	d7, [r3]
 800fcd2:	05f8      	lsls	r0, r7, #23
 800fcd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fcd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fcdc:	d516      	bpl.n	800fd0c <_dtoa_r+0x34c>
 800fcde:	4ba8      	ldr	r3, [pc, #672]	@ (800ff80 <_dtoa_r+0x5c0>)
 800fce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fce4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fce8:	f7f0 fdb8 	bl	800085c <__aeabi_ddiv>
 800fcec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcf0:	f004 040f 	and.w	r4, r4, #15
 800fcf4:	2603      	movs	r6, #3
 800fcf6:	4da2      	ldr	r5, [pc, #648]	@ (800ff80 <_dtoa_r+0x5c0>)
 800fcf8:	b954      	cbnz	r4, 800fd10 <_dtoa_r+0x350>
 800fcfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd02:	f7f0 fdab 	bl	800085c <__aeabi_ddiv>
 800fd06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd0a:	e028      	b.n	800fd5e <_dtoa_r+0x39e>
 800fd0c:	2602      	movs	r6, #2
 800fd0e:	e7f2      	b.n	800fcf6 <_dtoa_r+0x336>
 800fd10:	07e1      	lsls	r1, r4, #31
 800fd12:	d508      	bpl.n	800fd26 <_dtoa_r+0x366>
 800fd14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd1c:	f7f0 fc74 	bl	8000608 <__aeabi_dmul>
 800fd20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd24:	3601      	adds	r6, #1
 800fd26:	1064      	asrs	r4, r4, #1
 800fd28:	3508      	adds	r5, #8
 800fd2a:	e7e5      	b.n	800fcf8 <_dtoa_r+0x338>
 800fd2c:	f000 80d2 	beq.w	800fed4 <_dtoa_r+0x514>
 800fd30:	427c      	negs	r4, r7
 800fd32:	4b92      	ldr	r3, [pc, #584]	@ (800ff7c <_dtoa_r+0x5bc>)
 800fd34:	4d92      	ldr	r5, [pc, #584]	@ (800ff80 <_dtoa_r+0x5c0>)
 800fd36:	f004 020f 	and.w	r2, r4, #15
 800fd3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd46:	f7f0 fc5f 	bl	8000608 <__aeabi_dmul>
 800fd4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd4e:	1124      	asrs	r4, r4, #4
 800fd50:	2300      	movs	r3, #0
 800fd52:	2602      	movs	r6, #2
 800fd54:	2c00      	cmp	r4, #0
 800fd56:	f040 80b2 	bne.w	800febe <_dtoa_r+0x4fe>
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d1d3      	bne.n	800fd06 <_dtoa_r+0x346>
 800fd5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 80b7 	beq.w	800fed8 <_dtoa_r+0x518>
 800fd6a:	4b86      	ldr	r3, [pc, #536]	@ (800ff84 <_dtoa_r+0x5c4>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	4620      	mov	r0, r4
 800fd70:	4629      	mov	r1, r5
 800fd72:	f7f0 febb 	bl	8000aec <__aeabi_dcmplt>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	f000 80ae 	beq.w	800fed8 <_dtoa_r+0x518>
 800fd7c:	9b07      	ldr	r3, [sp, #28]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f000 80aa 	beq.w	800fed8 <_dtoa_r+0x518>
 800fd84:	9b00      	ldr	r3, [sp, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	dd37      	ble.n	800fdfa <_dtoa_r+0x43a>
 800fd8a:	1e7b      	subs	r3, r7, #1
 800fd8c:	9304      	str	r3, [sp, #16]
 800fd8e:	4620      	mov	r0, r4
 800fd90:	4b7d      	ldr	r3, [pc, #500]	@ (800ff88 <_dtoa_r+0x5c8>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	4629      	mov	r1, r5
 800fd96:	f7f0 fc37 	bl	8000608 <__aeabi_dmul>
 800fd9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd9e:	9c00      	ldr	r4, [sp, #0]
 800fda0:	3601      	adds	r6, #1
 800fda2:	4630      	mov	r0, r6
 800fda4:	f7f0 fbc6 	bl	8000534 <__aeabi_i2d>
 800fda8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fdac:	f7f0 fc2c 	bl	8000608 <__aeabi_dmul>
 800fdb0:	4b76      	ldr	r3, [pc, #472]	@ (800ff8c <_dtoa_r+0x5cc>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f7f0 fa72 	bl	800029c <__adddf3>
 800fdb8:	4605      	mov	r5, r0
 800fdba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fdbe:	2c00      	cmp	r4, #0
 800fdc0:	f040 808d 	bne.w	800fede <_dtoa_r+0x51e>
 800fdc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdc8:	4b71      	ldr	r3, [pc, #452]	@ (800ff90 <_dtoa_r+0x5d0>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f7f0 fa64 	bl	8000298 <__aeabi_dsub>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fdd8:	462a      	mov	r2, r5
 800fdda:	4633      	mov	r3, r6
 800fddc:	f7f0 fea4 	bl	8000b28 <__aeabi_dcmpgt>
 800fde0:	2800      	cmp	r0, #0
 800fde2:	f040 828b 	bne.w	80102fc <_dtoa_r+0x93c>
 800fde6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdea:	462a      	mov	r2, r5
 800fdec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fdf0:	f7f0 fe7c 	bl	8000aec <__aeabi_dcmplt>
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	f040 8128 	bne.w	801004a <_dtoa_r+0x68a>
 800fdfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fdfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fe02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f2c0 815a 	blt.w	80100be <_dtoa_r+0x6fe>
 800fe0a:	2f0e      	cmp	r7, #14
 800fe0c:	f300 8157 	bgt.w	80100be <_dtoa_r+0x6fe>
 800fe10:	4b5a      	ldr	r3, [pc, #360]	@ (800ff7c <_dtoa_r+0x5bc>)
 800fe12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe16:	ed93 7b00 	vldr	d7, [r3]
 800fe1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	ed8d 7b00 	vstr	d7, [sp]
 800fe22:	da03      	bge.n	800fe2c <_dtoa_r+0x46c>
 800fe24:	9b07      	ldr	r3, [sp, #28]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f340 8101 	ble.w	801002e <_dtoa_r+0x66e>
 800fe2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe30:	4656      	mov	r6, sl
 800fe32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe36:	4620      	mov	r0, r4
 800fe38:	4629      	mov	r1, r5
 800fe3a:	f7f0 fd0f 	bl	800085c <__aeabi_ddiv>
 800fe3e:	f7f0 fe93 	bl	8000b68 <__aeabi_d2iz>
 800fe42:	4680      	mov	r8, r0
 800fe44:	f7f0 fb76 	bl	8000534 <__aeabi_i2d>
 800fe48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe4c:	f7f0 fbdc 	bl	8000608 <__aeabi_dmul>
 800fe50:	4602      	mov	r2, r0
 800fe52:	460b      	mov	r3, r1
 800fe54:	4620      	mov	r0, r4
 800fe56:	4629      	mov	r1, r5
 800fe58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fe5c:	f7f0 fa1c 	bl	8000298 <__aeabi_dsub>
 800fe60:	f806 4b01 	strb.w	r4, [r6], #1
 800fe64:	9d07      	ldr	r5, [sp, #28]
 800fe66:	eba6 040a 	sub.w	r4, r6, sl
 800fe6a:	42a5      	cmp	r5, r4
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	460b      	mov	r3, r1
 800fe70:	f040 8117 	bne.w	80100a2 <_dtoa_r+0x6e2>
 800fe74:	f7f0 fa12 	bl	800029c <__adddf3>
 800fe78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	460d      	mov	r5, r1
 800fe80:	f7f0 fe52 	bl	8000b28 <__aeabi_dcmpgt>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	f040 80f9 	bne.w	801007c <_dtoa_r+0x6bc>
 800fe8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe8e:	4620      	mov	r0, r4
 800fe90:	4629      	mov	r1, r5
 800fe92:	f7f0 fe21 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe96:	b118      	cbz	r0, 800fea0 <_dtoa_r+0x4e0>
 800fe98:	f018 0f01 	tst.w	r8, #1
 800fe9c:	f040 80ee 	bne.w	801007c <_dtoa_r+0x6bc>
 800fea0:	4649      	mov	r1, r9
 800fea2:	4658      	mov	r0, fp
 800fea4:	f000 fbda 	bl	801065c <_Bfree>
 800fea8:	2300      	movs	r3, #0
 800feaa:	7033      	strb	r3, [r6, #0]
 800feac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800feae:	3701      	adds	r7, #1
 800feb0:	601f      	str	r7, [r3, #0]
 800feb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 831d 	beq.w	80104f4 <_dtoa_r+0xb34>
 800feba:	601e      	str	r6, [r3, #0]
 800febc:	e31a      	b.n	80104f4 <_dtoa_r+0xb34>
 800febe:	07e2      	lsls	r2, r4, #31
 800fec0:	d505      	bpl.n	800fece <_dtoa_r+0x50e>
 800fec2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fec6:	f7f0 fb9f 	bl	8000608 <__aeabi_dmul>
 800feca:	3601      	adds	r6, #1
 800fecc:	2301      	movs	r3, #1
 800fece:	1064      	asrs	r4, r4, #1
 800fed0:	3508      	adds	r5, #8
 800fed2:	e73f      	b.n	800fd54 <_dtoa_r+0x394>
 800fed4:	2602      	movs	r6, #2
 800fed6:	e742      	b.n	800fd5e <_dtoa_r+0x39e>
 800fed8:	9c07      	ldr	r4, [sp, #28]
 800feda:	9704      	str	r7, [sp, #16]
 800fedc:	e761      	b.n	800fda2 <_dtoa_r+0x3e2>
 800fede:	4b27      	ldr	r3, [pc, #156]	@ (800ff7c <_dtoa_r+0x5bc>)
 800fee0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fee2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fee6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800feea:	4454      	add	r4, sl
 800feec:	2900      	cmp	r1, #0
 800feee:	d053      	beq.n	800ff98 <_dtoa_r+0x5d8>
 800fef0:	4928      	ldr	r1, [pc, #160]	@ (800ff94 <_dtoa_r+0x5d4>)
 800fef2:	2000      	movs	r0, #0
 800fef4:	f7f0 fcb2 	bl	800085c <__aeabi_ddiv>
 800fef8:	4633      	mov	r3, r6
 800fefa:	462a      	mov	r2, r5
 800fefc:	f7f0 f9cc 	bl	8000298 <__aeabi_dsub>
 800ff00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff04:	4656      	mov	r6, sl
 800ff06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff0a:	f7f0 fe2d 	bl	8000b68 <__aeabi_d2iz>
 800ff0e:	4605      	mov	r5, r0
 800ff10:	f7f0 fb10 	bl	8000534 <__aeabi_i2d>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff1c:	f7f0 f9bc 	bl	8000298 <__aeabi_dsub>
 800ff20:	3530      	adds	r5, #48	@ 0x30
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff2a:	f806 5b01 	strb.w	r5, [r6], #1
 800ff2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff32:	f7f0 fddb 	bl	8000aec <__aeabi_dcmplt>
 800ff36:	2800      	cmp	r0, #0
 800ff38:	d171      	bne.n	801001e <_dtoa_r+0x65e>
 800ff3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff3e:	4911      	ldr	r1, [pc, #68]	@ (800ff84 <_dtoa_r+0x5c4>)
 800ff40:	2000      	movs	r0, #0
 800ff42:	f7f0 f9a9 	bl	8000298 <__aeabi_dsub>
 800ff46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff4a:	f7f0 fdcf 	bl	8000aec <__aeabi_dcmplt>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	f040 8095 	bne.w	801007e <_dtoa_r+0x6be>
 800ff54:	42a6      	cmp	r6, r4
 800ff56:	f43f af50 	beq.w	800fdfa <_dtoa_r+0x43a>
 800ff5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ff5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ff88 <_dtoa_r+0x5c8>)
 800ff60:	2200      	movs	r2, #0
 800ff62:	f7f0 fb51 	bl	8000608 <__aeabi_dmul>
 800ff66:	4b08      	ldr	r3, [pc, #32]	@ (800ff88 <_dtoa_r+0x5c8>)
 800ff68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff72:	f7f0 fb49 	bl	8000608 <__aeabi_dmul>
 800ff76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff7a:	e7c4      	b.n	800ff06 <_dtoa_r+0x546>
 800ff7c:	08011dc0 	.word	0x08011dc0
 800ff80:	08011d98 	.word	0x08011d98
 800ff84:	3ff00000 	.word	0x3ff00000
 800ff88:	40240000 	.word	0x40240000
 800ff8c:	401c0000 	.word	0x401c0000
 800ff90:	40140000 	.word	0x40140000
 800ff94:	3fe00000 	.word	0x3fe00000
 800ff98:	4631      	mov	r1, r6
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f7f0 fb34 	bl	8000608 <__aeabi_dmul>
 800ffa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ffa4:	9415      	str	r4, [sp, #84]	@ 0x54
 800ffa6:	4656      	mov	r6, sl
 800ffa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffac:	f7f0 fddc 	bl	8000b68 <__aeabi_d2iz>
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	f7f0 fabf 	bl	8000534 <__aeabi_i2d>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	460b      	mov	r3, r1
 800ffba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffbe:	f7f0 f96b 	bl	8000298 <__aeabi_dsub>
 800ffc2:	3530      	adds	r5, #48	@ 0x30
 800ffc4:	f806 5b01 	strb.w	r5, [r6], #1
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	42a6      	cmp	r6, r4
 800ffce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ffd2:	f04f 0200 	mov.w	r2, #0
 800ffd6:	d124      	bne.n	8010022 <_dtoa_r+0x662>
 800ffd8:	4bac      	ldr	r3, [pc, #688]	@ (801028c <_dtoa_r+0x8cc>)
 800ffda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ffde:	f7f0 f95d 	bl	800029c <__adddf3>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffea:	f7f0 fd9d 	bl	8000b28 <__aeabi_dcmpgt>
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d145      	bne.n	801007e <_dtoa_r+0x6be>
 800fff2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fff6:	49a5      	ldr	r1, [pc, #660]	@ (801028c <_dtoa_r+0x8cc>)
 800fff8:	2000      	movs	r0, #0
 800fffa:	f7f0 f94d 	bl	8000298 <__aeabi_dsub>
 800fffe:	4602      	mov	r2, r0
 8010000:	460b      	mov	r3, r1
 8010002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010006:	f7f0 fd71 	bl	8000aec <__aeabi_dcmplt>
 801000a:	2800      	cmp	r0, #0
 801000c:	f43f aef5 	beq.w	800fdfa <_dtoa_r+0x43a>
 8010010:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010012:	1e73      	subs	r3, r6, #1
 8010014:	9315      	str	r3, [sp, #84]	@ 0x54
 8010016:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801001a:	2b30      	cmp	r3, #48	@ 0x30
 801001c:	d0f8      	beq.n	8010010 <_dtoa_r+0x650>
 801001e:	9f04      	ldr	r7, [sp, #16]
 8010020:	e73e      	b.n	800fea0 <_dtoa_r+0x4e0>
 8010022:	4b9b      	ldr	r3, [pc, #620]	@ (8010290 <_dtoa_r+0x8d0>)
 8010024:	f7f0 faf0 	bl	8000608 <__aeabi_dmul>
 8010028:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801002c:	e7bc      	b.n	800ffa8 <_dtoa_r+0x5e8>
 801002e:	d10c      	bne.n	801004a <_dtoa_r+0x68a>
 8010030:	4b98      	ldr	r3, [pc, #608]	@ (8010294 <_dtoa_r+0x8d4>)
 8010032:	2200      	movs	r2, #0
 8010034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010038:	f7f0 fae6 	bl	8000608 <__aeabi_dmul>
 801003c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010040:	f7f0 fd68 	bl	8000b14 <__aeabi_dcmpge>
 8010044:	2800      	cmp	r0, #0
 8010046:	f000 8157 	beq.w	80102f8 <_dtoa_r+0x938>
 801004a:	2400      	movs	r4, #0
 801004c:	4625      	mov	r5, r4
 801004e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010050:	43db      	mvns	r3, r3
 8010052:	9304      	str	r3, [sp, #16]
 8010054:	4656      	mov	r6, sl
 8010056:	2700      	movs	r7, #0
 8010058:	4621      	mov	r1, r4
 801005a:	4658      	mov	r0, fp
 801005c:	f000 fafe 	bl	801065c <_Bfree>
 8010060:	2d00      	cmp	r5, #0
 8010062:	d0dc      	beq.n	801001e <_dtoa_r+0x65e>
 8010064:	b12f      	cbz	r7, 8010072 <_dtoa_r+0x6b2>
 8010066:	42af      	cmp	r7, r5
 8010068:	d003      	beq.n	8010072 <_dtoa_r+0x6b2>
 801006a:	4639      	mov	r1, r7
 801006c:	4658      	mov	r0, fp
 801006e:	f000 faf5 	bl	801065c <_Bfree>
 8010072:	4629      	mov	r1, r5
 8010074:	4658      	mov	r0, fp
 8010076:	f000 faf1 	bl	801065c <_Bfree>
 801007a:	e7d0      	b.n	801001e <_dtoa_r+0x65e>
 801007c:	9704      	str	r7, [sp, #16]
 801007e:	4633      	mov	r3, r6
 8010080:	461e      	mov	r6, r3
 8010082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010086:	2a39      	cmp	r2, #57	@ 0x39
 8010088:	d107      	bne.n	801009a <_dtoa_r+0x6da>
 801008a:	459a      	cmp	sl, r3
 801008c:	d1f8      	bne.n	8010080 <_dtoa_r+0x6c0>
 801008e:	9a04      	ldr	r2, [sp, #16]
 8010090:	3201      	adds	r2, #1
 8010092:	9204      	str	r2, [sp, #16]
 8010094:	2230      	movs	r2, #48	@ 0x30
 8010096:	f88a 2000 	strb.w	r2, [sl]
 801009a:	781a      	ldrb	r2, [r3, #0]
 801009c:	3201      	adds	r2, #1
 801009e:	701a      	strb	r2, [r3, #0]
 80100a0:	e7bd      	b.n	801001e <_dtoa_r+0x65e>
 80100a2:	4b7b      	ldr	r3, [pc, #492]	@ (8010290 <_dtoa_r+0x8d0>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	f7f0 faaf 	bl	8000608 <__aeabi_dmul>
 80100aa:	2200      	movs	r2, #0
 80100ac:	2300      	movs	r3, #0
 80100ae:	4604      	mov	r4, r0
 80100b0:	460d      	mov	r5, r1
 80100b2:	f7f0 fd11 	bl	8000ad8 <__aeabi_dcmpeq>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f43f aebb 	beq.w	800fe32 <_dtoa_r+0x472>
 80100bc:	e6f0      	b.n	800fea0 <_dtoa_r+0x4e0>
 80100be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100c0:	2a00      	cmp	r2, #0
 80100c2:	f000 80db 	beq.w	801027c <_dtoa_r+0x8bc>
 80100c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100c8:	2a01      	cmp	r2, #1
 80100ca:	f300 80bf 	bgt.w	801024c <_dtoa_r+0x88c>
 80100ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80100d0:	2a00      	cmp	r2, #0
 80100d2:	f000 80b7 	beq.w	8010244 <_dtoa_r+0x884>
 80100d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80100da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80100dc:	4646      	mov	r6, r8
 80100de:	9a08      	ldr	r2, [sp, #32]
 80100e0:	2101      	movs	r1, #1
 80100e2:	441a      	add	r2, r3
 80100e4:	4658      	mov	r0, fp
 80100e6:	4498      	add	r8, r3
 80100e8:	9208      	str	r2, [sp, #32]
 80100ea:	f000 fb6b 	bl	80107c4 <__i2b>
 80100ee:	4605      	mov	r5, r0
 80100f0:	b15e      	cbz	r6, 801010a <_dtoa_r+0x74a>
 80100f2:	9b08      	ldr	r3, [sp, #32]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	dd08      	ble.n	801010a <_dtoa_r+0x74a>
 80100f8:	42b3      	cmp	r3, r6
 80100fa:	9a08      	ldr	r2, [sp, #32]
 80100fc:	bfa8      	it	ge
 80100fe:	4633      	movge	r3, r6
 8010100:	eba8 0803 	sub.w	r8, r8, r3
 8010104:	1af6      	subs	r6, r6, r3
 8010106:	1ad3      	subs	r3, r2, r3
 8010108:	9308      	str	r3, [sp, #32]
 801010a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801010c:	b1f3      	cbz	r3, 801014c <_dtoa_r+0x78c>
 801010e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010110:	2b00      	cmp	r3, #0
 8010112:	f000 80b7 	beq.w	8010284 <_dtoa_r+0x8c4>
 8010116:	b18c      	cbz	r4, 801013c <_dtoa_r+0x77c>
 8010118:	4629      	mov	r1, r5
 801011a:	4622      	mov	r2, r4
 801011c:	4658      	mov	r0, fp
 801011e:	f000 fc11 	bl	8010944 <__pow5mult>
 8010122:	464a      	mov	r2, r9
 8010124:	4601      	mov	r1, r0
 8010126:	4605      	mov	r5, r0
 8010128:	4658      	mov	r0, fp
 801012a:	f000 fb61 	bl	80107f0 <__multiply>
 801012e:	4649      	mov	r1, r9
 8010130:	9004      	str	r0, [sp, #16]
 8010132:	4658      	mov	r0, fp
 8010134:	f000 fa92 	bl	801065c <_Bfree>
 8010138:	9b04      	ldr	r3, [sp, #16]
 801013a:	4699      	mov	r9, r3
 801013c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801013e:	1b1a      	subs	r2, r3, r4
 8010140:	d004      	beq.n	801014c <_dtoa_r+0x78c>
 8010142:	4649      	mov	r1, r9
 8010144:	4658      	mov	r0, fp
 8010146:	f000 fbfd 	bl	8010944 <__pow5mult>
 801014a:	4681      	mov	r9, r0
 801014c:	2101      	movs	r1, #1
 801014e:	4658      	mov	r0, fp
 8010150:	f000 fb38 	bl	80107c4 <__i2b>
 8010154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010156:	4604      	mov	r4, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	f000 81cf 	beq.w	80104fc <_dtoa_r+0xb3c>
 801015e:	461a      	mov	r2, r3
 8010160:	4601      	mov	r1, r0
 8010162:	4658      	mov	r0, fp
 8010164:	f000 fbee 	bl	8010944 <__pow5mult>
 8010168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801016a:	2b01      	cmp	r3, #1
 801016c:	4604      	mov	r4, r0
 801016e:	f300 8095 	bgt.w	801029c <_dtoa_r+0x8dc>
 8010172:	9b02      	ldr	r3, [sp, #8]
 8010174:	2b00      	cmp	r3, #0
 8010176:	f040 8087 	bne.w	8010288 <_dtoa_r+0x8c8>
 801017a:	9b03      	ldr	r3, [sp, #12]
 801017c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010180:	2b00      	cmp	r3, #0
 8010182:	f040 8089 	bne.w	8010298 <_dtoa_r+0x8d8>
 8010186:	9b03      	ldr	r3, [sp, #12]
 8010188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801018c:	0d1b      	lsrs	r3, r3, #20
 801018e:	051b      	lsls	r3, r3, #20
 8010190:	b12b      	cbz	r3, 801019e <_dtoa_r+0x7de>
 8010192:	9b08      	ldr	r3, [sp, #32]
 8010194:	3301      	adds	r3, #1
 8010196:	9308      	str	r3, [sp, #32]
 8010198:	f108 0801 	add.w	r8, r8, #1
 801019c:	2301      	movs	r3, #1
 801019e:	930a      	str	r3, [sp, #40]	@ 0x28
 80101a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f000 81b0 	beq.w	8010508 <_dtoa_r+0xb48>
 80101a8:	6923      	ldr	r3, [r4, #16]
 80101aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101ae:	6918      	ldr	r0, [r3, #16]
 80101b0:	f000 fabc 	bl	801072c <__hi0bits>
 80101b4:	f1c0 0020 	rsb	r0, r0, #32
 80101b8:	9b08      	ldr	r3, [sp, #32]
 80101ba:	4418      	add	r0, r3
 80101bc:	f010 001f 	ands.w	r0, r0, #31
 80101c0:	d077      	beq.n	80102b2 <_dtoa_r+0x8f2>
 80101c2:	f1c0 0320 	rsb	r3, r0, #32
 80101c6:	2b04      	cmp	r3, #4
 80101c8:	dd6b      	ble.n	80102a2 <_dtoa_r+0x8e2>
 80101ca:	9b08      	ldr	r3, [sp, #32]
 80101cc:	f1c0 001c 	rsb	r0, r0, #28
 80101d0:	4403      	add	r3, r0
 80101d2:	4480      	add	r8, r0
 80101d4:	4406      	add	r6, r0
 80101d6:	9308      	str	r3, [sp, #32]
 80101d8:	f1b8 0f00 	cmp.w	r8, #0
 80101dc:	dd05      	ble.n	80101ea <_dtoa_r+0x82a>
 80101de:	4649      	mov	r1, r9
 80101e0:	4642      	mov	r2, r8
 80101e2:	4658      	mov	r0, fp
 80101e4:	f000 fc08 	bl	80109f8 <__lshift>
 80101e8:	4681      	mov	r9, r0
 80101ea:	9b08      	ldr	r3, [sp, #32]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	dd05      	ble.n	80101fc <_dtoa_r+0x83c>
 80101f0:	4621      	mov	r1, r4
 80101f2:	461a      	mov	r2, r3
 80101f4:	4658      	mov	r0, fp
 80101f6:	f000 fbff 	bl	80109f8 <__lshift>
 80101fa:	4604      	mov	r4, r0
 80101fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d059      	beq.n	80102b6 <_dtoa_r+0x8f6>
 8010202:	4621      	mov	r1, r4
 8010204:	4648      	mov	r0, r9
 8010206:	f000 fc63 	bl	8010ad0 <__mcmp>
 801020a:	2800      	cmp	r0, #0
 801020c:	da53      	bge.n	80102b6 <_dtoa_r+0x8f6>
 801020e:	1e7b      	subs	r3, r7, #1
 8010210:	9304      	str	r3, [sp, #16]
 8010212:	4649      	mov	r1, r9
 8010214:	2300      	movs	r3, #0
 8010216:	220a      	movs	r2, #10
 8010218:	4658      	mov	r0, fp
 801021a:	f000 fa41 	bl	80106a0 <__multadd>
 801021e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010220:	4681      	mov	r9, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 8172 	beq.w	801050c <_dtoa_r+0xb4c>
 8010228:	2300      	movs	r3, #0
 801022a:	4629      	mov	r1, r5
 801022c:	220a      	movs	r2, #10
 801022e:	4658      	mov	r0, fp
 8010230:	f000 fa36 	bl	80106a0 <__multadd>
 8010234:	9b00      	ldr	r3, [sp, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	4605      	mov	r5, r0
 801023a:	dc67      	bgt.n	801030c <_dtoa_r+0x94c>
 801023c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801023e:	2b02      	cmp	r3, #2
 8010240:	dc41      	bgt.n	80102c6 <_dtoa_r+0x906>
 8010242:	e063      	b.n	801030c <_dtoa_r+0x94c>
 8010244:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010246:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801024a:	e746      	b.n	80100da <_dtoa_r+0x71a>
 801024c:	9b07      	ldr	r3, [sp, #28]
 801024e:	1e5c      	subs	r4, r3, #1
 8010250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010252:	42a3      	cmp	r3, r4
 8010254:	bfbf      	itttt	lt
 8010256:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010258:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801025a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801025c:	1ae3      	sublt	r3, r4, r3
 801025e:	bfb4      	ite	lt
 8010260:	18d2      	addlt	r2, r2, r3
 8010262:	1b1c      	subge	r4, r3, r4
 8010264:	9b07      	ldr	r3, [sp, #28]
 8010266:	bfbc      	itt	lt
 8010268:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801026a:	2400      	movlt	r4, #0
 801026c:	2b00      	cmp	r3, #0
 801026e:	bfb5      	itete	lt
 8010270:	eba8 0603 	sublt.w	r6, r8, r3
 8010274:	9b07      	ldrge	r3, [sp, #28]
 8010276:	2300      	movlt	r3, #0
 8010278:	4646      	movge	r6, r8
 801027a:	e730      	b.n	80100de <_dtoa_r+0x71e>
 801027c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801027e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010280:	4646      	mov	r6, r8
 8010282:	e735      	b.n	80100f0 <_dtoa_r+0x730>
 8010284:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010286:	e75c      	b.n	8010142 <_dtoa_r+0x782>
 8010288:	2300      	movs	r3, #0
 801028a:	e788      	b.n	801019e <_dtoa_r+0x7de>
 801028c:	3fe00000 	.word	0x3fe00000
 8010290:	40240000 	.word	0x40240000
 8010294:	40140000 	.word	0x40140000
 8010298:	9b02      	ldr	r3, [sp, #8]
 801029a:	e780      	b.n	801019e <_dtoa_r+0x7de>
 801029c:	2300      	movs	r3, #0
 801029e:	930a      	str	r3, [sp, #40]	@ 0x28
 80102a0:	e782      	b.n	80101a8 <_dtoa_r+0x7e8>
 80102a2:	d099      	beq.n	80101d8 <_dtoa_r+0x818>
 80102a4:	9a08      	ldr	r2, [sp, #32]
 80102a6:	331c      	adds	r3, #28
 80102a8:	441a      	add	r2, r3
 80102aa:	4498      	add	r8, r3
 80102ac:	441e      	add	r6, r3
 80102ae:	9208      	str	r2, [sp, #32]
 80102b0:	e792      	b.n	80101d8 <_dtoa_r+0x818>
 80102b2:	4603      	mov	r3, r0
 80102b4:	e7f6      	b.n	80102a4 <_dtoa_r+0x8e4>
 80102b6:	9b07      	ldr	r3, [sp, #28]
 80102b8:	9704      	str	r7, [sp, #16]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	dc20      	bgt.n	8010300 <_dtoa_r+0x940>
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	dd1e      	ble.n	8010304 <_dtoa_r+0x944>
 80102c6:	9b00      	ldr	r3, [sp, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f47f aec0 	bne.w	801004e <_dtoa_r+0x68e>
 80102ce:	4621      	mov	r1, r4
 80102d0:	2205      	movs	r2, #5
 80102d2:	4658      	mov	r0, fp
 80102d4:	f000 f9e4 	bl	80106a0 <__multadd>
 80102d8:	4601      	mov	r1, r0
 80102da:	4604      	mov	r4, r0
 80102dc:	4648      	mov	r0, r9
 80102de:	f000 fbf7 	bl	8010ad0 <__mcmp>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	f77f aeb3 	ble.w	801004e <_dtoa_r+0x68e>
 80102e8:	4656      	mov	r6, sl
 80102ea:	2331      	movs	r3, #49	@ 0x31
 80102ec:	f806 3b01 	strb.w	r3, [r6], #1
 80102f0:	9b04      	ldr	r3, [sp, #16]
 80102f2:	3301      	adds	r3, #1
 80102f4:	9304      	str	r3, [sp, #16]
 80102f6:	e6ae      	b.n	8010056 <_dtoa_r+0x696>
 80102f8:	9c07      	ldr	r4, [sp, #28]
 80102fa:	9704      	str	r7, [sp, #16]
 80102fc:	4625      	mov	r5, r4
 80102fe:	e7f3      	b.n	80102e8 <_dtoa_r+0x928>
 8010300:	9b07      	ldr	r3, [sp, #28]
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 8104 	beq.w	8010514 <_dtoa_r+0xb54>
 801030c:	2e00      	cmp	r6, #0
 801030e:	dd05      	ble.n	801031c <_dtoa_r+0x95c>
 8010310:	4629      	mov	r1, r5
 8010312:	4632      	mov	r2, r6
 8010314:	4658      	mov	r0, fp
 8010316:	f000 fb6f 	bl	80109f8 <__lshift>
 801031a:	4605      	mov	r5, r0
 801031c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801031e:	2b00      	cmp	r3, #0
 8010320:	d05a      	beq.n	80103d8 <_dtoa_r+0xa18>
 8010322:	6869      	ldr	r1, [r5, #4]
 8010324:	4658      	mov	r0, fp
 8010326:	f000 f959 	bl	80105dc <_Balloc>
 801032a:	4606      	mov	r6, r0
 801032c:	b928      	cbnz	r0, 801033a <_dtoa_r+0x97a>
 801032e:	4b84      	ldr	r3, [pc, #528]	@ (8010540 <_dtoa_r+0xb80>)
 8010330:	4602      	mov	r2, r0
 8010332:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010336:	f7ff bb5a 	b.w	800f9ee <_dtoa_r+0x2e>
 801033a:	692a      	ldr	r2, [r5, #16]
 801033c:	3202      	adds	r2, #2
 801033e:	0092      	lsls	r2, r2, #2
 8010340:	f105 010c 	add.w	r1, r5, #12
 8010344:	300c      	adds	r0, #12
 8010346:	f7ff faa4 	bl	800f892 <memcpy>
 801034a:	2201      	movs	r2, #1
 801034c:	4631      	mov	r1, r6
 801034e:	4658      	mov	r0, fp
 8010350:	f000 fb52 	bl	80109f8 <__lshift>
 8010354:	f10a 0301 	add.w	r3, sl, #1
 8010358:	9307      	str	r3, [sp, #28]
 801035a:	9b00      	ldr	r3, [sp, #0]
 801035c:	4453      	add	r3, sl
 801035e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010360:	9b02      	ldr	r3, [sp, #8]
 8010362:	f003 0301 	and.w	r3, r3, #1
 8010366:	462f      	mov	r7, r5
 8010368:	930a      	str	r3, [sp, #40]	@ 0x28
 801036a:	4605      	mov	r5, r0
 801036c:	9b07      	ldr	r3, [sp, #28]
 801036e:	4621      	mov	r1, r4
 8010370:	3b01      	subs	r3, #1
 8010372:	4648      	mov	r0, r9
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	f7ff fa9a 	bl	800f8ae <quorem>
 801037a:	4639      	mov	r1, r7
 801037c:	9002      	str	r0, [sp, #8]
 801037e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010382:	4648      	mov	r0, r9
 8010384:	f000 fba4 	bl	8010ad0 <__mcmp>
 8010388:	462a      	mov	r2, r5
 801038a:	9008      	str	r0, [sp, #32]
 801038c:	4621      	mov	r1, r4
 801038e:	4658      	mov	r0, fp
 8010390:	f000 fbba 	bl	8010b08 <__mdiff>
 8010394:	68c2      	ldr	r2, [r0, #12]
 8010396:	4606      	mov	r6, r0
 8010398:	bb02      	cbnz	r2, 80103dc <_dtoa_r+0xa1c>
 801039a:	4601      	mov	r1, r0
 801039c:	4648      	mov	r0, r9
 801039e:	f000 fb97 	bl	8010ad0 <__mcmp>
 80103a2:	4602      	mov	r2, r0
 80103a4:	4631      	mov	r1, r6
 80103a6:	4658      	mov	r0, fp
 80103a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80103aa:	f000 f957 	bl	801065c <_Bfree>
 80103ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103b2:	9e07      	ldr	r6, [sp, #28]
 80103b4:	ea43 0102 	orr.w	r1, r3, r2
 80103b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ba:	4319      	orrs	r1, r3
 80103bc:	d110      	bne.n	80103e0 <_dtoa_r+0xa20>
 80103be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103c2:	d029      	beq.n	8010418 <_dtoa_r+0xa58>
 80103c4:	9b08      	ldr	r3, [sp, #32]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	dd02      	ble.n	80103d0 <_dtoa_r+0xa10>
 80103ca:	9b02      	ldr	r3, [sp, #8]
 80103cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80103d0:	9b00      	ldr	r3, [sp, #0]
 80103d2:	f883 8000 	strb.w	r8, [r3]
 80103d6:	e63f      	b.n	8010058 <_dtoa_r+0x698>
 80103d8:	4628      	mov	r0, r5
 80103da:	e7bb      	b.n	8010354 <_dtoa_r+0x994>
 80103dc:	2201      	movs	r2, #1
 80103de:	e7e1      	b.n	80103a4 <_dtoa_r+0x9e4>
 80103e0:	9b08      	ldr	r3, [sp, #32]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	db04      	blt.n	80103f0 <_dtoa_r+0xa30>
 80103e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80103e8:	430b      	orrs	r3, r1
 80103ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80103ec:	430b      	orrs	r3, r1
 80103ee:	d120      	bne.n	8010432 <_dtoa_r+0xa72>
 80103f0:	2a00      	cmp	r2, #0
 80103f2:	dded      	ble.n	80103d0 <_dtoa_r+0xa10>
 80103f4:	4649      	mov	r1, r9
 80103f6:	2201      	movs	r2, #1
 80103f8:	4658      	mov	r0, fp
 80103fa:	f000 fafd 	bl	80109f8 <__lshift>
 80103fe:	4621      	mov	r1, r4
 8010400:	4681      	mov	r9, r0
 8010402:	f000 fb65 	bl	8010ad0 <__mcmp>
 8010406:	2800      	cmp	r0, #0
 8010408:	dc03      	bgt.n	8010412 <_dtoa_r+0xa52>
 801040a:	d1e1      	bne.n	80103d0 <_dtoa_r+0xa10>
 801040c:	f018 0f01 	tst.w	r8, #1
 8010410:	d0de      	beq.n	80103d0 <_dtoa_r+0xa10>
 8010412:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010416:	d1d8      	bne.n	80103ca <_dtoa_r+0xa0a>
 8010418:	9a00      	ldr	r2, [sp, #0]
 801041a:	2339      	movs	r3, #57	@ 0x39
 801041c:	7013      	strb	r3, [r2, #0]
 801041e:	4633      	mov	r3, r6
 8010420:	461e      	mov	r6, r3
 8010422:	3b01      	subs	r3, #1
 8010424:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010428:	2a39      	cmp	r2, #57	@ 0x39
 801042a:	d052      	beq.n	80104d2 <_dtoa_r+0xb12>
 801042c:	3201      	adds	r2, #1
 801042e:	701a      	strb	r2, [r3, #0]
 8010430:	e612      	b.n	8010058 <_dtoa_r+0x698>
 8010432:	2a00      	cmp	r2, #0
 8010434:	dd07      	ble.n	8010446 <_dtoa_r+0xa86>
 8010436:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801043a:	d0ed      	beq.n	8010418 <_dtoa_r+0xa58>
 801043c:	9a00      	ldr	r2, [sp, #0]
 801043e:	f108 0301 	add.w	r3, r8, #1
 8010442:	7013      	strb	r3, [r2, #0]
 8010444:	e608      	b.n	8010058 <_dtoa_r+0x698>
 8010446:	9b07      	ldr	r3, [sp, #28]
 8010448:	9a07      	ldr	r2, [sp, #28]
 801044a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801044e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010450:	4293      	cmp	r3, r2
 8010452:	d028      	beq.n	80104a6 <_dtoa_r+0xae6>
 8010454:	4649      	mov	r1, r9
 8010456:	2300      	movs	r3, #0
 8010458:	220a      	movs	r2, #10
 801045a:	4658      	mov	r0, fp
 801045c:	f000 f920 	bl	80106a0 <__multadd>
 8010460:	42af      	cmp	r7, r5
 8010462:	4681      	mov	r9, r0
 8010464:	f04f 0300 	mov.w	r3, #0
 8010468:	f04f 020a 	mov.w	r2, #10
 801046c:	4639      	mov	r1, r7
 801046e:	4658      	mov	r0, fp
 8010470:	d107      	bne.n	8010482 <_dtoa_r+0xac2>
 8010472:	f000 f915 	bl	80106a0 <__multadd>
 8010476:	4607      	mov	r7, r0
 8010478:	4605      	mov	r5, r0
 801047a:	9b07      	ldr	r3, [sp, #28]
 801047c:	3301      	adds	r3, #1
 801047e:	9307      	str	r3, [sp, #28]
 8010480:	e774      	b.n	801036c <_dtoa_r+0x9ac>
 8010482:	f000 f90d 	bl	80106a0 <__multadd>
 8010486:	4629      	mov	r1, r5
 8010488:	4607      	mov	r7, r0
 801048a:	2300      	movs	r3, #0
 801048c:	220a      	movs	r2, #10
 801048e:	4658      	mov	r0, fp
 8010490:	f000 f906 	bl	80106a0 <__multadd>
 8010494:	4605      	mov	r5, r0
 8010496:	e7f0      	b.n	801047a <_dtoa_r+0xaba>
 8010498:	9b00      	ldr	r3, [sp, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	bfcc      	ite	gt
 801049e:	461e      	movgt	r6, r3
 80104a0:	2601      	movle	r6, #1
 80104a2:	4456      	add	r6, sl
 80104a4:	2700      	movs	r7, #0
 80104a6:	4649      	mov	r1, r9
 80104a8:	2201      	movs	r2, #1
 80104aa:	4658      	mov	r0, fp
 80104ac:	f000 faa4 	bl	80109f8 <__lshift>
 80104b0:	4621      	mov	r1, r4
 80104b2:	4681      	mov	r9, r0
 80104b4:	f000 fb0c 	bl	8010ad0 <__mcmp>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	dcb0      	bgt.n	801041e <_dtoa_r+0xa5e>
 80104bc:	d102      	bne.n	80104c4 <_dtoa_r+0xb04>
 80104be:	f018 0f01 	tst.w	r8, #1
 80104c2:	d1ac      	bne.n	801041e <_dtoa_r+0xa5e>
 80104c4:	4633      	mov	r3, r6
 80104c6:	461e      	mov	r6, r3
 80104c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104cc:	2a30      	cmp	r2, #48	@ 0x30
 80104ce:	d0fa      	beq.n	80104c6 <_dtoa_r+0xb06>
 80104d0:	e5c2      	b.n	8010058 <_dtoa_r+0x698>
 80104d2:	459a      	cmp	sl, r3
 80104d4:	d1a4      	bne.n	8010420 <_dtoa_r+0xa60>
 80104d6:	9b04      	ldr	r3, [sp, #16]
 80104d8:	3301      	adds	r3, #1
 80104da:	9304      	str	r3, [sp, #16]
 80104dc:	2331      	movs	r3, #49	@ 0x31
 80104de:	f88a 3000 	strb.w	r3, [sl]
 80104e2:	e5b9      	b.n	8010058 <_dtoa_r+0x698>
 80104e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010544 <_dtoa_r+0xb84>
 80104ea:	b11b      	cbz	r3, 80104f4 <_dtoa_r+0xb34>
 80104ec:	f10a 0308 	add.w	r3, sl, #8
 80104f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80104f2:	6013      	str	r3, [r2, #0]
 80104f4:	4650      	mov	r0, sl
 80104f6:	b019      	add	sp, #100	@ 0x64
 80104f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104fe:	2b01      	cmp	r3, #1
 8010500:	f77f ae37 	ble.w	8010172 <_dtoa_r+0x7b2>
 8010504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010506:	930a      	str	r3, [sp, #40]	@ 0x28
 8010508:	2001      	movs	r0, #1
 801050a:	e655      	b.n	80101b8 <_dtoa_r+0x7f8>
 801050c:	9b00      	ldr	r3, [sp, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	f77f aed6 	ble.w	80102c0 <_dtoa_r+0x900>
 8010514:	4656      	mov	r6, sl
 8010516:	4621      	mov	r1, r4
 8010518:	4648      	mov	r0, r9
 801051a:	f7ff f9c8 	bl	800f8ae <quorem>
 801051e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010522:	f806 8b01 	strb.w	r8, [r6], #1
 8010526:	9b00      	ldr	r3, [sp, #0]
 8010528:	eba6 020a 	sub.w	r2, r6, sl
 801052c:	4293      	cmp	r3, r2
 801052e:	ddb3      	ble.n	8010498 <_dtoa_r+0xad8>
 8010530:	4649      	mov	r1, r9
 8010532:	2300      	movs	r3, #0
 8010534:	220a      	movs	r2, #10
 8010536:	4658      	mov	r0, fp
 8010538:	f000 f8b2 	bl	80106a0 <__multadd>
 801053c:	4681      	mov	r9, r0
 801053e:	e7ea      	b.n	8010516 <_dtoa_r+0xb56>
 8010540:	08011d1c 	.word	0x08011d1c
 8010544:	08011ca0 	.word	0x08011ca0

08010548 <_free_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	4605      	mov	r5, r0
 801054c:	2900      	cmp	r1, #0
 801054e:	d041      	beq.n	80105d4 <_free_r+0x8c>
 8010550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010554:	1f0c      	subs	r4, r1, #4
 8010556:	2b00      	cmp	r3, #0
 8010558:	bfb8      	it	lt
 801055a:	18e4      	addlt	r4, r4, r3
 801055c:	f7fe fa7c 	bl	800ea58 <__malloc_lock>
 8010560:	4a1d      	ldr	r2, [pc, #116]	@ (80105d8 <_free_r+0x90>)
 8010562:	6813      	ldr	r3, [r2, #0]
 8010564:	b933      	cbnz	r3, 8010574 <_free_r+0x2c>
 8010566:	6063      	str	r3, [r4, #4]
 8010568:	6014      	str	r4, [r2, #0]
 801056a:	4628      	mov	r0, r5
 801056c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010570:	f7fe ba78 	b.w	800ea64 <__malloc_unlock>
 8010574:	42a3      	cmp	r3, r4
 8010576:	d908      	bls.n	801058a <_free_r+0x42>
 8010578:	6820      	ldr	r0, [r4, #0]
 801057a:	1821      	adds	r1, r4, r0
 801057c:	428b      	cmp	r3, r1
 801057e:	bf01      	itttt	eq
 8010580:	6819      	ldreq	r1, [r3, #0]
 8010582:	685b      	ldreq	r3, [r3, #4]
 8010584:	1809      	addeq	r1, r1, r0
 8010586:	6021      	streq	r1, [r4, #0]
 8010588:	e7ed      	b.n	8010566 <_free_r+0x1e>
 801058a:	461a      	mov	r2, r3
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	b10b      	cbz	r3, 8010594 <_free_r+0x4c>
 8010590:	42a3      	cmp	r3, r4
 8010592:	d9fa      	bls.n	801058a <_free_r+0x42>
 8010594:	6811      	ldr	r1, [r2, #0]
 8010596:	1850      	adds	r0, r2, r1
 8010598:	42a0      	cmp	r0, r4
 801059a:	d10b      	bne.n	80105b4 <_free_r+0x6c>
 801059c:	6820      	ldr	r0, [r4, #0]
 801059e:	4401      	add	r1, r0
 80105a0:	1850      	adds	r0, r2, r1
 80105a2:	4283      	cmp	r3, r0
 80105a4:	6011      	str	r1, [r2, #0]
 80105a6:	d1e0      	bne.n	801056a <_free_r+0x22>
 80105a8:	6818      	ldr	r0, [r3, #0]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	6053      	str	r3, [r2, #4]
 80105ae:	4408      	add	r0, r1
 80105b0:	6010      	str	r0, [r2, #0]
 80105b2:	e7da      	b.n	801056a <_free_r+0x22>
 80105b4:	d902      	bls.n	80105bc <_free_r+0x74>
 80105b6:	230c      	movs	r3, #12
 80105b8:	602b      	str	r3, [r5, #0]
 80105ba:	e7d6      	b.n	801056a <_free_r+0x22>
 80105bc:	6820      	ldr	r0, [r4, #0]
 80105be:	1821      	adds	r1, r4, r0
 80105c0:	428b      	cmp	r3, r1
 80105c2:	bf04      	itt	eq
 80105c4:	6819      	ldreq	r1, [r3, #0]
 80105c6:	685b      	ldreq	r3, [r3, #4]
 80105c8:	6063      	str	r3, [r4, #4]
 80105ca:	bf04      	itt	eq
 80105cc:	1809      	addeq	r1, r1, r0
 80105ce:	6021      	streq	r1, [r4, #0]
 80105d0:	6054      	str	r4, [r2, #4]
 80105d2:	e7ca      	b.n	801056a <_free_r+0x22>
 80105d4:	bd38      	pop	{r3, r4, r5, pc}
 80105d6:	bf00      	nop
 80105d8:	20000c38 	.word	0x20000c38

080105dc <_Balloc>:
 80105dc:	b570      	push	{r4, r5, r6, lr}
 80105de:	69c6      	ldr	r6, [r0, #28]
 80105e0:	4604      	mov	r4, r0
 80105e2:	460d      	mov	r5, r1
 80105e4:	b976      	cbnz	r6, 8010604 <_Balloc+0x28>
 80105e6:	2010      	movs	r0, #16
 80105e8:	f7fe f984 	bl	800e8f4 <malloc>
 80105ec:	4602      	mov	r2, r0
 80105ee:	61e0      	str	r0, [r4, #28]
 80105f0:	b920      	cbnz	r0, 80105fc <_Balloc+0x20>
 80105f2:	4b18      	ldr	r3, [pc, #96]	@ (8010654 <_Balloc+0x78>)
 80105f4:	4818      	ldr	r0, [pc, #96]	@ (8010658 <_Balloc+0x7c>)
 80105f6:	216b      	movs	r1, #107	@ 0x6b
 80105f8:	f000 ff56 	bl	80114a8 <__assert_func>
 80105fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010600:	6006      	str	r6, [r0, #0]
 8010602:	60c6      	str	r6, [r0, #12]
 8010604:	69e6      	ldr	r6, [r4, #28]
 8010606:	68f3      	ldr	r3, [r6, #12]
 8010608:	b183      	cbz	r3, 801062c <_Balloc+0x50>
 801060a:	69e3      	ldr	r3, [r4, #28]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010612:	b9b8      	cbnz	r0, 8010644 <_Balloc+0x68>
 8010614:	2101      	movs	r1, #1
 8010616:	fa01 f605 	lsl.w	r6, r1, r5
 801061a:	1d72      	adds	r2, r6, #5
 801061c:	0092      	lsls	r2, r2, #2
 801061e:	4620      	mov	r0, r4
 8010620:	f000 ff60 	bl	80114e4 <_calloc_r>
 8010624:	b160      	cbz	r0, 8010640 <_Balloc+0x64>
 8010626:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801062a:	e00e      	b.n	801064a <_Balloc+0x6e>
 801062c:	2221      	movs	r2, #33	@ 0x21
 801062e:	2104      	movs	r1, #4
 8010630:	4620      	mov	r0, r4
 8010632:	f000 ff57 	bl	80114e4 <_calloc_r>
 8010636:	69e3      	ldr	r3, [r4, #28]
 8010638:	60f0      	str	r0, [r6, #12]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1e4      	bne.n	801060a <_Balloc+0x2e>
 8010640:	2000      	movs	r0, #0
 8010642:	bd70      	pop	{r4, r5, r6, pc}
 8010644:	6802      	ldr	r2, [r0, #0]
 8010646:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801064a:	2300      	movs	r3, #0
 801064c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010650:	e7f7      	b.n	8010642 <_Balloc+0x66>
 8010652:	bf00      	nop
 8010654:	08011cad 	.word	0x08011cad
 8010658:	08011d2d 	.word	0x08011d2d

0801065c <_Bfree>:
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	69c6      	ldr	r6, [r0, #28]
 8010660:	4605      	mov	r5, r0
 8010662:	460c      	mov	r4, r1
 8010664:	b976      	cbnz	r6, 8010684 <_Bfree+0x28>
 8010666:	2010      	movs	r0, #16
 8010668:	f7fe f944 	bl	800e8f4 <malloc>
 801066c:	4602      	mov	r2, r0
 801066e:	61e8      	str	r0, [r5, #28]
 8010670:	b920      	cbnz	r0, 801067c <_Bfree+0x20>
 8010672:	4b09      	ldr	r3, [pc, #36]	@ (8010698 <_Bfree+0x3c>)
 8010674:	4809      	ldr	r0, [pc, #36]	@ (801069c <_Bfree+0x40>)
 8010676:	218f      	movs	r1, #143	@ 0x8f
 8010678:	f000 ff16 	bl	80114a8 <__assert_func>
 801067c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010680:	6006      	str	r6, [r0, #0]
 8010682:	60c6      	str	r6, [r0, #12]
 8010684:	b13c      	cbz	r4, 8010696 <_Bfree+0x3a>
 8010686:	69eb      	ldr	r3, [r5, #28]
 8010688:	6862      	ldr	r2, [r4, #4]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010690:	6021      	str	r1, [r4, #0]
 8010692:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010696:	bd70      	pop	{r4, r5, r6, pc}
 8010698:	08011cad 	.word	0x08011cad
 801069c:	08011d2d 	.word	0x08011d2d

080106a0 <__multadd>:
 80106a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a4:	690d      	ldr	r5, [r1, #16]
 80106a6:	4607      	mov	r7, r0
 80106a8:	460c      	mov	r4, r1
 80106aa:	461e      	mov	r6, r3
 80106ac:	f101 0c14 	add.w	ip, r1, #20
 80106b0:	2000      	movs	r0, #0
 80106b2:	f8dc 3000 	ldr.w	r3, [ip]
 80106b6:	b299      	uxth	r1, r3
 80106b8:	fb02 6101 	mla	r1, r2, r1, r6
 80106bc:	0c1e      	lsrs	r6, r3, #16
 80106be:	0c0b      	lsrs	r3, r1, #16
 80106c0:	fb02 3306 	mla	r3, r2, r6, r3
 80106c4:	b289      	uxth	r1, r1
 80106c6:	3001      	adds	r0, #1
 80106c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106cc:	4285      	cmp	r5, r0
 80106ce:	f84c 1b04 	str.w	r1, [ip], #4
 80106d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80106d6:	dcec      	bgt.n	80106b2 <__multadd+0x12>
 80106d8:	b30e      	cbz	r6, 801071e <__multadd+0x7e>
 80106da:	68a3      	ldr	r3, [r4, #8]
 80106dc:	42ab      	cmp	r3, r5
 80106de:	dc19      	bgt.n	8010714 <__multadd+0x74>
 80106e0:	6861      	ldr	r1, [r4, #4]
 80106e2:	4638      	mov	r0, r7
 80106e4:	3101      	adds	r1, #1
 80106e6:	f7ff ff79 	bl	80105dc <_Balloc>
 80106ea:	4680      	mov	r8, r0
 80106ec:	b928      	cbnz	r0, 80106fa <__multadd+0x5a>
 80106ee:	4602      	mov	r2, r0
 80106f0:	4b0c      	ldr	r3, [pc, #48]	@ (8010724 <__multadd+0x84>)
 80106f2:	480d      	ldr	r0, [pc, #52]	@ (8010728 <__multadd+0x88>)
 80106f4:	21ba      	movs	r1, #186	@ 0xba
 80106f6:	f000 fed7 	bl	80114a8 <__assert_func>
 80106fa:	6922      	ldr	r2, [r4, #16]
 80106fc:	3202      	adds	r2, #2
 80106fe:	f104 010c 	add.w	r1, r4, #12
 8010702:	0092      	lsls	r2, r2, #2
 8010704:	300c      	adds	r0, #12
 8010706:	f7ff f8c4 	bl	800f892 <memcpy>
 801070a:	4621      	mov	r1, r4
 801070c:	4638      	mov	r0, r7
 801070e:	f7ff ffa5 	bl	801065c <_Bfree>
 8010712:	4644      	mov	r4, r8
 8010714:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010718:	3501      	adds	r5, #1
 801071a:	615e      	str	r6, [r3, #20]
 801071c:	6125      	str	r5, [r4, #16]
 801071e:	4620      	mov	r0, r4
 8010720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010724:	08011d1c 	.word	0x08011d1c
 8010728:	08011d2d 	.word	0x08011d2d

0801072c <__hi0bits>:
 801072c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010730:	4603      	mov	r3, r0
 8010732:	bf36      	itet	cc
 8010734:	0403      	lslcc	r3, r0, #16
 8010736:	2000      	movcs	r0, #0
 8010738:	2010      	movcc	r0, #16
 801073a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801073e:	bf3c      	itt	cc
 8010740:	021b      	lslcc	r3, r3, #8
 8010742:	3008      	addcc	r0, #8
 8010744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010748:	bf3c      	itt	cc
 801074a:	011b      	lslcc	r3, r3, #4
 801074c:	3004      	addcc	r0, #4
 801074e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010752:	bf3c      	itt	cc
 8010754:	009b      	lslcc	r3, r3, #2
 8010756:	3002      	addcc	r0, #2
 8010758:	2b00      	cmp	r3, #0
 801075a:	db05      	blt.n	8010768 <__hi0bits+0x3c>
 801075c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010760:	f100 0001 	add.w	r0, r0, #1
 8010764:	bf08      	it	eq
 8010766:	2020      	moveq	r0, #32
 8010768:	4770      	bx	lr

0801076a <__lo0bits>:
 801076a:	6803      	ldr	r3, [r0, #0]
 801076c:	4602      	mov	r2, r0
 801076e:	f013 0007 	ands.w	r0, r3, #7
 8010772:	d00b      	beq.n	801078c <__lo0bits+0x22>
 8010774:	07d9      	lsls	r1, r3, #31
 8010776:	d421      	bmi.n	80107bc <__lo0bits+0x52>
 8010778:	0798      	lsls	r0, r3, #30
 801077a:	bf49      	itett	mi
 801077c:	085b      	lsrmi	r3, r3, #1
 801077e:	089b      	lsrpl	r3, r3, #2
 8010780:	2001      	movmi	r0, #1
 8010782:	6013      	strmi	r3, [r2, #0]
 8010784:	bf5c      	itt	pl
 8010786:	6013      	strpl	r3, [r2, #0]
 8010788:	2002      	movpl	r0, #2
 801078a:	4770      	bx	lr
 801078c:	b299      	uxth	r1, r3
 801078e:	b909      	cbnz	r1, 8010794 <__lo0bits+0x2a>
 8010790:	0c1b      	lsrs	r3, r3, #16
 8010792:	2010      	movs	r0, #16
 8010794:	b2d9      	uxtb	r1, r3
 8010796:	b909      	cbnz	r1, 801079c <__lo0bits+0x32>
 8010798:	3008      	adds	r0, #8
 801079a:	0a1b      	lsrs	r3, r3, #8
 801079c:	0719      	lsls	r1, r3, #28
 801079e:	bf04      	itt	eq
 80107a0:	091b      	lsreq	r3, r3, #4
 80107a2:	3004      	addeq	r0, #4
 80107a4:	0799      	lsls	r1, r3, #30
 80107a6:	bf04      	itt	eq
 80107a8:	089b      	lsreq	r3, r3, #2
 80107aa:	3002      	addeq	r0, #2
 80107ac:	07d9      	lsls	r1, r3, #31
 80107ae:	d403      	bmi.n	80107b8 <__lo0bits+0x4e>
 80107b0:	085b      	lsrs	r3, r3, #1
 80107b2:	f100 0001 	add.w	r0, r0, #1
 80107b6:	d003      	beq.n	80107c0 <__lo0bits+0x56>
 80107b8:	6013      	str	r3, [r2, #0]
 80107ba:	4770      	bx	lr
 80107bc:	2000      	movs	r0, #0
 80107be:	4770      	bx	lr
 80107c0:	2020      	movs	r0, #32
 80107c2:	4770      	bx	lr

080107c4 <__i2b>:
 80107c4:	b510      	push	{r4, lr}
 80107c6:	460c      	mov	r4, r1
 80107c8:	2101      	movs	r1, #1
 80107ca:	f7ff ff07 	bl	80105dc <_Balloc>
 80107ce:	4602      	mov	r2, r0
 80107d0:	b928      	cbnz	r0, 80107de <__i2b+0x1a>
 80107d2:	4b05      	ldr	r3, [pc, #20]	@ (80107e8 <__i2b+0x24>)
 80107d4:	4805      	ldr	r0, [pc, #20]	@ (80107ec <__i2b+0x28>)
 80107d6:	f240 1145 	movw	r1, #325	@ 0x145
 80107da:	f000 fe65 	bl	80114a8 <__assert_func>
 80107de:	2301      	movs	r3, #1
 80107e0:	6144      	str	r4, [r0, #20]
 80107e2:	6103      	str	r3, [r0, #16]
 80107e4:	bd10      	pop	{r4, pc}
 80107e6:	bf00      	nop
 80107e8:	08011d1c 	.word	0x08011d1c
 80107ec:	08011d2d 	.word	0x08011d2d

080107f0 <__multiply>:
 80107f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	4614      	mov	r4, r2
 80107f6:	690a      	ldr	r2, [r1, #16]
 80107f8:	6923      	ldr	r3, [r4, #16]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	bfa8      	it	ge
 80107fe:	4623      	movge	r3, r4
 8010800:	460f      	mov	r7, r1
 8010802:	bfa4      	itt	ge
 8010804:	460c      	movge	r4, r1
 8010806:	461f      	movge	r7, r3
 8010808:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801080c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010810:	68a3      	ldr	r3, [r4, #8]
 8010812:	6861      	ldr	r1, [r4, #4]
 8010814:	eb0a 0609 	add.w	r6, sl, r9
 8010818:	42b3      	cmp	r3, r6
 801081a:	b085      	sub	sp, #20
 801081c:	bfb8      	it	lt
 801081e:	3101      	addlt	r1, #1
 8010820:	f7ff fedc 	bl	80105dc <_Balloc>
 8010824:	b930      	cbnz	r0, 8010834 <__multiply+0x44>
 8010826:	4602      	mov	r2, r0
 8010828:	4b44      	ldr	r3, [pc, #272]	@ (801093c <__multiply+0x14c>)
 801082a:	4845      	ldr	r0, [pc, #276]	@ (8010940 <__multiply+0x150>)
 801082c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010830:	f000 fe3a 	bl	80114a8 <__assert_func>
 8010834:	f100 0514 	add.w	r5, r0, #20
 8010838:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801083c:	462b      	mov	r3, r5
 801083e:	2200      	movs	r2, #0
 8010840:	4543      	cmp	r3, r8
 8010842:	d321      	bcc.n	8010888 <__multiply+0x98>
 8010844:	f107 0114 	add.w	r1, r7, #20
 8010848:	f104 0214 	add.w	r2, r4, #20
 801084c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010850:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010854:	9302      	str	r3, [sp, #8]
 8010856:	1b13      	subs	r3, r2, r4
 8010858:	3b15      	subs	r3, #21
 801085a:	f023 0303 	bic.w	r3, r3, #3
 801085e:	3304      	adds	r3, #4
 8010860:	f104 0715 	add.w	r7, r4, #21
 8010864:	42ba      	cmp	r2, r7
 8010866:	bf38      	it	cc
 8010868:	2304      	movcc	r3, #4
 801086a:	9301      	str	r3, [sp, #4]
 801086c:	9b02      	ldr	r3, [sp, #8]
 801086e:	9103      	str	r1, [sp, #12]
 8010870:	428b      	cmp	r3, r1
 8010872:	d80c      	bhi.n	801088e <__multiply+0x9e>
 8010874:	2e00      	cmp	r6, #0
 8010876:	dd03      	ble.n	8010880 <__multiply+0x90>
 8010878:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801087c:	2b00      	cmp	r3, #0
 801087e:	d05b      	beq.n	8010938 <__multiply+0x148>
 8010880:	6106      	str	r6, [r0, #16]
 8010882:	b005      	add	sp, #20
 8010884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010888:	f843 2b04 	str.w	r2, [r3], #4
 801088c:	e7d8      	b.n	8010840 <__multiply+0x50>
 801088e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010892:	f1ba 0f00 	cmp.w	sl, #0
 8010896:	d024      	beq.n	80108e2 <__multiply+0xf2>
 8010898:	f104 0e14 	add.w	lr, r4, #20
 801089c:	46a9      	mov	r9, r5
 801089e:	f04f 0c00 	mov.w	ip, #0
 80108a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80108a6:	f8d9 3000 	ldr.w	r3, [r9]
 80108aa:	fa1f fb87 	uxth.w	fp, r7
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80108b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80108b8:	f8d9 7000 	ldr.w	r7, [r9]
 80108bc:	4463      	add	r3, ip
 80108be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80108c2:	fb0a c70b 	mla	r7, sl, fp, ip
 80108c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80108d0:	4572      	cmp	r2, lr
 80108d2:	f849 3b04 	str.w	r3, [r9], #4
 80108d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80108da:	d8e2      	bhi.n	80108a2 <__multiply+0xb2>
 80108dc:	9b01      	ldr	r3, [sp, #4]
 80108de:	f845 c003 	str.w	ip, [r5, r3]
 80108e2:	9b03      	ldr	r3, [sp, #12]
 80108e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80108e8:	3104      	adds	r1, #4
 80108ea:	f1b9 0f00 	cmp.w	r9, #0
 80108ee:	d021      	beq.n	8010934 <__multiply+0x144>
 80108f0:	682b      	ldr	r3, [r5, #0]
 80108f2:	f104 0c14 	add.w	ip, r4, #20
 80108f6:	46ae      	mov	lr, r5
 80108f8:	f04f 0a00 	mov.w	sl, #0
 80108fc:	f8bc b000 	ldrh.w	fp, [ip]
 8010900:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010904:	fb09 770b 	mla	r7, r9, fp, r7
 8010908:	4457      	add	r7, sl
 801090a:	b29b      	uxth	r3, r3
 801090c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010910:	f84e 3b04 	str.w	r3, [lr], #4
 8010914:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010918:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801091c:	f8be 3000 	ldrh.w	r3, [lr]
 8010920:	fb09 330a 	mla	r3, r9, sl, r3
 8010924:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010928:	4562      	cmp	r2, ip
 801092a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801092e:	d8e5      	bhi.n	80108fc <__multiply+0x10c>
 8010930:	9f01      	ldr	r7, [sp, #4]
 8010932:	51eb      	str	r3, [r5, r7]
 8010934:	3504      	adds	r5, #4
 8010936:	e799      	b.n	801086c <__multiply+0x7c>
 8010938:	3e01      	subs	r6, #1
 801093a:	e79b      	b.n	8010874 <__multiply+0x84>
 801093c:	08011d1c 	.word	0x08011d1c
 8010940:	08011d2d 	.word	0x08011d2d

08010944 <__pow5mult>:
 8010944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010948:	4615      	mov	r5, r2
 801094a:	f012 0203 	ands.w	r2, r2, #3
 801094e:	4607      	mov	r7, r0
 8010950:	460e      	mov	r6, r1
 8010952:	d007      	beq.n	8010964 <__pow5mult+0x20>
 8010954:	4c25      	ldr	r4, [pc, #148]	@ (80109ec <__pow5mult+0xa8>)
 8010956:	3a01      	subs	r2, #1
 8010958:	2300      	movs	r3, #0
 801095a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801095e:	f7ff fe9f 	bl	80106a0 <__multadd>
 8010962:	4606      	mov	r6, r0
 8010964:	10ad      	asrs	r5, r5, #2
 8010966:	d03d      	beq.n	80109e4 <__pow5mult+0xa0>
 8010968:	69fc      	ldr	r4, [r7, #28]
 801096a:	b97c      	cbnz	r4, 801098c <__pow5mult+0x48>
 801096c:	2010      	movs	r0, #16
 801096e:	f7fd ffc1 	bl	800e8f4 <malloc>
 8010972:	4602      	mov	r2, r0
 8010974:	61f8      	str	r0, [r7, #28]
 8010976:	b928      	cbnz	r0, 8010984 <__pow5mult+0x40>
 8010978:	4b1d      	ldr	r3, [pc, #116]	@ (80109f0 <__pow5mult+0xac>)
 801097a:	481e      	ldr	r0, [pc, #120]	@ (80109f4 <__pow5mult+0xb0>)
 801097c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010980:	f000 fd92 	bl	80114a8 <__assert_func>
 8010984:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010988:	6004      	str	r4, [r0, #0]
 801098a:	60c4      	str	r4, [r0, #12]
 801098c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010990:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010994:	b94c      	cbnz	r4, 80109aa <__pow5mult+0x66>
 8010996:	f240 2171 	movw	r1, #625	@ 0x271
 801099a:	4638      	mov	r0, r7
 801099c:	f7ff ff12 	bl	80107c4 <__i2b>
 80109a0:	2300      	movs	r3, #0
 80109a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80109a6:	4604      	mov	r4, r0
 80109a8:	6003      	str	r3, [r0, #0]
 80109aa:	f04f 0900 	mov.w	r9, #0
 80109ae:	07eb      	lsls	r3, r5, #31
 80109b0:	d50a      	bpl.n	80109c8 <__pow5mult+0x84>
 80109b2:	4631      	mov	r1, r6
 80109b4:	4622      	mov	r2, r4
 80109b6:	4638      	mov	r0, r7
 80109b8:	f7ff ff1a 	bl	80107f0 <__multiply>
 80109bc:	4631      	mov	r1, r6
 80109be:	4680      	mov	r8, r0
 80109c0:	4638      	mov	r0, r7
 80109c2:	f7ff fe4b 	bl	801065c <_Bfree>
 80109c6:	4646      	mov	r6, r8
 80109c8:	106d      	asrs	r5, r5, #1
 80109ca:	d00b      	beq.n	80109e4 <__pow5mult+0xa0>
 80109cc:	6820      	ldr	r0, [r4, #0]
 80109ce:	b938      	cbnz	r0, 80109e0 <__pow5mult+0x9c>
 80109d0:	4622      	mov	r2, r4
 80109d2:	4621      	mov	r1, r4
 80109d4:	4638      	mov	r0, r7
 80109d6:	f7ff ff0b 	bl	80107f0 <__multiply>
 80109da:	6020      	str	r0, [r4, #0]
 80109dc:	f8c0 9000 	str.w	r9, [r0]
 80109e0:	4604      	mov	r4, r0
 80109e2:	e7e4      	b.n	80109ae <__pow5mult+0x6a>
 80109e4:	4630      	mov	r0, r6
 80109e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109ea:	bf00      	nop
 80109ec:	08011d88 	.word	0x08011d88
 80109f0:	08011cad 	.word	0x08011cad
 80109f4:	08011d2d 	.word	0x08011d2d

080109f8 <__lshift>:
 80109f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109fc:	460c      	mov	r4, r1
 80109fe:	6849      	ldr	r1, [r1, #4]
 8010a00:	6923      	ldr	r3, [r4, #16]
 8010a02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a06:	68a3      	ldr	r3, [r4, #8]
 8010a08:	4607      	mov	r7, r0
 8010a0a:	4691      	mov	r9, r2
 8010a0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a10:	f108 0601 	add.w	r6, r8, #1
 8010a14:	42b3      	cmp	r3, r6
 8010a16:	db0b      	blt.n	8010a30 <__lshift+0x38>
 8010a18:	4638      	mov	r0, r7
 8010a1a:	f7ff fddf 	bl	80105dc <_Balloc>
 8010a1e:	4605      	mov	r5, r0
 8010a20:	b948      	cbnz	r0, 8010a36 <__lshift+0x3e>
 8010a22:	4602      	mov	r2, r0
 8010a24:	4b28      	ldr	r3, [pc, #160]	@ (8010ac8 <__lshift+0xd0>)
 8010a26:	4829      	ldr	r0, [pc, #164]	@ (8010acc <__lshift+0xd4>)
 8010a28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010a2c:	f000 fd3c 	bl	80114a8 <__assert_func>
 8010a30:	3101      	adds	r1, #1
 8010a32:	005b      	lsls	r3, r3, #1
 8010a34:	e7ee      	b.n	8010a14 <__lshift+0x1c>
 8010a36:	2300      	movs	r3, #0
 8010a38:	f100 0114 	add.w	r1, r0, #20
 8010a3c:	f100 0210 	add.w	r2, r0, #16
 8010a40:	4618      	mov	r0, r3
 8010a42:	4553      	cmp	r3, sl
 8010a44:	db33      	blt.n	8010aae <__lshift+0xb6>
 8010a46:	6920      	ldr	r0, [r4, #16]
 8010a48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a4c:	f104 0314 	add.w	r3, r4, #20
 8010a50:	f019 091f 	ands.w	r9, r9, #31
 8010a54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a5c:	d02b      	beq.n	8010ab6 <__lshift+0xbe>
 8010a5e:	f1c9 0e20 	rsb	lr, r9, #32
 8010a62:	468a      	mov	sl, r1
 8010a64:	2200      	movs	r2, #0
 8010a66:	6818      	ldr	r0, [r3, #0]
 8010a68:	fa00 f009 	lsl.w	r0, r0, r9
 8010a6c:	4310      	orrs	r0, r2
 8010a6e:	f84a 0b04 	str.w	r0, [sl], #4
 8010a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a76:	459c      	cmp	ip, r3
 8010a78:	fa22 f20e 	lsr.w	r2, r2, lr
 8010a7c:	d8f3      	bhi.n	8010a66 <__lshift+0x6e>
 8010a7e:	ebac 0304 	sub.w	r3, ip, r4
 8010a82:	3b15      	subs	r3, #21
 8010a84:	f023 0303 	bic.w	r3, r3, #3
 8010a88:	3304      	adds	r3, #4
 8010a8a:	f104 0015 	add.w	r0, r4, #21
 8010a8e:	4584      	cmp	ip, r0
 8010a90:	bf38      	it	cc
 8010a92:	2304      	movcc	r3, #4
 8010a94:	50ca      	str	r2, [r1, r3]
 8010a96:	b10a      	cbz	r2, 8010a9c <__lshift+0xa4>
 8010a98:	f108 0602 	add.w	r6, r8, #2
 8010a9c:	3e01      	subs	r6, #1
 8010a9e:	4638      	mov	r0, r7
 8010aa0:	612e      	str	r6, [r5, #16]
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	f7ff fdda 	bl	801065c <_Bfree>
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aae:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	e7c5      	b.n	8010a42 <__lshift+0x4a>
 8010ab6:	3904      	subs	r1, #4
 8010ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010abc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ac0:	459c      	cmp	ip, r3
 8010ac2:	d8f9      	bhi.n	8010ab8 <__lshift+0xc0>
 8010ac4:	e7ea      	b.n	8010a9c <__lshift+0xa4>
 8010ac6:	bf00      	nop
 8010ac8:	08011d1c 	.word	0x08011d1c
 8010acc:	08011d2d 	.word	0x08011d2d

08010ad0 <__mcmp>:
 8010ad0:	690a      	ldr	r2, [r1, #16]
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	6900      	ldr	r0, [r0, #16]
 8010ad6:	1a80      	subs	r0, r0, r2
 8010ad8:	b530      	push	{r4, r5, lr}
 8010ada:	d10e      	bne.n	8010afa <__mcmp+0x2a>
 8010adc:	3314      	adds	r3, #20
 8010ade:	3114      	adds	r1, #20
 8010ae0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010ae4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ae8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010aec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010af0:	4295      	cmp	r5, r2
 8010af2:	d003      	beq.n	8010afc <__mcmp+0x2c>
 8010af4:	d205      	bcs.n	8010b02 <__mcmp+0x32>
 8010af6:	f04f 30ff 	mov.w	r0, #4294967295
 8010afa:	bd30      	pop	{r4, r5, pc}
 8010afc:	42a3      	cmp	r3, r4
 8010afe:	d3f3      	bcc.n	8010ae8 <__mcmp+0x18>
 8010b00:	e7fb      	b.n	8010afa <__mcmp+0x2a>
 8010b02:	2001      	movs	r0, #1
 8010b04:	e7f9      	b.n	8010afa <__mcmp+0x2a>
	...

08010b08 <__mdiff>:
 8010b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b0c:	4689      	mov	r9, r1
 8010b0e:	4606      	mov	r6, r0
 8010b10:	4611      	mov	r1, r2
 8010b12:	4648      	mov	r0, r9
 8010b14:	4614      	mov	r4, r2
 8010b16:	f7ff ffdb 	bl	8010ad0 <__mcmp>
 8010b1a:	1e05      	subs	r5, r0, #0
 8010b1c:	d112      	bne.n	8010b44 <__mdiff+0x3c>
 8010b1e:	4629      	mov	r1, r5
 8010b20:	4630      	mov	r0, r6
 8010b22:	f7ff fd5b 	bl	80105dc <_Balloc>
 8010b26:	4602      	mov	r2, r0
 8010b28:	b928      	cbnz	r0, 8010b36 <__mdiff+0x2e>
 8010b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8010c28 <__mdiff+0x120>)
 8010b2c:	f240 2137 	movw	r1, #567	@ 0x237
 8010b30:	483e      	ldr	r0, [pc, #248]	@ (8010c2c <__mdiff+0x124>)
 8010b32:	f000 fcb9 	bl	80114a8 <__assert_func>
 8010b36:	2301      	movs	r3, #1
 8010b38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b3c:	4610      	mov	r0, r2
 8010b3e:	b003      	add	sp, #12
 8010b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b44:	bfbc      	itt	lt
 8010b46:	464b      	movlt	r3, r9
 8010b48:	46a1      	movlt	r9, r4
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010b50:	bfba      	itte	lt
 8010b52:	461c      	movlt	r4, r3
 8010b54:	2501      	movlt	r5, #1
 8010b56:	2500      	movge	r5, #0
 8010b58:	f7ff fd40 	bl	80105dc <_Balloc>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	b918      	cbnz	r0, 8010b68 <__mdiff+0x60>
 8010b60:	4b31      	ldr	r3, [pc, #196]	@ (8010c28 <__mdiff+0x120>)
 8010b62:	f240 2145 	movw	r1, #581	@ 0x245
 8010b66:	e7e3      	b.n	8010b30 <__mdiff+0x28>
 8010b68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010b6c:	6926      	ldr	r6, [r4, #16]
 8010b6e:	60c5      	str	r5, [r0, #12]
 8010b70:	f109 0310 	add.w	r3, r9, #16
 8010b74:	f109 0514 	add.w	r5, r9, #20
 8010b78:	f104 0e14 	add.w	lr, r4, #20
 8010b7c:	f100 0b14 	add.w	fp, r0, #20
 8010b80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010b84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	46d9      	mov	r9, fp
 8010b8c:	f04f 0c00 	mov.w	ip, #0
 8010b90:	9b01      	ldr	r3, [sp, #4]
 8010b92:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010b96:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010b9a:	9301      	str	r3, [sp, #4]
 8010b9c:	fa1f f38a 	uxth.w	r3, sl
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	b283      	uxth	r3, r0
 8010ba4:	1acb      	subs	r3, r1, r3
 8010ba6:	0c00      	lsrs	r0, r0, #16
 8010ba8:	4463      	add	r3, ip
 8010baa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010bae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010bb2:	b29b      	uxth	r3, r3
 8010bb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010bb8:	4576      	cmp	r6, lr
 8010bba:	f849 3b04 	str.w	r3, [r9], #4
 8010bbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010bc2:	d8e5      	bhi.n	8010b90 <__mdiff+0x88>
 8010bc4:	1b33      	subs	r3, r6, r4
 8010bc6:	3b15      	subs	r3, #21
 8010bc8:	f023 0303 	bic.w	r3, r3, #3
 8010bcc:	3415      	adds	r4, #21
 8010bce:	3304      	adds	r3, #4
 8010bd0:	42a6      	cmp	r6, r4
 8010bd2:	bf38      	it	cc
 8010bd4:	2304      	movcc	r3, #4
 8010bd6:	441d      	add	r5, r3
 8010bd8:	445b      	add	r3, fp
 8010bda:	461e      	mov	r6, r3
 8010bdc:	462c      	mov	r4, r5
 8010bde:	4544      	cmp	r4, r8
 8010be0:	d30e      	bcc.n	8010c00 <__mdiff+0xf8>
 8010be2:	f108 0103 	add.w	r1, r8, #3
 8010be6:	1b49      	subs	r1, r1, r5
 8010be8:	f021 0103 	bic.w	r1, r1, #3
 8010bec:	3d03      	subs	r5, #3
 8010bee:	45a8      	cmp	r8, r5
 8010bf0:	bf38      	it	cc
 8010bf2:	2100      	movcc	r1, #0
 8010bf4:	440b      	add	r3, r1
 8010bf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010bfa:	b191      	cbz	r1, 8010c22 <__mdiff+0x11a>
 8010bfc:	6117      	str	r7, [r2, #16]
 8010bfe:	e79d      	b.n	8010b3c <__mdiff+0x34>
 8010c00:	f854 1b04 	ldr.w	r1, [r4], #4
 8010c04:	46e6      	mov	lr, ip
 8010c06:	0c08      	lsrs	r0, r1, #16
 8010c08:	fa1c fc81 	uxtah	ip, ip, r1
 8010c0c:	4471      	add	r1, lr
 8010c0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010c12:	b289      	uxth	r1, r1
 8010c14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010c18:	f846 1b04 	str.w	r1, [r6], #4
 8010c1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c20:	e7dd      	b.n	8010bde <__mdiff+0xd6>
 8010c22:	3f01      	subs	r7, #1
 8010c24:	e7e7      	b.n	8010bf6 <__mdiff+0xee>
 8010c26:	bf00      	nop
 8010c28:	08011d1c 	.word	0x08011d1c
 8010c2c:	08011d2d 	.word	0x08011d2d

08010c30 <__d2b>:
 8010c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c34:	460f      	mov	r7, r1
 8010c36:	2101      	movs	r1, #1
 8010c38:	ec59 8b10 	vmov	r8, r9, d0
 8010c3c:	4616      	mov	r6, r2
 8010c3e:	f7ff fccd 	bl	80105dc <_Balloc>
 8010c42:	4604      	mov	r4, r0
 8010c44:	b930      	cbnz	r0, 8010c54 <__d2b+0x24>
 8010c46:	4602      	mov	r2, r0
 8010c48:	4b23      	ldr	r3, [pc, #140]	@ (8010cd8 <__d2b+0xa8>)
 8010c4a:	4824      	ldr	r0, [pc, #144]	@ (8010cdc <__d2b+0xac>)
 8010c4c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010c50:	f000 fc2a 	bl	80114a8 <__assert_func>
 8010c54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c5c:	b10d      	cbz	r5, 8010c62 <__d2b+0x32>
 8010c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010c62:	9301      	str	r3, [sp, #4]
 8010c64:	f1b8 0300 	subs.w	r3, r8, #0
 8010c68:	d023      	beq.n	8010cb2 <__d2b+0x82>
 8010c6a:	4668      	mov	r0, sp
 8010c6c:	9300      	str	r3, [sp, #0]
 8010c6e:	f7ff fd7c 	bl	801076a <__lo0bits>
 8010c72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010c76:	b1d0      	cbz	r0, 8010cae <__d2b+0x7e>
 8010c78:	f1c0 0320 	rsb	r3, r0, #32
 8010c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c80:	430b      	orrs	r3, r1
 8010c82:	40c2      	lsrs	r2, r0
 8010c84:	6163      	str	r3, [r4, #20]
 8010c86:	9201      	str	r2, [sp, #4]
 8010c88:	9b01      	ldr	r3, [sp, #4]
 8010c8a:	61a3      	str	r3, [r4, #24]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	bf0c      	ite	eq
 8010c90:	2201      	moveq	r2, #1
 8010c92:	2202      	movne	r2, #2
 8010c94:	6122      	str	r2, [r4, #16]
 8010c96:	b1a5      	cbz	r5, 8010cc2 <__d2b+0x92>
 8010c98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010c9c:	4405      	add	r5, r0
 8010c9e:	603d      	str	r5, [r7, #0]
 8010ca0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010ca4:	6030      	str	r0, [r6, #0]
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	b003      	add	sp, #12
 8010caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cae:	6161      	str	r1, [r4, #20]
 8010cb0:	e7ea      	b.n	8010c88 <__d2b+0x58>
 8010cb2:	a801      	add	r0, sp, #4
 8010cb4:	f7ff fd59 	bl	801076a <__lo0bits>
 8010cb8:	9b01      	ldr	r3, [sp, #4]
 8010cba:	6163      	str	r3, [r4, #20]
 8010cbc:	3020      	adds	r0, #32
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	e7e8      	b.n	8010c94 <__d2b+0x64>
 8010cc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010cc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010cca:	6038      	str	r0, [r7, #0]
 8010ccc:	6918      	ldr	r0, [r3, #16]
 8010cce:	f7ff fd2d 	bl	801072c <__hi0bits>
 8010cd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010cd6:	e7e5      	b.n	8010ca4 <__d2b+0x74>
 8010cd8:	08011d1c 	.word	0x08011d1c
 8010cdc:	08011d2d 	.word	0x08011d2d

08010ce0 <__ssputs_r>:
 8010ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ce4:	688e      	ldr	r6, [r1, #8]
 8010ce6:	461f      	mov	r7, r3
 8010ce8:	42be      	cmp	r6, r7
 8010cea:	680b      	ldr	r3, [r1, #0]
 8010cec:	4682      	mov	sl, r0
 8010cee:	460c      	mov	r4, r1
 8010cf0:	4690      	mov	r8, r2
 8010cf2:	d82d      	bhi.n	8010d50 <__ssputs_r+0x70>
 8010cf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010cf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010cfc:	d026      	beq.n	8010d4c <__ssputs_r+0x6c>
 8010cfe:	6965      	ldr	r5, [r4, #20]
 8010d00:	6909      	ldr	r1, [r1, #16]
 8010d02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d06:	eba3 0901 	sub.w	r9, r3, r1
 8010d0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d0e:	1c7b      	adds	r3, r7, #1
 8010d10:	444b      	add	r3, r9
 8010d12:	106d      	asrs	r5, r5, #1
 8010d14:	429d      	cmp	r5, r3
 8010d16:	bf38      	it	cc
 8010d18:	461d      	movcc	r5, r3
 8010d1a:	0553      	lsls	r3, r2, #21
 8010d1c:	d527      	bpl.n	8010d6e <__ssputs_r+0x8e>
 8010d1e:	4629      	mov	r1, r5
 8010d20:	f7fd fe1a 	bl	800e958 <_malloc_r>
 8010d24:	4606      	mov	r6, r0
 8010d26:	b360      	cbz	r0, 8010d82 <__ssputs_r+0xa2>
 8010d28:	6921      	ldr	r1, [r4, #16]
 8010d2a:	464a      	mov	r2, r9
 8010d2c:	f7fe fdb1 	bl	800f892 <memcpy>
 8010d30:	89a3      	ldrh	r3, [r4, #12]
 8010d32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d3a:	81a3      	strh	r3, [r4, #12]
 8010d3c:	6126      	str	r6, [r4, #16]
 8010d3e:	6165      	str	r5, [r4, #20]
 8010d40:	444e      	add	r6, r9
 8010d42:	eba5 0509 	sub.w	r5, r5, r9
 8010d46:	6026      	str	r6, [r4, #0]
 8010d48:	60a5      	str	r5, [r4, #8]
 8010d4a:	463e      	mov	r6, r7
 8010d4c:	42be      	cmp	r6, r7
 8010d4e:	d900      	bls.n	8010d52 <__ssputs_r+0x72>
 8010d50:	463e      	mov	r6, r7
 8010d52:	6820      	ldr	r0, [r4, #0]
 8010d54:	4632      	mov	r2, r6
 8010d56:	4641      	mov	r1, r8
 8010d58:	f000 fb6a 	bl	8011430 <memmove>
 8010d5c:	68a3      	ldr	r3, [r4, #8]
 8010d5e:	1b9b      	subs	r3, r3, r6
 8010d60:	60a3      	str	r3, [r4, #8]
 8010d62:	6823      	ldr	r3, [r4, #0]
 8010d64:	4433      	add	r3, r6
 8010d66:	6023      	str	r3, [r4, #0]
 8010d68:	2000      	movs	r0, #0
 8010d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d6e:	462a      	mov	r2, r5
 8010d70:	f000 fbde 	bl	8011530 <_realloc_r>
 8010d74:	4606      	mov	r6, r0
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d1e0      	bne.n	8010d3c <__ssputs_r+0x5c>
 8010d7a:	6921      	ldr	r1, [r4, #16]
 8010d7c:	4650      	mov	r0, sl
 8010d7e:	f7ff fbe3 	bl	8010548 <_free_r>
 8010d82:	230c      	movs	r3, #12
 8010d84:	f8ca 3000 	str.w	r3, [sl]
 8010d88:	89a3      	ldrh	r3, [r4, #12]
 8010d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d8e:	81a3      	strh	r3, [r4, #12]
 8010d90:	f04f 30ff 	mov.w	r0, #4294967295
 8010d94:	e7e9      	b.n	8010d6a <__ssputs_r+0x8a>
	...

08010d98 <_svfiprintf_r>:
 8010d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9c:	4698      	mov	r8, r3
 8010d9e:	898b      	ldrh	r3, [r1, #12]
 8010da0:	061b      	lsls	r3, r3, #24
 8010da2:	b09d      	sub	sp, #116	@ 0x74
 8010da4:	4607      	mov	r7, r0
 8010da6:	460d      	mov	r5, r1
 8010da8:	4614      	mov	r4, r2
 8010daa:	d510      	bpl.n	8010dce <_svfiprintf_r+0x36>
 8010dac:	690b      	ldr	r3, [r1, #16]
 8010dae:	b973      	cbnz	r3, 8010dce <_svfiprintf_r+0x36>
 8010db0:	2140      	movs	r1, #64	@ 0x40
 8010db2:	f7fd fdd1 	bl	800e958 <_malloc_r>
 8010db6:	6028      	str	r0, [r5, #0]
 8010db8:	6128      	str	r0, [r5, #16]
 8010dba:	b930      	cbnz	r0, 8010dca <_svfiprintf_r+0x32>
 8010dbc:	230c      	movs	r3, #12
 8010dbe:	603b      	str	r3, [r7, #0]
 8010dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8010dc4:	b01d      	add	sp, #116	@ 0x74
 8010dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dca:	2340      	movs	r3, #64	@ 0x40
 8010dcc:	616b      	str	r3, [r5, #20]
 8010dce:	2300      	movs	r3, #0
 8010dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dd2:	2320      	movs	r3, #32
 8010dd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ddc:	2330      	movs	r3, #48	@ 0x30
 8010dde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010f7c <_svfiprintf_r+0x1e4>
 8010de2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010de6:	f04f 0901 	mov.w	r9, #1
 8010dea:	4623      	mov	r3, r4
 8010dec:	469a      	mov	sl, r3
 8010dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010df2:	b10a      	cbz	r2, 8010df8 <_svfiprintf_r+0x60>
 8010df4:	2a25      	cmp	r2, #37	@ 0x25
 8010df6:	d1f9      	bne.n	8010dec <_svfiprintf_r+0x54>
 8010df8:	ebba 0b04 	subs.w	fp, sl, r4
 8010dfc:	d00b      	beq.n	8010e16 <_svfiprintf_r+0x7e>
 8010dfe:	465b      	mov	r3, fp
 8010e00:	4622      	mov	r2, r4
 8010e02:	4629      	mov	r1, r5
 8010e04:	4638      	mov	r0, r7
 8010e06:	f7ff ff6b 	bl	8010ce0 <__ssputs_r>
 8010e0a:	3001      	adds	r0, #1
 8010e0c:	f000 80a7 	beq.w	8010f5e <_svfiprintf_r+0x1c6>
 8010e10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e12:	445a      	add	r2, fp
 8010e14:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e16:	f89a 3000 	ldrb.w	r3, [sl]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f000 809f 	beq.w	8010f5e <_svfiprintf_r+0x1c6>
 8010e20:	2300      	movs	r3, #0
 8010e22:	f04f 32ff 	mov.w	r2, #4294967295
 8010e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e2a:	f10a 0a01 	add.w	sl, sl, #1
 8010e2e:	9304      	str	r3, [sp, #16]
 8010e30:	9307      	str	r3, [sp, #28]
 8010e32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e36:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e38:	4654      	mov	r4, sl
 8010e3a:	2205      	movs	r2, #5
 8010e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e40:	484e      	ldr	r0, [pc, #312]	@ (8010f7c <_svfiprintf_r+0x1e4>)
 8010e42:	f7ef f9cd 	bl	80001e0 <memchr>
 8010e46:	9a04      	ldr	r2, [sp, #16]
 8010e48:	b9d8      	cbnz	r0, 8010e82 <_svfiprintf_r+0xea>
 8010e4a:	06d0      	lsls	r0, r2, #27
 8010e4c:	bf44      	itt	mi
 8010e4e:	2320      	movmi	r3, #32
 8010e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e54:	0711      	lsls	r1, r2, #28
 8010e56:	bf44      	itt	mi
 8010e58:	232b      	movmi	r3, #43	@ 0x2b
 8010e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8010e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e64:	d015      	beq.n	8010e92 <_svfiprintf_r+0xfa>
 8010e66:	9a07      	ldr	r2, [sp, #28]
 8010e68:	4654      	mov	r4, sl
 8010e6a:	2000      	movs	r0, #0
 8010e6c:	f04f 0c0a 	mov.w	ip, #10
 8010e70:	4621      	mov	r1, r4
 8010e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e76:	3b30      	subs	r3, #48	@ 0x30
 8010e78:	2b09      	cmp	r3, #9
 8010e7a:	d94b      	bls.n	8010f14 <_svfiprintf_r+0x17c>
 8010e7c:	b1b0      	cbz	r0, 8010eac <_svfiprintf_r+0x114>
 8010e7e:	9207      	str	r2, [sp, #28]
 8010e80:	e014      	b.n	8010eac <_svfiprintf_r+0x114>
 8010e82:	eba0 0308 	sub.w	r3, r0, r8
 8010e86:	fa09 f303 	lsl.w	r3, r9, r3
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	9304      	str	r3, [sp, #16]
 8010e8e:	46a2      	mov	sl, r4
 8010e90:	e7d2      	b.n	8010e38 <_svfiprintf_r+0xa0>
 8010e92:	9b03      	ldr	r3, [sp, #12]
 8010e94:	1d19      	adds	r1, r3, #4
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	9103      	str	r1, [sp, #12]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	bfbb      	ittet	lt
 8010e9e:	425b      	neglt	r3, r3
 8010ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8010ea4:	9307      	strge	r3, [sp, #28]
 8010ea6:	9307      	strlt	r3, [sp, #28]
 8010ea8:	bfb8      	it	lt
 8010eaa:	9204      	strlt	r2, [sp, #16]
 8010eac:	7823      	ldrb	r3, [r4, #0]
 8010eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8010eb0:	d10a      	bne.n	8010ec8 <_svfiprintf_r+0x130>
 8010eb2:	7863      	ldrb	r3, [r4, #1]
 8010eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010eb6:	d132      	bne.n	8010f1e <_svfiprintf_r+0x186>
 8010eb8:	9b03      	ldr	r3, [sp, #12]
 8010eba:	1d1a      	adds	r2, r3, #4
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	9203      	str	r2, [sp, #12]
 8010ec0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ec4:	3402      	adds	r4, #2
 8010ec6:	9305      	str	r3, [sp, #20]
 8010ec8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010f8c <_svfiprintf_r+0x1f4>
 8010ecc:	7821      	ldrb	r1, [r4, #0]
 8010ece:	2203      	movs	r2, #3
 8010ed0:	4650      	mov	r0, sl
 8010ed2:	f7ef f985 	bl	80001e0 <memchr>
 8010ed6:	b138      	cbz	r0, 8010ee8 <_svfiprintf_r+0x150>
 8010ed8:	9b04      	ldr	r3, [sp, #16]
 8010eda:	eba0 000a 	sub.w	r0, r0, sl
 8010ede:	2240      	movs	r2, #64	@ 0x40
 8010ee0:	4082      	lsls	r2, r0
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	3401      	adds	r4, #1
 8010ee6:	9304      	str	r3, [sp, #16]
 8010ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eec:	4824      	ldr	r0, [pc, #144]	@ (8010f80 <_svfiprintf_r+0x1e8>)
 8010eee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ef2:	2206      	movs	r2, #6
 8010ef4:	f7ef f974 	bl	80001e0 <memchr>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d036      	beq.n	8010f6a <_svfiprintf_r+0x1d2>
 8010efc:	4b21      	ldr	r3, [pc, #132]	@ (8010f84 <_svfiprintf_r+0x1ec>)
 8010efe:	bb1b      	cbnz	r3, 8010f48 <_svfiprintf_r+0x1b0>
 8010f00:	9b03      	ldr	r3, [sp, #12]
 8010f02:	3307      	adds	r3, #7
 8010f04:	f023 0307 	bic.w	r3, r3, #7
 8010f08:	3308      	adds	r3, #8
 8010f0a:	9303      	str	r3, [sp, #12]
 8010f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f0e:	4433      	add	r3, r6
 8010f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f12:	e76a      	b.n	8010dea <_svfiprintf_r+0x52>
 8010f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f18:	460c      	mov	r4, r1
 8010f1a:	2001      	movs	r0, #1
 8010f1c:	e7a8      	b.n	8010e70 <_svfiprintf_r+0xd8>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	3401      	adds	r4, #1
 8010f22:	9305      	str	r3, [sp, #20]
 8010f24:	4619      	mov	r1, r3
 8010f26:	f04f 0c0a 	mov.w	ip, #10
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f30:	3a30      	subs	r2, #48	@ 0x30
 8010f32:	2a09      	cmp	r2, #9
 8010f34:	d903      	bls.n	8010f3e <_svfiprintf_r+0x1a6>
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d0c6      	beq.n	8010ec8 <_svfiprintf_r+0x130>
 8010f3a:	9105      	str	r1, [sp, #20]
 8010f3c:	e7c4      	b.n	8010ec8 <_svfiprintf_r+0x130>
 8010f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f42:	4604      	mov	r4, r0
 8010f44:	2301      	movs	r3, #1
 8010f46:	e7f0      	b.n	8010f2a <_svfiprintf_r+0x192>
 8010f48:	ab03      	add	r3, sp, #12
 8010f4a:	9300      	str	r3, [sp, #0]
 8010f4c:	462a      	mov	r2, r5
 8010f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8010f88 <_svfiprintf_r+0x1f0>)
 8010f50:	a904      	add	r1, sp, #16
 8010f52:	4638      	mov	r0, r7
 8010f54:	f7fd fe2c 	bl	800ebb0 <_printf_float>
 8010f58:	1c42      	adds	r2, r0, #1
 8010f5a:	4606      	mov	r6, r0
 8010f5c:	d1d6      	bne.n	8010f0c <_svfiprintf_r+0x174>
 8010f5e:	89ab      	ldrh	r3, [r5, #12]
 8010f60:	065b      	lsls	r3, r3, #25
 8010f62:	f53f af2d 	bmi.w	8010dc0 <_svfiprintf_r+0x28>
 8010f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f68:	e72c      	b.n	8010dc4 <_svfiprintf_r+0x2c>
 8010f6a:	ab03      	add	r3, sp, #12
 8010f6c:	9300      	str	r3, [sp, #0]
 8010f6e:	462a      	mov	r2, r5
 8010f70:	4b05      	ldr	r3, [pc, #20]	@ (8010f88 <_svfiprintf_r+0x1f0>)
 8010f72:	a904      	add	r1, sp, #16
 8010f74:	4638      	mov	r0, r7
 8010f76:	f7fe f8b3 	bl	800f0e0 <_printf_i>
 8010f7a:	e7ed      	b.n	8010f58 <_svfiprintf_r+0x1c0>
 8010f7c:	08011e88 	.word	0x08011e88
 8010f80:	08011e92 	.word	0x08011e92
 8010f84:	0800ebb1 	.word	0x0800ebb1
 8010f88:	08010ce1 	.word	0x08010ce1
 8010f8c:	08011e8e 	.word	0x08011e8e

08010f90 <__sfputc_r>:
 8010f90:	6893      	ldr	r3, [r2, #8]
 8010f92:	3b01      	subs	r3, #1
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	b410      	push	{r4}
 8010f98:	6093      	str	r3, [r2, #8]
 8010f9a:	da08      	bge.n	8010fae <__sfputc_r+0x1e>
 8010f9c:	6994      	ldr	r4, [r2, #24]
 8010f9e:	42a3      	cmp	r3, r4
 8010fa0:	db01      	blt.n	8010fa6 <__sfputc_r+0x16>
 8010fa2:	290a      	cmp	r1, #10
 8010fa4:	d103      	bne.n	8010fae <__sfputc_r+0x1e>
 8010fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010faa:	f7fe bb4e 	b.w	800f64a <__swbuf_r>
 8010fae:	6813      	ldr	r3, [r2, #0]
 8010fb0:	1c58      	adds	r0, r3, #1
 8010fb2:	6010      	str	r0, [r2, #0]
 8010fb4:	7019      	strb	r1, [r3, #0]
 8010fb6:	4608      	mov	r0, r1
 8010fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fbc:	4770      	bx	lr

08010fbe <__sfputs_r>:
 8010fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fc0:	4606      	mov	r6, r0
 8010fc2:	460f      	mov	r7, r1
 8010fc4:	4614      	mov	r4, r2
 8010fc6:	18d5      	adds	r5, r2, r3
 8010fc8:	42ac      	cmp	r4, r5
 8010fca:	d101      	bne.n	8010fd0 <__sfputs_r+0x12>
 8010fcc:	2000      	movs	r0, #0
 8010fce:	e007      	b.n	8010fe0 <__sfputs_r+0x22>
 8010fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fd4:	463a      	mov	r2, r7
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f7ff ffda 	bl	8010f90 <__sfputc_r>
 8010fdc:	1c43      	adds	r3, r0, #1
 8010fde:	d1f3      	bne.n	8010fc8 <__sfputs_r+0xa>
 8010fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010fe4 <_vfiprintf_r>:
 8010fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe8:	460d      	mov	r5, r1
 8010fea:	b09d      	sub	sp, #116	@ 0x74
 8010fec:	4614      	mov	r4, r2
 8010fee:	4698      	mov	r8, r3
 8010ff0:	4606      	mov	r6, r0
 8010ff2:	b118      	cbz	r0, 8010ffc <_vfiprintf_r+0x18>
 8010ff4:	6a03      	ldr	r3, [r0, #32]
 8010ff6:	b90b      	cbnz	r3, 8010ffc <_vfiprintf_r+0x18>
 8010ff8:	f7fe fa1e 	bl	800f438 <__sinit>
 8010ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ffe:	07d9      	lsls	r1, r3, #31
 8011000:	d405      	bmi.n	801100e <_vfiprintf_r+0x2a>
 8011002:	89ab      	ldrh	r3, [r5, #12]
 8011004:	059a      	lsls	r2, r3, #22
 8011006:	d402      	bmi.n	801100e <_vfiprintf_r+0x2a>
 8011008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801100a:	f7fe fc40 	bl	800f88e <__retarget_lock_acquire_recursive>
 801100e:	89ab      	ldrh	r3, [r5, #12]
 8011010:	071b      	lsls	r3, r3, #28
 8011012:	d501      	bpl.n	8011018 <_vfiprintf_r+0x34>
 8011014:	692b      	ldr	r3, [r5, #16]
 8011016:	b99b      	cbnz	r3, 8011040 <_vfiprintf_r+0x5c>
 8011018:	4629      	mov	r1, r5
 801101a:	4630      	mov	r0, r6
 801101c:	f7fe fb54 	bl	800f6c8 <__swsetup_r>
 8011020:	b170      	cbz	r0, 8011040 <_vfiprintf_r+0x5c>
 8011022:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011024:	07dc      	lsls	r4, r3, #31
 8011026:	d504      	bpl.n	8011032 <_vfiprintf_r+0x4e>
 8011028:	f04f 30ff 	mov.w	r0, #4294967295
 801102c:	b01d      	add	sp, #116	@ 0x74
 801102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011032:	89ab      	ldrh	r3, [r5, #12]
 8011034:	0598      	lsls	r0, r3, #22
 8011036:	d4f7      	bmi.n	8011028 <_vfiprintf_r+0x44>
 8011038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801103a:	f7fe fc29 	bl	800f890 <__retarget_lock_release_recursive>
 801103e:	e7f3      	b.n	8011028 <_vfiprintf_r+0x44>
 8011040:	2300      	movs	r3, #0
 8011042:	9309      	str	r3, [sp, #36]	@ 0x24
 8011044:	2320      	movs	r3, #32
 8011046:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801104a:	f8cd 800c 	str.w	r8, [sp, #12]
 801104e:	2330      	movs	r3, #48	@ 0x30
 8011050:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011200 <_vfiprintf_r+0x21c>
 8011054:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011058:	f04f 0901 	mov.w	r9, #1
 801105c:	4623      	mov	r3, r4
 801105e:	469a      	mov	sl, r3
 8011060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011064:	b10a      	cbz	r2, 801106a <_vfiprintf_r+0x86>
 8011066:	2a25      	cmp	r2, #37	@ 0x25
 8011068:	d1f9      	bne.n	801105e <_vfiprintf_r+0x7a>
 801106a:	ebba 0b04 	subs.w	fp, sl, r4
 801106e:	d00b      	beq.n	8011088 <_vfiprintf_r+0xa4>
 8011070:	465b      	mov	r3, fp
 8011072:	4622      	mov	r2, r4
 8011074:	4629      	mov	r1, r5
 8011076:	4630      	mov	r0, r6
 8011078:	f7ff ffa1 	bl	8010fbe <__sfputs_r>
 801107c:	3001      	adds	r0, #1
 801107e:	f000 80a7 	beq.w	80111d0 <_vfiprintf_r+0x1ec>
 8011082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011084:	445a      	add	r2, fp
 8011086:	9209      	str	r2, [sp, #36]	@ 0x24
 8011088:	f89a 3000 	ldrb.w	r3, [sl]
 801108c:	2b00      	cmp	r3, #0
 801108e:	f000 809f 	beq.w	80111d0 <_vfiprintf_r+0x1ec>
 8011092:	2300      	movs	r3, #0
 8011094:	f04f 32ff 	mov.w	r2, #4294967295
 8011098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801109c:	f10a 0a01 	add.w	sl, sl, #1
 80110a0:	9304      	str	r3, [sp, #16]
 80110a2:	9307      	str	r3, [sp, #28]
 80110a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80110a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80110aa:	4654      	mov	r4, sl
 80110ac:	2205      	movs	r2, #5
 80110ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110b2:	4853      	ldr	r0, [pc, #332]	@ (8011200 <_vfiprintf_r+0x21c>)
 80110b4:	f7ef f894 	bl	80001e0 <memchr>
 80110b8:	9a04      	ldr	r2, [sp, #16]
 80110ba:	b9d8      	cbnz	r0, 80110f4 <_vfiprintf_r+0x110>
 80110bc:	06d1      	lsls	r1, r2, #27
 80110be:	bf44      	itt	mi
 80110c0:	2320      	movmi	r3, #32
 80110c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110c6:	0713      	lsls	r3, r2, #28
 80110c8:	bf44      	itt	mi
 80110ca:	232b      	movmi	r3, #43	@ 0x2b
 80110cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110d0:	f89a 3000 	ldrb.w	r3, [sl]
 80110d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80110d6:	d015      	beq.n	8011104 <_vfiprintf_r+0x120>
 80110d8:	9a07      	ldr	r2, [sp, #28]
 80110da:	4654      	mov	r4, sl
 80110dc:	2000      	movs	r0, #0
 80110de:	f04f 0c0a 	mov.w	ip, #10
 80110e2:	4621      	mov	r1, r4
 80110e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110e8:	3b30      	subs	r3, #48	@ 0x30
 80110ea:	2b09      	cmp	r3, #9
 80110ec:	d94b      	bls.n	8011186 <_vfiprintf_r+0x1a2>
 80110ee:	b1b0      	cbz	r0, 801111e <_vfiprintf_r+0x13a>
 80110f0:	9207      	str	r2, [sp, #28]
 80110f2:	e014      	b.n	801111e <_vfiprintf_r+0x13a>
 80110f4:	eba0 0308 	sub.w	r3, r0, r8
 80110f8:	fa09 f303 	lsl.w	r3, r9, r3
 80110fc:	4313      	orrs	r3, r2
 80110fe:	9304      	str	r3, [sp, #16]
 8011100:	46a2      	mov	sl, r4
 8011102:	e7d2      	b.n	80110aa <_vfiprintf_r+0xc6>
 8011104:	9b03      	ldr	r3, [sp, #12]
 8011106:	1d19      	adds	r1, r3, #4
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	9103      	str	r1, [sp, #12]
 801110c:	2b00      	cmp	r3, #0
 801110e:	bfbb      	ittet	lt
 8011110:	425b      	neglt	r3, r3
 8011112:	f042 0202 	orrlt.w	r2, r2, #2
 8011116:	9307      	strge	r3, [sp, #28]
 8011118:	9307      	strlt	r3, [sp, #28]
 801111a:	bfb8      	it	lt
 801111c:	9204      	strlt	r2, [sp, #16]
 801111e:	7823      	ldrb	r3, [r4, #0]
 8011120:	2b2e      	cmp	r3, #46	@ 0x2e
 8011122:	d10a      	bne.n	801113a <_vfiprintf_r+0x156>
 8011124:	7863      	ldrb	r3, [r4, #1]
 8011126:	2b2a      	cmp	r3, #42	@ 0x2a
 8011128:	d132      	bne.n	8011190 <_vfiprintf_r+0x1ac>
 801112a:	9b03      	ldr	r3, [sp, #12]
 801112c:	1d1a      	adds	r2, r3, #4
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	9203      	str	r2, [sp, #12]
 8011132:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011136:	3402      	adds	r4, #2
 8011138:	9305      	str	r3, [sp, #20]
 801113a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011210 <_vfiprintf_r+0x22c>
 801113e:	7821      	ldrb	r1, [r4, #0]
 8011140:	2203      	movs	r2, #3
 8011142:	4650      	mov	r0, sl
 8011144:	f7ef f84c 	bl	80001e0 <memchr>
 8011148:	b138      	cbz	r0, 801115a <_vfiprintf_r+0x176>
 801114a:	9b04      	ldr	r3, [sp, #16]
 801114c:	eba0 000a 	sub.w	r0, r0, sl
 8011150:	2240      	movs	r2, #64	@ 0x40
 8011152:	4082      	lsls	r2, r0
 8011154:	4313      	orrs	r3, r2
 8011156:	3401      	adds	r4, #1
 8011158:	9304      	str	r3, [sp, #16]
 801115a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801115e:	4829      	ldr	r0, [pc, #164]	@ (8011204 <_vfiprintf_r+0x220>)
 8011160:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011164:	2206      	movs	r2, #6
 8011166:	f7ef f83b 	bl	80001e0 <memchr>
 801116a:	2800      	cmp	r0, #0
 801116c:	d03f      	beq.n	80111ee <_vfiprintf_r+0x20a>
 801116e:	4b26      	ldr	r3, [pc, #152]	@ (8011208 <_vfiprintf_r+0x224>)
 8011170:	bb1b      	cbnz	r3, 80111ba <_vfiprintf_r+0x1d6>
 8011172:	9b03      	ldr	r3, [sp, #12]
 8011174:	3307      	adds	r3, #7
 8011176:	f023 0307 	bic.w	r3, r3, #7
 801117a:	3308      	adds	r3, #8
 801117c:	9303      	str	r3, [sp, #12]
 801117e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011180:	443b      	add	r3, r7
 8011182:	9309      	str	r3, [sp, #36]	@ 0x24
 8011184:	e76a      	b.n	801105c <_vfiprintf_r+0x78>
 8011186:	fb0c 3202 	mla	r2, ip, r2, r3
 801118a:	460c      	mov	r4, r1
 801118c:	2001      	movs	r0, #1
 801118e:	e7a8      	b.n	80110e2 <_vfiprintf_r+0xfe>
 8011190:	2300      	movs	r3, #0
 8011192:	3401      	adds	r4, #1
 8011194:	9305      	str	r3, [sp, #20]
 8011196:	4619      	mov	r1, r3
 8011198:	f04f 0c0a 	mov.w	ip, #10
 801119c:	4620      	mov	r0, r4
 801119e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111a2:	3a30      	subs	r2, #48	@ 0x30
 80111a4:	2a09      	cmp	r2, #9
 80111a6:	d903      	bls.n	80111b0 <_vfiprintf_r+0x1cc>
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d0c6      	beq.n	801113a <_vfiprintf_r+0x156>
 80111ac:	9105      	str	r1, [sp, #20]
 80111ae:	e7c4      	b.n	801113a <_vfiprintf_r+0x156>
 80111b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80111b4:	4604      	mov	r4, r0
 80111b6:	2301      	movs	r3, #1
 80111b8:	e7f0      	b.n	801119c <_vfiprintf_r+0x1b8>
 80111ba:	ab03      	add	r3, sp, #12
 80111bc:	9300      	str	r3, [sp, #0]
 80111be:	462a      	mov	r2, r5
 80111c0:	4b12      	ldr	r3, [pc, #72]	@ (801120c <_vfiprintf_r+0x228>)
 80111c2:	a904      	add	r1, sp, #16
 80111c4:	4630      	mov	r0, r6
 80111c6:	f7fd fcf3 	bl	800ebb0 <_printf_float>
 80111ca:	4607      	mov	r7, r0
 80111cc:	1c78      	adds	r0, r7, #1
 80111ce:	d1d6      	bne.n	801117e <_vfiprintf_r+0x19a>
 80111d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80111d2:	07d9      	lsls	r1, r3, #31
 80111d4:	d405      	bmi.n	80111e2 <_vfiprintf_r+0x1fe>
 80111d6:	89ab      	ldrh	r3, [r5, #12]
 80111d8:	059a      	lsls	r2, r3, #22
 80111da:	d402      	bmi.n	80111e2 <_vfiprintf_r+0x1fe>
 80111dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80111de:	f7fe fb57 	bl	800f890 <__retarget_lock_release_recursive>
 80111e2:	89ab      	ldrh	r3, [r5, #12]
 80111e4:	065b      	lsls	r3, r3, #25
 80111e6:	f53f af1f 	bmi.w	8011028 <_vfiprintf_r+0x44>
 80111ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111ec:	e71e      	b.n	801102c <_vfiprintf_r+0x48>
 80111ee:	ab03      	add	r3, sp, #12
 80111f0:	9300      	str	r3, [sp, #0]
 80111f2:	462a      	mov	r2, r5
 80111f4:	4b05      	ldr	r3, [pc, #20]	@ (801120c <_vfiprintf_r+0x228>)
 80111f6:	a904      	add	r1, sp, #16
 80111f8:	4630      	mov	r0, r6
 80111fa:	f7fd ff71 	bl	800f0e0 <_printf_i>
 80111fe:	e7e4      	b.n	80111ca <_vfiprintf_r+0x1e6>
 8011200:	08011e88 	.word	0x08011e88
 8011204:	08011e92 	.word	0x08011e92
 8011208:	0800ebb1 	.word	0x0800ebb1
 801120c:	08010fbf 	.word	0x08010fbf
 8011210:	08011e8e 	.word	0x08011e8e

08011214 <__sflush_r>:
 8011214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121c:	0716      	lsls	r6, r2, #28
 801121e:	4605      	mov	r5, r0
 8011220:	460c      	mov	r4, r1
 8011222:	d454      	bmi.n	80112ce <__sflush_r+0xba>
 8011224:	684b      	ldr	r3, [r1, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	dc02      	bgt.n	8011230 <__sflush_r+0x1c>
 801122a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801122c:	2b00      	cmp	r3, #0
 801122e:	dd48      	ble.n	80112c2 <__sflush_r+0xae>
 8011230:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011232:	2e00      	cmp	r6, #0
 8011234:	d045      	beq.n	80112c2 <__sflush_r+0xae>
 8011236:	2300      	movs	r3, #0
 8011238:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801123c:	682f      	ldr	r7, [r5, #0]
 801123e:	6a21      	ldr	r1, [r4, #32]
 8011240:	602b      	str	r3, [r5, #0]
 8011242:	d030      	beq.n	80112a6 <__sflush_r+0x92>
 8011244:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011246:	89a3      	ldrh	r3, [r4, #12]
 8011248:	0759      	lsls	r1, r3, #29
 801124a:	d505      	bpl.n	8011258 <__sflush_r+0x44>
 801124c:	6863      	ldr	r3, [r4, #4]
 801124e:	1ad2      	subs	r2, r2, r3
 8011250:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011252:	b10b      	cbz	r3, 8011258 <__sflush_r+0x44>
 8011254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011256:	1ad2      	subs	r2, r2, r3
 8011258:	2300      	movs	r3, #0
 801125a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801125c:	6a21      	ldr	r1, [r4, #32]
 801125e:	4628      	mov	r0, r5
 8011260:	47b0      	blx	r6
 8011262:	1c43      	adds	r3, r0, #1
 8011264:	89a3      	ldrh	r3, [r4, #12]
 8011266:	d106      	bne.n	8011276 <__sflush_r+0x62>
 8011268:	6829      	ldr	r1, [r5, #0]
 801126a:	291d      	cmp	r1, #29
 801126c:	d82b      	bhi.n	80112c6 <__sflush_r+0xb2>
 801126e:	4a2a      	ldr	r2, [pc, #168]	@ (8011318 <__sflush_r+0x104>)
 8011270:	410a      	asrs	r2, r1
 8011272:	07d6      	lsls	r6, r2, #31
 8011274:	d427      	bmi.n	80112c6 <__sflush_r+0xb2>
 8011276:	2200      	movs	r2, #0
 8011278:	6062      	str	r2, [r4, #4]
 801127a:	04d9      	lsls	r1, r3, #19
 801127c:	6922      	ldr	r2, [r4, #16]
 801127e:	6022      	str	r2, [r4, #0]
 8011280:	d504      	bpl.n	801128c <__sflush_r+0x78>
 8011282:	1c42      	adds	r2, r0, #1
 8011284:	d101      	bne.n	801128a <__sflush_r+0x76>
 8011286:	682b      	ldr	r3, [r5, #0]
 8011288:	b903      	cbnz	r3, 801128c <__sflush_r+0x78>
 801128a:	6560      	str	r0, [r4, #84]	@ 0x54
 801128c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801128e:	602f      	str	r7, [r5, #0]
 8011290:	b1b9      	cbz	r1, 80112c2 <__sflush_r+0xae>
 8011292:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011296:	4299      	cmp	r1, r3
 8011298:	d002      	beq.n	80112a0 <__sflush_r+0x8c>
 801129a:	4628      	mov	r0, r5
 801129c:	f7ff f954 	bl	8010548 <_free_r>
 80112a0:	2300      	movs	r3, #0
 80112a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80112a4:	e00d      	b.n	80112c2 <__sflush_r+0xae>
 80112a6:	2301      	movs	r3, #1
 80112a8:	4628      	mov	r0, r5
 80112aa:	47b0      	blx	r6
 80112ac:	4602      	mov	r2, r0
 80112ae:	1c50      	adds	r0, r2, #1
 80112b0:	d1c9      	bne.n	8011246 <__sflush_r+0x32>
 80112b2:	682b      	ldr	r3, [r5, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d0c6      	beq.n	8011246 <__sflush_r+0x32>
 80112b8:	2b1d      	cmp	r3, #29
 80112ba:	d001      	beq.n	80112c0 <__sflush_r+0xac>
 80112bc:	2b16      	cmp	r3, #22
 80112be:	d11e      	bne.n	80112fe <__sflush_r+0xea>
 80112c0:	602f      	str	r7, [r5, #0]
 80112c2:	2000      	movs	r0, #0
 80112c4:	e022      	b.n	801130c <__sflush_r+0xf8>
 80112c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112ca:	b21b      	sxth	r3, r3
 80112cc:	e01b      	b.n	8011306 <__sflush_r+0xf2>
 80112ce:	690f      	ldr	r7, [r1, #16]
 80112d0:	2f00      	cmp	r7, #0
 80112d2:	d0f6      	beq.n	80112c2 <__sflush_r+0xae>
 80112d4:	0793      	lsls	r3, r2, #30
 80112d6:	680e      	ldr	r6, [r1, #0]
 80112d8:	bf08      	it	eq
 80112da:	694b      	ldreq	r3, [r1, #20]
 80112dc:	600f      	str	r7, [r1, #0]
 80112de:	bf18      	it	ne
 80112e0:	2300      	movne	r3, #0
 80112e2:	eba6 0807 	sub.w	r8, r6, r7
 80112e6:	608b      	str	r3, [r1, #8]
 80112e8:	f1b8 0f00 	cmp.w	r8, #0
 80112ec:	dde9      	ble.n	80112c2 <__sflush_r+0xae>
 80112ee:	6a21      	ldr	r1, [r4, #32]
 80112f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80112f2:	4643      	mov	r3, r8
 80112f4:	463a      	mov	r2, r7
 80112f6:	4628      	mov	r0, r5
 80112f8:	47b0      	blx	r6
 80112fa:	2800      	cmp	r0, #0
 80112fc:	dc08      	bgt.n	8011310 <__sflush_r+0xfc>
 80112fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011306:	81a3      	strh	r3, [r4, #12]
 8011308:	f04f 30ff 	mov.w	r0, #4294967295
 801130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011310:	4407      	add	r7, r0
 8011312:	eba8 0800 	sub.w	r8, r8, r0
 8011316:	e7e7      	b.n	80112e8 <__sflush_r+0xd4>
 8011318:	dfbffffe 	.word	0xdfbffffe

0801131c <_fflush_r>:
 801131c:	b538      	push	{r3, r4, r5, lr}
 801131e:	690b      	ldr	r3, [r1, #16]
 8011320:	4605      	mov	r5, r0
 8011322:	460c      	mov	r4, r1
 8011324:	b913      	cbnz	r3, 801132c <_fflush_r+0x10>
 8011326:	2500      	movs	r5, #0
 8011328:	4628      	mov	r0, r5
 801132a:	bd38      	pop	{r3, r4, r5, pc}
 801132c:	b118      	cbz	r0, 8011336 <_fflush_r+0x1a>
 801132e:	6a03      	ldr	r3, [r0, #32]
 8011330:	b90b      	cbnz	r3, 8011336 <_fflush_r+0x1a>
 8011332:	f7fe f881 	bl	800f438 <__sinit>
 8011336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d0f3      	beq.n	8011326 <_fflush_r+0xa>
 801133e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011340:	07d0      	lsls	r0, r2, #31
 8011342:	d404      	bmi.n	801134e <_fflush_r+0x32>
 8011344:	0599      	lsls	r1, r3, #22
 8011346:	d402      	bmi.n	801134e <_fflush_r+0x32>
 8011348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801134a:	f7fe faa0 	bl	800f88e <__retarget_lock_acquire_recursive>
 801134e:	4628      	mov	r0, r5
 8011350:	4621      	mov	r1, r4
 8011352:	f7ff ff5f 	bl	8011214 <__sflush_r>
 8011356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011358:	07da      	lsls	r2, r3, #31
 801135a:	4605      	mov	r5, r0
 801135c:	d4e4      	bmi.n	8011328 <_fflush_r+0xc>
 801135e:	89a3      	ldrh	r3, [r4, #12]
 8011360:	059b      	lsls	r3, r3, #22
 8011362:	d4e1      	bmi.n	8011328 <_fflush_r+0xc>
 8011364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011366:	f7fe fa93 	bl	800f890 <__retarget_lock_release_recursive>
 801136a:	e7dd      	b.n	8011328 <_fflush_r+0xc>

0801136c <__swhatbuf_r>:
 801136c:	b570      	push	{r4, r5, r6, lr}
 801136e:	460c      	mov	r4, r1
 8011370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011374:	2900      	cmp	r1, #0
 8011376:	b096      	sub	sp, #88	@ 0x58
 8011378:	4615      	mov	r5, r2
 801137a:	461e      	mov	r6, r3
 801137c:	da0d      	bge.n	801139a <__swhatbuf_r+0x2e>
 801137e:	89a3      	ldrh	r3, [r4, #12]
 8011380:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011384:	f04f 0100 	mov.w	r1, #0
 8011388:	bf14      	ite	ne
 801138a:	2340      	movne	r3, #64	@ 0x40
 801138c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011390:	2000      	movs	r0, #0
 8011392:	6031      	str	r1, [r6, #0]
 8011394:	602b      	str	r3, [r5, #0]
 8011396:	b016      	add	sp, #88	@ 0x58
 8011398:	bd70      	pop	{r4, r5, r6, pc}
 801139a:	466a      	mov	r2, sp
 801139c:	f000 f862 	bl	8011464 <_fstat_r>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	dbec      	blt.n	801137e <__swhatbuf_r+0x12>
 80113a4:	9901      	ldr	r1, [sp, #4]
 80113a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80113aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80113ae:	4259      	negs	r1, r3
 80113b0:	4159      	adcs	r1, r3
 80113b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113b6:	e7eb      	b.n	8011390 <__swhatbuf_r+0x24>

080113b8 <__smakebuf_r>:
 80113b8:	898b      	ldrh	r3, [r1, #12]
 80113ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113bc:	079d      	lsls	r5, r3, #30
 80113be:	4606      	mov	r6, r0
 80113c0:	460c      	mov	r4, r1
 80113c2:	d507      	bpl.n	80113d4 <__smakebuf_r+0x1c>
 80113c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80113c8:	6023      	str	r3, [r4, #0]
 80113ca:	6123      	str	r3, [r4, #16]
 80113cc:	2301      	movs	r3, #1
 80113ce:	6163      	str	r3, [r4, #20]
 80113d0:	b003      	add	sp, #12
 80113d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d4:	ab01      	add	r3, sp, #4
 80113d6:	466a      	mov	r2, sp
 80113d8:	f7ff ffc8 	bl	801136c <__swhatbuf_r>
 80113dc:	9f00      	ldr	r7, [sp, #0]
 80113de:	4605      	mov	r5, r0
 80113e0:	4639      	mov	r1, r7
 80113e2:	4630      	mov	r0, r6
 80113e4:	f7fd fab8 	bl	800e958 <_malloc_r>
 80113e8:	b948      	cbnz	r0, 80113fe <__smakebuf_r+0x46>
 80113ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ee:	059a      	lsls	r2, r3, #22
 80113f0:	d4ee      	bmi.n	80113d0 <__smakebuf_r+0x18>
 80113f2:	f023 0303 	bic.w	r3, r3, #3
 80113f6:	f043 0302 	orr.w	r3, r3, #2
 80113fa:	81a3      	strh	r3, [r4, #12]
 80113fc:	e7e2      	b.n	80113c4 <__smakebuf_r+0xc>
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	6020      	str	r0, [r4, #0]
 8011402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011406:	81a3      	strh	r3, [r4, #12]
 8011408:	9b01      	ldr	r3, [sp, #4]
 801140a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801140e:	b15b      	cbz	r3, 8011428 <__smakebuf_r+0x70>
 8011410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011414:	4630      	mov	r0, r6
 8011416:	f000 f837 	bl	8011488 <_isatty_r>
 801141a:	b128      	cbz	r0, 8011428 <__smakebuf_r+0x70>
 801141c:	89a3      	ldrh	r3, [r4, #12]
 801141e:	f023 0303 	bic.w	r3, r3, #3
 8011422:	f043 0301 	orr.w	r3, r3, #1
 8011426:	81a3      	strh	r3, [r4, #12]
 8011428:	89a3      	ldrh	r3, [r4, #12]
 801142a:	431d      	orrs	r5, r3
 801142c:	81a5      	strh	r5, [r4, #12]
 801142e:	e7cf      	b.n	80113d0 <__smakebuf_r+0x18>

08011430 <memmove>:
 8011430:	4288      	cmp	r0, r1
 8011432:	b510      	push	{r4, lr}
 8011434:	eb01 0402 	add.w	r4, r1, r2
 8011438:	d902      	bls.n	8011440 <memmove+0x10>
 801143a:	4284      	cmp	r4, r0
 801143c:	4623      	mov	r3, r4
 801143e:	d807      	bhi.n	8011450 <memmove+0x20>
 8011440:	1e43      	subs	r3, r0, #1
 8011442:	42a1      	cmp	r1, r4
 8011444:	d008      	beq.n	8011458 <memmove+0x28>
 8011446:	f811 2b01 	ldrb.w	r2, [r1], #1
 801144a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801144e:	e7f8      	b.n	8011442 <memmove+0x12>
 8011450:	4402      	add	r2, r0
 8011452:	4601      	mov	r1, r0
 8011454:	428a      	cmp	r2, r1
 8011456:	d100      	bne.n	801145a <memmove+0x2a>
 8011458:	bd10      	pop	{r4, pc}
 801145a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801145e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011462:	e7f7      	b.n	8011454 <memmove+0x24>

08011464 <_fstat_r>:
 8011464:	b538      	push	{r3, r4, r5, lr}
 8011466:	4d07      	ldr	r5, [pc, #28]	@ (8011484 <_fstat_r+0x20>)
 8011468:	2300      	movs	r3, #0
 801146a:	4604      	mov	r4, r0
 801146c:	4608      	mov	r0, r1
 801146e:	4611      	mov	r1, r2
 8011470:	602b      	str	r3, [r5, #0]
 8011472:	f7f1 ff5b 	bl	800332c <_fstat>
 8011476:	1c43      	adds	r3, r0, #1
 8011478:	d102      	bne.n	8011480 <_fstat_r+0x1c>
 801147a:	682b      	ldr	r3, [r5, #0]
 801147c:	b103      	cbz	r3, 8011480 <_fstat_r+0x1c>
 801147e:	6023      	str	r3, [r4, #0]
 8011480:	bd38      	pop	{r3, r4, r5, pc}
 8011482:	bf00      	nop
 8011484:	20000d78 	.word	0x20000d78

08011488 <_isatty_r>:
 8011488:	b538      	push	{r3, r4, r5, lr}
 801148a:	4d06      	ldr	r5, [pc, #24]	@ (80114a4 <_isatty_r+0x1c>)
 801148c:	2300      	movs	r3, #0
 801148e:	4604      	mov	r4, r0
 8011490:	4608      	mov	r0, r1
 8011492:	602b      	str	r3, [r5, #0]
 8011494:	f7f1 ff5a 	bl	800334c <_isatty>
 8011498:	1c43      	adds	r3, r0, #1
 801149a:	d102      	bne.n	80114a2 <_isatty_r+0x1a>
 801149c:	682b      	ldr	r3, [r5, #0]
 801149e:	b103      	cbz	r3, 80114a2 <_isatty_r+0x1a>
 80114a0:	6023      	str	r3, [r4, #0]
 80114a2:	bd38      	pop	{r3, r4, r5, pc}
 80114a4:	20000d78 	.word	0x20000d78

080114a8 <__assert_func>:
 80114a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114aa:	4614      	mov	r4, r2
 80114ac:	461a      	mov	r2, r3
 80114ae:	4b09      	ldr	r3, [pc, #36]	@ (80114d4 <__assert_func+0x2c>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	4605      	mov	r5, r0
 80114b4:	68d8      	ldr	r0, [r3, #12]
 80114b6:	b954      	cbnz	r4, 80114ce <__assert_func+0x26>
 80114b8:	4b07      	ldr	r3, [pc, #28]	@ (80114d8 <__assert_func+0x30>)
 80114ba:	461c      	mov	r4, r3
 80114bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114c0:	9100      	str	r1, [sp, #0]
 80114c2:	462b      	mov	r3, r5
 80114c4:	4905      	ldr	r1, [pc, #20]	@ (80114dc <__assert_func+0x34>)
 80114c6:	f000 f86f 	bl	80115a8 <fiprintf>
 80114ca:	f000 f87f 	bl	80115cc <abort>
 80114ce:	4b04      	ldr	r3, [pc, #16]	@ (80114e0 <__assert_func+0x38>)
 80114d0:	e7f4      	b.n	80114bc <__assert_func+0x14>
 80114d2:	bf00      	nop
 80114d4:	20000038 	.word	0x20000038
 80114d8:	08011ede 	.word	0x08011ede
 80114dc:	08011eb0 	.word	0x08011eb0
 80114e0:	08011ea3 	.word	0x08011ea3

080114e4 <_calloc_r>:
 80114e4:	b570      	push	{r4, r5, r6, lr}
 80114e6:	fba1 5402 	umull	r5, r4, r1, r2
 80114ea:	b93c      	cbnz	r4, 80114fc <_calloc_r+0x18>
 80114ec:	4629      	mov	r1, r5
 80114ee:	f7fd fa33 	bl	800e958 <_malloc_r>
 80114f2:	4606      	mov	r6, r0
 80114f4:	b928      	cbnz	r0, 8011502 <_calloc_r+0x1e>
 80114f6:	2600      	movs	r6, #0
 80114f8:	4630      	mov	r0, r6
 80114fa:	bd70      	pop	{r4, r5, r6, pc}
 80114fc:	220c      	movs	r2, #12
 80114fe:	6002      	str	r2, [r0, #0]
 8011500:	e7f9      	b.n	80114f6 <_calloc_r+0x12>
 8011502:	462a      	mov	r2, r5
 8011504:	4621      	mov	r1, r4
 8011506:	f7fe f935 	bl	800f774 <memset>
 801150a:	e7f5      	b.n	80114f8 <_calloc_r+0x14>

0801150c <__ascii_mbtowc>:
 801150c:	b082      	sub	sp, #8
 801150e:	b901      	cbnz	r1, 8011512 <__ascii_mbtowc+0x6>
 8011510:	a901      	add	r1, sp, #4
 8011512:	b142      	cbz	r2, 8011526 <__ascii_mbtowc+0x1a>
 8011514:	b14b      	cbz	r3, 801152a <__ascii_mbtowc+0x1e>
 8011516:	7813      	ldrb	r3, [r2, #0]
 8011518:	600b      	str	r3, [r1, #0]
 801151a:	7812      	ldrb	r2, [r2, #0]
 801151c:	1e10      	subs	r0, r2, #0
 801151e:	bf18      	it	ne
 8011520:	2001      	movne	r0, #1
 8011522:	b002      	add	sp, #8
 8011524:	4770      	bx	lr
 8011526:	4610      	mov	r0, r2
 8011528:	e7fb      	b.n	8011522 <__ascii_mbtowc+0x16>
 801152a:	f06f 0001 	mvn.w	r0, #1
 801152e:	e7f8      	b.n	8011522 <__ascii_mbtowc+0x16>

08011530 <_realloc_r>:
 8011530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	4680      	mov	r8, r0
 8011536:	4615      	mov	r5, r2
 8011538:	460c      	mov	r4, r1
 801153a:	b921      	cbnz	r1, 8011546 <_realloc_r+0x16>
 801153c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011540:	4611      	mov	r1, r2
 8011542:	f7fd ba09 	b.w	800e958 <_malloc_r>
 8011546:	b92a      	cbnz	r2, 8011554 <_realloc_r+0x24>
 8011548:	f7fe fffe 	bl	8010548 <_free_r>
 801154c:	2400      	movs	r4, #0
 801154e:	4620      	mov	r0, r4
 8011550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011554:	f000 f841 	bl	80115da <_malloc_usable_size_r>
 8011558:	4285      	cmp	r5, r0
 801155a:	4606      	mov	r6, r0
 801155c:	d802      	bhi.n	8011564 <_realloc_r+0x34>
 801155e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011562:	d8f4      	bhi.n	801154e <_realloc_r+0x1e>
 8011564:	4629      	mov	r1, r5
 8011566:	4640      	mov	r0, r8
 8011568:	f7fd f9f6 	bl	800e958 <_malloc_r>
 801156c:	4607      	mov	r7, r0
 801156e:	2800      	cmp	r0, #0
 8011570:	d0ec      	beq.n	801154c <_realloc_r+0x1c>
 8011572:	42b5      	cmp	r5, r6
 8011574:	462a      	mov	r2, r5
 8011576:	4621      	mov	r1, r4
 8011578:	bf28      	it	cs
 801157a:	4632      	movcs	r2, r6
 801157c:	f7fe f989 	bl	800f892 <memcpy>
 8011580:	4621      	mov	r1, r4
 8011582:	4640      	mov	r0, r8
 8011584:	f7fe ffe0 	bl	8010548 <_free_r>
 8011588:	463c      	mov	r4, r7
 801158a:	e7e0      	b.n	801154e <_realloc_r+0x1e>

0801158c <__ascii_wctomb>:
 801158c:	4603      	mov	r3, r0
 801158e:	4608      	mov	r0, r1
 8011590:	b141      	cbz	r1, 80115a4 <__ascii_wctomb+0x18>
 8011592:	2aff      	cmp	r2, #255	@ 0xff
 8011594:	d904      	bls.n	80115a0 <__ascii_wctomb+0x14>
 8011596:	228a      	movs	r2, #138	@ 0x8a
 8011598:	601a      	str	r2, [r3, #0]
 801159a:	f04f 30ff 	mov.w	r0, #4294967295
 801159e:	4770      	bx	lr
 80115a0:	700a      	strb	r2, [r1, #0]
 80115a2:	2001      	movs	r0, #1
 80115a4:	4770      	bx	lr
	...

080115a8 <fiprintf>:
 80115a8:	b40e      	push	{r1, r2, r3}
 80115aa:	b503      	push	{r0, r1, lr}
 80115ac:	4601      	mov	r1, r0
 80115ae:	ab03      	add	r3, sp, #12
 80115b0:	4805      	ldr	r0, [pc, #20]	@ (80115c8 <fiprintf+0x20>)
 80115b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80115b6:	6800      	ldr	r0, [r0, #0]
 80115b8:	9301      	str	r3, [sp, #4]
 80115ba:	f7ff fd13 	bl	8010fe4 <_vfiprintf_r>
 80115be:	b002      	add	sp, #8
 80115c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80115c4:	b003      	add	sp, #12
 80115c6:	4770      	bx	lr
 80115c8:	20000038 	.word	0x20000038

080115cc <abort>:
 80115cc:	b508      	push	{r3, lr}
 80115ce:	2006      	movs	r0, #6
 80115d0:	f000 f834 	bl	801163c <raise>
 80115d4:	2001      	movs	r0, #1
 80115d6:	f7f1 fe75 	bl	80032c4 <_exit>

080115da <_malloc_usable_size_r>:
 80115da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115de:	1f18      	subs	r0, r3, #4
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	bfbc      	itt	lt
 80115e4:	580b      	ldrlt	r3, [r1, r0]
 80115e6:	18c0      	addlt	r0, r0, r3
 80115e8:	4770      	bx	lr

080115ea <_raise_r>:
 80115ea:	291f      	cmp	r1, #31
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4605      	mov	r5, r0
 80115f0:	460c      	mov	r4, r1
 80115f2:	d904      	bls.n	80115fe <_raise_r+0x14>
 80115f4:	2316      	movs	r3, #22
 80115f6:	6003      	str	r3, [r0, #0]
 80115f8:	f04f 30ff 	mov.w	r0, #4294967295
 80115fc:	bd38      	pop	{r3, r4, r5, pc}
 80115fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011600:	b112      	cbz	r2, 8011608 <_raise_r+0x1e>
 8011602:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011606:	b94b      	cbnz	r3, 801161c <_raise_r+0x32>
 8011608:	4628      	mov	r0, r5
 801160a:	f000 f831 	bl	8011670 <_getpid_r>
 801160e:	4622      	mov	r2, r4
 8011610:	4601      	mov	r1, r0
 8011612:	4628      	mov	r0, r5
 8011614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011618:	f000 b818 	b.w	801164c <_kill_r>
 801161c:	2b01      	cmp	r3, #1
 801161e:	d00a      	beq.n	8011636 <_raise_r+0x4c>
 8011620:	1c59      	adds	r1, r3, #1
 8011622:	d103      	bne.n	801162c <_raise_r+0x42>
 8011624:	2316      	movs	r3, #22
 8011626:	6003      	str	r3, [r0, #0]
 8011628:	2001      	movs	r0, #1
 801162a:	e7e7      	b.n	80115fc <_raise_r+0x12>
 801162c:	2100      	movs	r1, #0
 801162e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011632:	4620      	mov	r0, r4
 8011634:	4798      	blx	r3
 8011636:	2000      	movs	r0, #0
 8011638:	e7e0      	b.n	80115fc <_raise_r+0x12>
	...

0801163c <raise>:
 801163c:	4b02      	ldr	r3, [pc, #8]	@ (8011648 <raise+0xc>)
 801163e:	4601      	mov	r1, r0
 8011640:	6818      	ldr	r0, [r3, #0]
 8011642:	f7ff bfd2 	b.w	80115ea <_raise_r>
 8011646:	bf00      	nop
 8011648:	20000038 	.word	0x20000038

0801164c <_kill_r>:
 801164c:	b538      	push	{r3, r4, r5, lr}
 801164e:	4d07      	ldr	r5, [pc, #28]	@ (801166c <_kill_r+0x20>)
 8011650:	2300      	movs	r3, #0
 8011652:	4604      	mov	r4, r0
 8011654:	4608      	mov	r0, r1
 8011656:	4611      	mov	r1, r2
 8011658:	602b      	str	r3, [r5, #0]
 801165a:	f7f1 fe23 	bl	80032a4 <_kill>
 801165e:	1c43      	adds	r3, r0, #1
 8011660:	d102      	bne.n	8011668 <_kill_r+0x1c>
 8011662:	682b      	ldr	r3, [r5, #0]
 8011664:	b103      	cbz	r3, 8011668 <_kill_r+0x1c>
 8011666:	6023      	str	r3, [r4, #0]
 8011668:	bd38      	pop	{r3, r4, r5, pc}
 801166a:	bf00      	nop
 801166c:	20000d78 	.word	0x20000d78

08011670 <_getpid_r>:
 8011670:	f7f1 be10 	b.w	8003294 <_getpid>

08011674 <_init>:
 8011674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011676:	bf00      	nop
 8011678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801167a:	bc08      	pop	{r3}
 801167c:	469e      	mov	lr, r3
 801167e:	4770      	bx	lr

08011680 <_fini>:
 8011680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011682:	bf00      	nop
 8011684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011686:	bc08      	pop	{r3}
 8011688:	469e      	mov	lr, r3
 801168a:	4770      	bx	lr
